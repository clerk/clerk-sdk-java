/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateActorTokenRequestBody;
import com.clerk.backend_api.models.operations.CreateActorTokenRequestBuilder;
import com.clerk.backend_api.models.operations.CreateActorTokenResponse;
import com.clerk.backend_api.models.operations.RevokeActorTokenRequest;
import com.clerk.backend_api.models.operations.RevokeActorTokenRequestBuilder;
import com.clerk.backend_api.models.operations.RevokeActorTokenResponse;
import com.clerk.backend_api.operations.CreateActorToken;
import com.clerk.backend_api.operations.RevokeActorToken;
import com.clerk.backend_api.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class ActorTokens {
    private final SDKConfiguration sdkConfiguration;

    ActorTokens(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create actor token
     * 
     * <p>Create an actor token that can be used to impersonate the given user.
     * The `actor` parameter needs to include at least a "sub" key whose value is the ID of the actor (impersonating) user.
     * 
     * @return The call builder
     */
    public CreateActorTokenRequestBuilder create() {
        return new CreateActorTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Create actor token
     * 
     * <p>Create an actor token that can be used to impersonate the given user.
     * The `actor` parameter needs to include at least a "sub" key whose value is the ID of the actor (impersonating) user.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateActorTokenResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create actor token
     * 
     * <p>Create an actor token that can be used to impersonate the given user.
     * The `actor` parameter needs to include at least a "sub" key whose value is the ID of the actor (impersonating) user.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateActorTokenResponse create(Optional<? extends CreateActorTokenRequestBody> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateActorTokenRequestBody>, CreateActorTokenResponse> operation
              = new CreateActorToken.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revoke actor token
     * 
     * <p>Revokes a pending actor token.
     * 
     * @return The call builder
     */
    public RevokeActorTokenRequestBuilder revoke() {
        return new RevokeActorTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Revoke actor token
     * 
     * <p>Revokes a pending actor token.
     * 
     * @param actorTokenId The ID of the actor token to be revoked.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeActorTokenResponse revoke(String actorTokenId) throws Exception {
        return revoke(actorTokenId, Optional.empty());
    }

    /**
     * Revoke actor token
     * 
     * <p>Revokes a pending actor token.
     * 
     * @param actorTokenId The ID of the actor token to be revoked.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeActorTokenResponse revoke(String actorTokenId, Optional<Options> options) throws Exception {
        RevokeActorTokenRequest request =
            RevokeActorTokenRequest
                .builder()
                .actorTokenId(actorTokenId)
                .build();
        RequestOperation<RevokeActorTokenRequest, RevokeActorTokenResponse> operation
              = new RevokeActorToken.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
