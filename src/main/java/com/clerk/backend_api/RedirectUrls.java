/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateRedirectURLRequestBody;
import com.clerk.backend_api.models.operations.CreateRedirectURLRequestBuilder;
import com.clerk.backend_api.models.operations.CreateRedirectURLResponse;
import com.clerk.backend_api.models.operations.DeleteRedirectURLRequest;
import com.clerk.backend_api.models.operations.DeleteRedirectURLRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteRedirectURLResponse;
import com.clerk.backend_api.models.operations.GetRedirectURLRequest;
import com.clerk.backend_api.models.operations.GetRedirectURLRequestBuilder;
import com.clerk.backend_api.models.operations.GetRedirectURLResponse;
import com.clerk.backend_api.models.operations.ListRedirectURLsRequest;
import com.clerk.backend_api.models.operations.ListRedirectURLsRequestBuilder;
import com.clerk.backend_api.models.operations.ListRedirectURLsResponse;
import com.clerk.backend_api.operations.CreateRedirectURL;
import com.clerk.backend_api.operations.DeleteRedirectURL;
import com.clerk.backend_api.operations.GetRedirectURL;
import com.clerk.backend_api.operations.ListRedirectURLs;
import com.clerk.backend_api.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;


public class RedirectUrls {
    private final SDKConfiguration sdkConfiguration;

    RedirectUrls(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List all redirect URLs
     * 
     * <p>Lists all whitelisted redirect_urls for the instance
     * 
     * @return The call builder
     */
    public ListRedirectURLsRequestBuilder list() {
        return new ListRedirectURLsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all redirect URLs
     * 
     * <p>Lists all whitelisted redirect_urls for the instance
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRedirectURLsResponse listDirect() throws Exception {
        return list(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * List all redirect URLs
     * 
     * <p>Lists all whitelisted redirect_urls for the instance
     * 
     * @param paginated Whether to paginate the results.
     *         If true, the results will be paginated.
     *         If false, the results will not be paginated.
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRedirectURLsResponse list(
            Optional<Boolean> paginated, Optional<Long> limit,
            Optional<Long> offset, Optional<Options> options) throws Exception {
        ListRedirectURLsRequest request =
            ListRedirectURLsRequest
                .builder()
                .paginated(paginated)
                .limit(limit)
                .offset(offset)
                .build();
        RequestOperation<ListRedirectURLsRequest, ListRedirectURLsResponse> operation
              = new ListRedirectURLs.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a redirect URL
     * 
     * <p>Create a redirect URL
     * 
     * @return The call builder
     */
    public CreateRedirectURLRequestBuilder create() {
        return new CreateRedirectURLRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a redirect URL
     * 
     * <p>Create a redirect URL
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRedirectURLResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create a redirect URL
     * 
     * <p>Create a redirect URL
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRedirectURLResponse create(Optional<? extends CreateRedirectURLRequestBody> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateRedirectURLRequestBody>, CreateRedirectURLResponse> operation
              = new CreateRedirectURL.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a redirect URL
     * 
     * <p>Retrieve the details of the redirect URL with the given ID
     * 
     * @return The call builder
     */
    public GetRedirectURLRequestBuilder get() {
        return new GetRedirectURLRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a redirect URL
     * 
     * <p>Retrieve the details of the redirect URL with the given ID
     * 
     * @param id The ID of the redirect URL
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRedirectURLResponse get(String id) throws Exception {
        return get(id, Optional.empty());
    }

    /**
     * Retrieve a redirect URL
     * 
     * <p>Retrieve the details of the redirect URL with the given ID
     * 
     * @param id The ID of the redirect URL
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRedirectURLResponse get(String id, Optional<Options> options) throws Exception {
        GetRedirectURLRequest request =
            GetRedirectURLRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<GetRedirectURLRequest, GetRedirectURLResponse> operation
              = new GetRedirectURL.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a redirect URL
     * 
     * <p>Remove the selected redirect URL from the whitelist of the instance
     * 
     * @return The call builder
     */
    public DeleteRedirectURLRequestBuilder delete() {
        return new DeleteRedirectURLRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a redirect URL
     * 
     * <p>Remove the selected redirect URL from the whitelist of the instance
     * 
     * @param id The ID of the redirect URL
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteRedirectURLResponse delete(String id) throws Exception {
        return delete(id, Optional.empty());
    }

    /**
     * Delete a redirect URL
     * 
     * <p>Remove the selected redirect URL from the whitelist of the instance
     * 
     * @param id The ID of the redirect URL
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteRedirectURLResponse delete(String id, Optional<Options> options) throws Exception {
        DeleteRedirectURLRequest request =
            DeleteRedirectURLRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<DeleteRedirectURLRequest, DeleteRedirectURLResponse> operation
              = new DeleteRedirectURL.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
