/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.hooks;

//
// This file is written once by speakeasy code generation and 
// thereafter will not be overwritten by speakeasy updates. As a
// consequence any customization of this class will be preserved.
//

import com.clerk.backend_api.hooks.telemetry.TelemetryAfterErrorHook;
import com.clerk.backend_api.hooks.telemetry.TelemetryAfterSuccessHook;
import com.clerk.backend_api.hooks.telemetry.TelemetryBeforeRequestHook;
import com.clerk.backend_api.hooks.telemetry.TelemetryCollector;
import com.clerk.backend_api.utils.Hooks;
import io.jsonwebtoken.lang.Objects;

import java.util.ArrayList;
import java.util.List;

public final class SDKHooks {

    private SDKHooks() {
        // prevent instantiation
    }

    public static final void initialize(com.clerk.backend_api.utils.Hooks hooks) {
        // register hooks here

        // for more information see
        // https://www.speakeasyapi.dev/docs/additional-features/sdk-hooks

        ClerkBeforeRequestHook clerkBeforeRequestHook = new ClerkBeforeRequestHook();
        hooks.registerBeforeRequest(clerkBeforeRequestHook);

        configureTelemetry(hooks, System.getenv("CLERK_TELEMETRY_DISABLED"), System.getenv("CLERK_TELEMETRY_DEBUG"));
    }

    static void configureTelemetry(
            Hooks hooks,
            String clerkTelemetryDisabledEnvVar,
            String clerkTelemetryDebugEnvVar) {
        if (Objects.nullSafeEquals(clerkTelemetryDisabledEnvVar, "1")) {
            return;
        }

        List<TelemetryCollector> collectors = new ArrayList<>(2);
        collectors.add(TelemetryCollector.live());
        if (Objects.nullSafeEquals(clerkTelemetryDebugEnvVar, "1")) {
            collectors.add(new TelemetryCollector.DebugCollector());
        }

        hooks.registerBeforeRequest(new TelemetryBeforeRequestHook(collectors));
        hooks.registerAfterSuccess(new TelemetryAfterSuccessHook(collectors));
        hooks.registerAfterError(new TelemetryAfterErrorHook(collectors));
    }

}
