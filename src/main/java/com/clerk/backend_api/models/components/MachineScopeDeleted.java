/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;

/**
 * MachineScopeDeleted
 * 
 * <p>Machine scope deleted successfully for a machine
 */
public class MachineScopeDeleted {
    /**
     * String representing the object's type.
     */
    @JsonProperty("object")
    private MachineScopeDeletedObject object;

    /**
     * The ID of the machine that had access to the target machine
     */
    @JsonProperty("from_machine_id")
    private String fromMachineId;

    /**
     * The ID of the machine that was being accessed
     */
    @JsonProperty("to_machine_id")
    private String toMachineId;

    /**
     * Whether the machine scope was successfully deleted
     */
    @JsonProperty("deleted")
    private boolean deleted;

    @JsonCreator
    public MachineScopeDeleted(
            @JsonProperty("object") MachineScopeDeletedObject object,
            @JsonProperty("from_machine_id") String fromMachineId,
            @JsonProperty("to_machine_id") String toMachineId,
            @JsonProperty("deleted") boolean deleted) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(fromMachineId, "fromMachineId");
        Utils.checkNotNull(toMachineId, "toMachineId");
        Utils.checkNotNull(deleted, "deleted");
        this.object = object;
        this.fromMachineId = fromMachineId;
        this.toMachineId = toMachineId;
        this.deleted = deleted;
    }

    /**
     * String representing the object's type.
     */
    @JsonIgnore
    public MachineScopeDeletedObject object() {
        return object;
    }

    /**
     * The ID of the machine that had access to the target machine
     */
    @JsonIgnore
    public String fromMachineId() {
        return fromMachineId;
    }

    /**
     * The ID of the machine that was being accessed
     */
    @JsonIgnore
    public String toMachineId() {
        return toMachineId;
    }

    /**
     * Whether the machine scope was successfully deleted
     */
    @JsonIgnore
    public boolean deleted() {
        return deleted;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type.
     */
    public MachineScopeDeleted withObject(MachineScopeDeletedObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * The ID of the machine that had access to the target machine
     */
    public MachineScopeDeleted withFromMachineId(String fromMachineId) {
        Utils.checkNotNull(fromMachineId, "fromMachineId");
        this.fromMachineId = fromMachineId;
        return this;
    }

    /**
     * The ID of the machine that was being accessed
     */
    public MachineScopeDeleted withToMachineId(String toMachineId) {
        Utils.checkNotNull(toMachineId, "toMachineId");
        this.toMachineId = toMachineId;
        return this;
    }

    /**
     * Whether the machine scope was successfully deleted
     */
    public MachineScopeDeleted withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MachineScopeDeleted other = (MachineScopeDeleted) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.fromMachineId, other.fromMachineId) &&
            Utils.enhancedDeepEquals(this.toMachineId, other.toMachineId) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, fromMachineId, toMachineId,
            deleted);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MachineScopeDeleted.class,
                "object", object,
                "fromMachineId", fromMachineId,
                "toMachineId", toMachineId,
                "deleted", deleted);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private MachineScopeDeletedObject object;

        private String fromMachineId;

        private String toMachineId;

        private Boolean deleted;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type.
         */
        public Builder object(MachineScopeDeletedObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * The ID of the machine that had access to the target machine
         */
        public Builder fromMachineId(String fromMachineId) {
            Utils.checkNotNull(fromMachineId, "fromMachineId");
            this.fromMachineId = fromMachineId;
            return this;
        }


        /**
         * The ID of the machine that was being accessed
         */
        public Builder toMachineId(String toMachineId) {
            Utils.checkNotNull(toMachineId, "toMachineId");
            this.toMachineId = toMachineId;
            return this;
        }


        /**
         * Whether the machine scope was successfully deleted
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        public MachineScopeDeleted build() {

            return new MachineScopeDeleted(
                object, fromMachineId, toMachineId,
                deleted);
        }

    }
}
