/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class SignUpVerifications {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("email_address")
    private Optional<? extends SignUpVerification> emailAddress;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("phone_number")
    private Optional<? extends SignUpVerification> phoneNumber;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("web3_wallet")
    private Optional<? extends SignUpVerification> web3Wallet;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("external_account")
    private Optional<? extends ExternalAccount> externalAccount;

    @JsonCreator
    public SignUpVerifications(
            @JsonProperty("email_address") Optional<? extends SignUpVerification> emailAddress,
            @JsonProperty("phone_number") Optional<? extends SignUpVerification> phoneNumber,
            @JsonProperty("web3_wallet") Optional<? extends SignUpVerification> web3Wallet,
            @JsonProperty("external_account") Optional<? extends ExternalAccount> externalAccount) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        Utils.checkNotNull(externalAccount, "externalAccount");
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.web3Wallet = web3Wallet;
        this.externalAccount = externalAccount;
    }
    
    public SignUpVerifications() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SignUpVerification> emailAddress() {
        return (Optional<SignUpVerification>) emailAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SignUpVerification> phoneNumber() {
        return (Optional<SignUpVerification>) phoneNumber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SignUpVerification> web3Wallet() {
        return (Optional<SignUpVerification>) web3Wallet;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExternalAccount> externalAccount() {
        return (Optional<ExternalAccount>) externalAccount;
    }

    public static Builder builder() {
        return new Builder();
    }


    public SignUpVerifications withEmailAddress(SignUpVerification emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }


    public SignUpVerifications withEmailAddress(Optional<? extends SignUpVerification> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    public SignUpVerifications withPhoneNumber(SignUpVerification phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }


    public SignUpVerifications withPhoneNumber(Optional<? extends SignUpVerification> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    public SignUpVerifications withWeb3Wallet(SignUpVerification web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = Optional.ofNullable(web3Wallet);
        return this;
    }


    public SignUpVerifications withWeb3Wallet(Optional<? extends SignUpVerification> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = web3Wallet;
        return this;
    }

    public SignUpVerifications withExternalAccount(ExternalAccount externalAccount) {
        Utils.checkNotNull(externalAccount, "externalAccount");
        this.externalAccount = Optional.ofNullable(externalAccount);
        return this;
    }


    public SignUpVerifications withExternalAccount(Optional<? extends ExternalAccount> externalAccount) {
        Utils.checkNotNull(externalAccount, "externalAccount");
        this.externalAccount = externalAccount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SignUpVerifications other = (SignUpVerifications) o;
        return 
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber) &&
            Utils.enhancedDeepEquals(this.web3Wallet, other.web3Wallet) &&
            Utils.enhancedDeepEquals(this.externalAccount, other.externalAccount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            emailAddress, phoneNumber, web3Wallet,
            externalAccount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SignUpVerifications.class,
                "emailAddress", emailAddress,
                "phoneNumber", phoneNumber,
                "web3Wallet", web3Wallet,
                "externalAccount", externalAccount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends SignUpVerification> emailAddress = Optional.empty();

        private Optional<? extends SignUpVerification> phoneNumber = Optional.empty();

        private Optional<? extends SignUpVerification> web3Wallet = Optional.empty();

        private Optional<? extends ExternalAccount> externalAccount = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder emailAddress(SignUpVerification emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        public Builder emailAddress(Optional<? extends SignUpVerification> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }


        public Builder phoneNumber(SignUpVerification phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        public Builder phoneNumber(Optional<? extends SignUpVerification> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }


        public Builder web3Wallet(SignUpVerification web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = Optional.ofNullable(web3Wallet);
            return this;
        }

        public Builder web3Wallet(Optional<? extends SignUpVerification> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = web3Wallet;
            return this;
        }


        public Builder externalAccount(ExternalAccount externalAccount) {
            Utils.checkNotNull(externalAccount, "externalAccount");
            this.externalAccount = Optional.ofNullable(externalAccount);
            return this;
        }

        public Builder externalAccount(Optional<? extends ExternalAccount> externalAccount) {
            Utils.checkNotNull(externalAccount, "externalAccount");
            this.externalAccount = externalAccount;
            return this;
        }

        public SignUpVerifications build() {

            return new SignUpVerifications(
                emailAddress, phoneNumber, web3Wallet,
                externalAccount);
        }

    }
}
