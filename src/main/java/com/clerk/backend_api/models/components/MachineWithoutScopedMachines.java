/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class MachineWithoutScopedMachines {

    @JsonProperty("object")
    private MachineWithoutScopedMachinesObject object;

    /**
     * Unique identifier for the machine.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The name of the machine.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The ID of the instance this machine belongs to.
     */
    @JsonProperty("instance_id")
    private String instanceId;

    /**
     * Unix timestamp of creation.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of last update.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_token_ttl")
    private Optional<Long> defaultTokenTtl;

    @JsonCreator
    public MachineWithoutScopedMachines(
            @JsonProperty("object") MachineWithoutScopedMachinesObject object,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("instance_id") String instanceId,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt,
            @JsonProperty("default_token_ttl") Optional<Long> defaultTokenTtl) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(instanceId, "instanceId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
        this.object = object;
        this.id = id;
        this.name = name;
        this.instanceId = instanceId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.defaultTokenTtl = defaultTokenTtl;
    }
    
    public MachineWithoutScopedMachines(
            MachineWithoutScopedMachinesObject object,
            String id,
            String name,
            String instanceId,
            long createdAt,
            long updatedAt) {
        this(object, id, name,
            instanceId, createdAt, updatedAt,
            Optional.empty());
    }

    @JsonIgnore
    public MachineWithoutScopedMachinesObject object() {
        return object;
    }

    /**
     * Unique identifier for the machine.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The name of the machine.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The ID of the instance this machine belongs to.
     */
    @JsonIgnore
    public String instanceId() {
        return instanceId;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine.
     */
    @JsonIgnore
    public Optional<Long> defaultTokenTtl() {
        return defaultTokenTtl;
    }

    public static Builder builder() {
        return new Builder();
    }


    public MachineWithoutScopedMachines withObject(MachineWithoutScopedMachinesObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * Unique identifier for the machine.
     */
    public MachineWithoutScopedMachines withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the machine.
     */
    public MachineWithoutScopedMachines withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The ID of the instance this machine belongs to.
     */
    public MachineWithoutScopedMachines withInstanceId(String instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = instanceId;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public MachineWithoutScopedMachines withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public MachineWithoutScopedMachines withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine.
     */
    public MachineWithoutScopedMachines withDefaultTokenTtl(long defaultTokenTtl) {
        Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
        this.defaultTokenTtl = Optional.ofNullable(defaultTokenTtl);
        return this;
    }


    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine.
     */
    public MachineWithoutScopedMachines withDefaultTokenTtl(Optional<Long> defaultTokenTtl) {
        Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
        this.defaultTokenTtl = defaultTokenTtl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MachineWithoutScopedMachines other = (MachineWithoutScopedMachines) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.instanceId, other.instanceId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.defaultTokenTtl, other.defaultTokenTtl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, name,
            instanceId, createdAt, updatedAt,
            defaultTokenTtl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MachineWithoutScopedMachines.class,
                "object", object,
                "id", id,
                "name", name,
                "instanceId", instanceId,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "defaultTokenTtl", defaultTokenTtl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private MachineWithoutScopedMachinesObject object;

        private String id;

        private String name;

        private String instanceId;

        private Long createdAt;

        private Long updatedAt;

        private Optional<Long> defaultTokenTtl;

        private Builder() {
          // force use of static builder() method
        }


        public Builder object(MachineWithoutScopedMachinesObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * Unique identifier for the machine.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The name of the machine.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The ID of the instance this machine belongs to.
         */
        public Builder instanceId(String instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = instanceId;
            return this;
        }


        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * The default time-to-live (TTL) in seconds for tokens created by this machine.
         */
        public Builder defaultTokenTtl(long defaultTokenTtl) {
            Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
            this.defaultTokenTtl = Optional.ofNullable(defaultTokenTtl);
            return this;
        }

        /**
         * The default time-to-live (TTL) in seconds for tokens created by this machine.
         */
        public Builder defaultTokenTtl(Optional<Long> defaultTokenTtl) {
            Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
            this.defaultTokenTtl = defaultTokenTtl;
            return this;
        }

        public MachineWithoutScopedMachines build() {
            if (defaultTokenTtl == null) {
                defaultTokenTtl = _SINGLETON_VALUE_DefaultTokenTtl.value();
            }

            return new MachineWithoutScopedMachines(
                object, id, name,
                instanceId, createdAt, updatedAt,
                defaultTokenTtl);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_DefaultTokenTtl =
                new LazySingletonValue<>(
                        "default_token_ttl",
                        "3600",
                        new TypeReference<Optional<Long>>() {});
    }
}
