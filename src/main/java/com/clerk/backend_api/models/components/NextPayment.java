/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * NextPayment
 * 
 * <p>Information about the next payment.
 */
public class NextPayment {
    /**
     * Amount for the next payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends CommerceSubscriptionItemNextPaymentAmount> amount;

    /**
     * Unix timestamp (in milliseconds) for the next payment date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private JsonNullable<Long> date;

    @JsonCreator
    public NextPayment(
            @JsonProperty("amount") JsonNullable<? extends CommerceSubscriptionItemNextPaymentAmount> amount,
            @JsonProperty("date") JsonNullable<Long> date) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(date, "date");
        this.amount = amount;
        this.date = date;
    }
    
    public NextPayment() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Amount for the next payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CommerceSubscriptionItemNextPaymentAmount> amount() {
        return (JsonNullable<CommerceSubscriptionItemNextPaymentAmount>) amount;
    }

    /**
     * Unix timestamp (in milliseconds) for the next payment date.
     */
    @JsonIgnore
    public JsonNullable<Long> date() {
        return date;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Amount for the next payment.
     */
    public NextPayment withAmount(CommerceSubscriptionItemNextPaymentAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * Amount for the next payment.
     */
    public NextPayment withAmount(JsonNullable<? extends CommerceSubscriptionItemNextPaymentAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) for the next payment date.
     */
    public NextPayment withDate(long date) {
        Utils.checkNotNull(date, "date");
        this.date = JsonNullable.of(date);
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) for the next payment date.
     */
    public NextPayment withDate(JsonNullable<Long> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NextPayment other = (NextPayment) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.date, other.date);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, date);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NextPayment.class,
                "amount", amount,
                "date", date);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends CommerceSubscriptionItemNextPaymentAmount> amount = JsonNullable.undefined();

        private JsonNullable<Long> date = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Amount for the next payment.
         */
        public Builder amount(CommerceSubscriptionItemNextPaymentAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * Amount for the next payment.
         */
        public Builder amount(JsonNullable<? extends CommerceSubscriptionItemNextPaymentAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) for the next payment date.
         */
        public Builder date(long date) {
            Utils.checkNotNull(date, "date");
            this.date = JsonNullable.of(date);
            return this;
        }

        /**
         * Unix timestamp (in milliseconds) for the next payment date.
         */
        public Builder date(JsonNullable<Long> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public NextPayment build() {

            return new NextPayment(
                amount, date);
        }

    }
}
