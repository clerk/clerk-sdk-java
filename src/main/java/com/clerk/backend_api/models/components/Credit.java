/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Float;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Credit
 * 
 * <p>Credit information (only available in PaymentAttempt events).
 */
public class Credit {
    /**
     * Credit amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends CommerceSubscriptionItemAmount> amount;

    /**
     * Percentage of the billing cycle remaining.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cycle_remaining_percent")
    private Optional<Float> cycleRemainingPercent;

    @JsonCreator
    public Credit(
            @JsonProperty("amount") JsonNullable<? extends CommerceSubscriptionItemAmount> amount,
            @JsonProperty("cycle_remaining_percent") Optional<Float> cycleRemainingPercent) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(cycleRemainingPercent, "cycleRemainingPercent");
        this.amount = amount;
        this.cycleRemainingPercent = cycleRemainingPercent;
    }
    
    public Credit() {
        this(JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Credit amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CommerceSubscriptionItemAmount> amount() {
        return (JsonNullable<CommerceSubscriptionItemAmount>) amount;
    }

    /**
     * Percentage of the billing cycle remaining.
     */
    @JsonIgnore
    public Optional<Float> cycleRemainingPercent() {
        return cycleRemainingPercent;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Credit amount.
     */
    public Credit withAmount(CommerceSubscriptionItemAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * Credit amount.
     */
    public Credit withAmount(JsonNullable<? extends CommerceSubscriptionItemAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Percentage of the billing cycle remaining.
     */
    public Credit withCycleRemainingPercent(float cycleRemainingPercent) {
        Utils.checkNotNull(cycleRemainingPercent, "cycleRemainingPercent");
        this.cycleRemainingPercent = Optional.ofNullable(cycleRemainingPercent);
        return this;
    }


    /**
     * Percentage of the billing cycle remaining.
     */
    public Credit withCycleRemainingPercent(Optional<Float> cycleRemainingPercent) {
        Utils.checkNotNull(cycleRemainingPercent, "cycleRemainingPercent");
        this.cycleRemainingPercent = cycleRemainingPercent;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Credit other = (Credit) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.cycleRemainingPercent, other.cycleRemainingPercent);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, cycleRemainingPercent);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Credit.class,
                "amount", amount,
                "cycleRemainingPercent", cycleRemainingPercent);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends CommerceSubscriptionItemAmount> amount = JsonNullable.undefined();

        private Optional<Float> cycleRemainingPercent = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Credit amount.
         */
        public Builder amount(CommerceSubscriptionItemAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * Credit amount.
         */
        public Builder amount(JsonNullable<? extends CommerceSubscriptionItemAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Percentage of the billing cycle remaining.
         */
        public Builder cycleRemainingPercent(float cycleRemainingPercent) {
            Utils.checkNotNull(cycleRemainingPercent, "cycleRemainingPercent");
            this.cycleRemainingPercent = Optional.ofNullable(cycleRemainingPercent);
            return this;
        }

        /**
         * Percentage of the billing cycle remaining.
         */
        public Builder cycleRemainingPercent(Optional<Float> cycleRemainingPercent) {
            Utils.checkNotNull(cycleRemainingPercent, "cycleRemainingPercent");
            this.cycleRemainingPercent = cycleRemainingPercent;
            return this;
        }

        public Credit build() {

            return new Credit(
                amount, cycleRemainingPercent);
        }

    }
}
