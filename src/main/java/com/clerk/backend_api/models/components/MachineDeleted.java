/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;

/**
 * MachineDeleted
 * 
 * <p>Success
 */
public class MachineDeleted {
    /**
     * String representing the object's type.
     */
    @JsonProperty("object")
    private MachineDeletedObject object;

    /**
     * The ID of the deleted machine
     */
    @JsonProperty("id")
    private String id;

    /**
     * Whether the machine was successfully deleted
     */
    @JsonProperty("deleted")
    private boolean deleted;

    @JsonCreator
    public MachineDeleted(
            @JsonProperty("object") MachineDeletedObject object,
            @JsonProperty("id") String id,
            @JsonProperty("deleted") boolean deleted) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(deleted, "deleted");
        this.object = object;
        this.id = id;
        this.deleted = deleted;
    }

    /**
     * String representing the object's type.
     */
    @JsonIgnore
    public MachineDeletedObject object() {
        return object;
    }

    /**
     * The ID of the deleted machine
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Whether the machine was successfully deleted
     */
    @JsonIgnore
    public boolean deleted() {
        return deleted;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type.
     */
    public MachineDeleted withObject(MachineDeletedObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * The ID of the deleted machine
     */
    public MachineDeleted withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether the machine was successfully deleted
     */
    public MachineDeleted withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MachineDeleted other = (MachineDeleted) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, deleted);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MachineDeleted.class,
                "object", object,
                "id", id,
                "deleted", deleted);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private MachineDeletedObject object;

        private String id;

        private Boolean deleted;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type.
         */
        public Builder object(MachineDeletedObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * The ID of the deleted machine
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether the machine was successfully deleted
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        public MachineDeleted build() {

            return new MachineDeleted(
                object, id, deleted);
        }

    }
}
