/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;


public class CommerceSubscriptionNextPayment {
    /**
     * Unix timestamp (milliseconds) of the next payment.
     */
    @JsonProperty("time")
    private long time;

    /**
     * Unix timestamp (milliseconds) of the next payment date.
     */
    @JsonProperty("date")
    private long date;


    @JsonProperty("amount")
    private CommerceMoneyResponse amount;

    @JsonCreator
    public CommerceSubscriptionNextPayment(
            @JsonProperty("time") long time,
            @JsonProperty("date") long date,
            @JsonProperty("amount") CommerceMoneyResponse amount) {
        Utils.checkNotNull(time, "time");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(amount, "amount");
        this.time = time;
        this.date = date;
        this.amount = amount;
    }

    /**
     * Unix timestamp (milliseconds) of the next payment.
     */
    @JsonIgnore
    public long time() {
        return time;
    }

    /**
     * Unix timestamp (milliseconds) of the next payment date.
     */
    @JsonIgnore
    public long date() {
        return date;
    }

    @JsonIgnore
    public CommerceMoneyResponse amount() {
        return amount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unix timestamp (milliseconds) of the next payment.
     */
    public CommerceSubscriptionNextPayment withTime(long time) {
        Utils.checkNotNull(time, "time");
        this.time = time;
        return this;
    }

    /**
     * Unix timestamp (milliseconds) of the next payment date.
     */
    public CommerceSubscriptionNextPayment withDate(long date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public CommerceSubscriptionNextPayment withAmount(CommerceMoneyResponse amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceSubscriptionNextPayment other = (CommerceSubscriptionNextPayment) o;
        return 
            Utils.enhancedDeepEquals(this.time, other.time) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            time, date, amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceSubscriptionNextPayment.class,
                "time", time,
                "date", date,
                "amount", amount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long time;

        private Long date;

        private CommerceMoneyResponse amount;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unix timestamp (milliseconds) of the next payment.
         */
        public Builder time(long time) {
            Utils.checkNotNull(time, "time");
            this.time = time;
            return this;
        }


        /**
         * Unix timestamp (milliseconds) of the next payment date.
         */
        public Builder date(long date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        public Builder amount(CommerceMoneyResponse amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public CommerceSubscriptionNextPayment build() {

            return new CommerceSubscriptionNextPayment(
                time, date, amount);
        }

    }
}
