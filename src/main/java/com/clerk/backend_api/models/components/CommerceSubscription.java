/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CommerceSubscription
 * 
 * <p>A commerce subscription.
 */
public class CommerceSubscription {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private CommerceSubscriptionObject object;

    /**
     * Unique identifier for the commerce subscription.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The ID of the instance this subscription belongs to.
     */
    @JsonProperty("instance_id")
    private String instanceId;

    /**
     * The current status of the subscription.
     */
    @JsonProperty("status")
    private CommerceSubscriptionStatus status;

    /**
     * The ID of the payer for this subscription.
     */
    @JsonProperty("payer_id")
    private String payerId;

    /**
     * Unix timestamp (milliseconds) of creation.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp (milliseconds) of last update.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    /**
     * Unix timestamp (milliseconds) when the subscription became active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active_at")
    private JsonNullable<Long> activeAt;

    /**
     * Unix timestamp (milliseconds) when the subscription became past due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("past_due_at")
    private JsonNullable<Long> pastDueAt;

    /**
     * Array of subscription items in this subscription.
     */
    @JsonProperty("subscription_items")
    private List<CommerceSubscriptionItem> subscriptionItems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_payment")
    private Optional<? extends CommerceSubscriptionNextPayment> nextPayment;

    /**
     * Whether the payer is eligible for a free trial.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eligible_for_free_trial")
    private JsonNullable<Boolean> eligibleForFreeTrial;

    @JsonCreator
    public CommerceSubscription(
            @JsonProperty("object") CommerceSubscriptionObject object,
            @JsonProperty("id") String id,
            @JsonProperty("instance_id") String instanceId,
            @JsonProperty("status") CommerceSubscriptionStatus status,
            @JsonProperty("payer_id") String payerId,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt,
            @JsonProperty("active_at") JsonNullable<Long> activeAt,
            @JsonProperty("past_due_at") JsonNullable<Long> pastDueAt,
            @JsonProperty("subscription_items") List<CommerceSubscriptionItem> subscriptionItems,
            @JsonProperty("next_payment") Optional<? extends CommerceSubscriptionNextPayment> nextPayment,
            @JsonProperty("eligible_for_free_trial") JsonNullable<Boolean> eligibleForFreeTrial) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(instanceId, "instanceId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(payerId, "payerId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(activeAt, "activeAt");
        Utils.checkNotNull(pastDueAt, "pastDueAt");
        Utils.checkNotNull(subscriptionItems, "subscriptionItems");
        Utils.checkNotNull(nextPayment, "nextPayment");
        Utils.checkNotNull(eligibleForFreeTrial, "eligibleForFreeTrial");
        this.object = object;
        this.id = id;
        this.instanceId = instanceId;
        this.status = status;
        this.payerId = payerId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.activeAt = activeAt;
        this.pastDueAt = pastDueAt;
        this.subscriptionItems = subscriptionItems;
        this.nextPayment = nextPayment;
        this.eligibleForFreeTrial = eligibleForFreeTrial;
    }
    
    public CommerceSubscription(
            CommerceSubscriptionObject object,
            String id,
            String instanceId,
            CommerceSubscriptionStatus status,
            String payerId,
            long createdAt,
            long updatedAt,
            List<CommerceSubscriptionItem> subscriptionItems) {
        this(object, id, instanceId,
            status, payerId, createdAt,
            updatedAt, JsonNullable.undefined(), JsonNullable.undefined(),
            subscriptionItems, Optional.empty(), JsonNullable.undefined());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public CommerceSubscriptionObject object() {
        return object;
    }

    /**
     * Unique identifier for the commerce subscription.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The ID of the instance this subscription belongs to.
     */
    @JsonIgnore
    public String instanceId() {
        return instanceId;
    }

    /**
     * The current status of the subscription.
     */
    @JsonIgnore
    public CommerceSubscriptionStatus status() {
        return status;
    }

    /**
     * The ID of the payer for this subscription.
     */
    @JsonIgnore
    public String payerId() {
        return payerId;
    }

    /**
     * Unix timestamp (milliseconds) of creation.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp (milliseconds) of last update.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    /**
     * Unix timestamp (milliseconds) when the subscription became active.
     */
    @JsonIgnore
    public JsonNullable<Long> activeAt() {
        return activeAt;
    }

    /**
     * Unix timestamp (milliseconds) when the subscription became past due.
     */
    @JsonIgnore
    public JsonNullable<Long> pastDueAt() {
        return pastDueAt;
    }

    /**
     * Array of subscription items in this subscription.
     */
    @JsonIgnore
    public List<CommerceSubscriptionItem> subscriptionItems() {
        return subscriptionItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CommerceSubscriptionNextPayment> nextPayment() {
        return (Optional<CommerceSubscriptionNextPayment>) nextPayment;
    }

    /**
     * Whether the payer is eligible for a free trial.
     */
    @JsonIgnore
    public JsonNullable<Boolean> eligibleForFreeTrial() {
        return eligibleForFreeTrial;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public CommerceSubscription withObject(CommerceSubscriptionObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * Unique identifier for the commerce subscription.
     */
    public CommerceSubscription withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the instance this subscription belongs to.
     */
    public CommerceSubscription withInstanceId(String instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = instanceId;
        return this;
    }

    /**
     * The current status of the subscription.
     */
    public CommerceSubscription withStatus(CommerceSubscriptionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The ID of the payer for this subscription.
     */
    public CommerceSubscription withPayerId(String payerId) {
        Utils.checkNotNull(payerId, "payerId");
        this.payerId = payerId;
        return this;
    }

    /**
     * Unix timestamp (milliseconds) of creation.
     */
    public CommerceSubscription withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp (milliseconds) of last update.
     */
    public CommerceSubscription withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Unix timestamp (milliseconds) when the subscription became active.
     */
    public CommerceSubscription withActiveAt(long activeAt) {
        Utils.checkNotNull(activeAt, "activeAt");
        this.activeAt = JsonNullable.of(activeAt);
        return this;
    }

    /**
     * Unix timestamp (milliseconds) when the subscription became active.
     */
    public CommerceSubscription withActiveAt(JsonNullable<Long> activeAt) {
        Utils.checkNotNull(activeAt, "activeAt");
        this.activeAt = activeAt;
        return this;
    }

    /**
     * Unix timestamp (milliseconds) when the subscription became past due.
     */
    public CommerceSubscription withPastDueAt(long pastDueAt) {
        Utils.checkNotNull(pastDueAt, "pastDueAt");
        this.pastDueAt = JsonNullable.of(pastDueAt);
        return this;
    }

    /**
     * Unix timestamp (milliseconds) when the subscription became past due.
     */
    public CommerceSubscription withPastDueAt(JsonNullable<Long> pastDueAt) {
        Utils.checkNotNull(pastDueAt, "pastDueAt");
        this.pastDueAt = pastDueAt;
        return this;
    }

    /**
     * Array of subscription items in this subscription.
     */
    public CommerceSubscription withSubscriptionItems(List<CommerceSubscriptionItem> subscriptionItems) {
        Utils.checkNotNull(subscriptionItems, "subscriptionItems");
        this.subscriptionItems = subscriptionItems;
        return this;
    }

    public CommerceSubscription withNextPayment(CommerceSubscriptionNextPayment nextPayment) {
        Utils.checkNotNull(nextPayment, "nextPayment");
        this.nextPayment = Optional.ofNullable(nextPayment);
        return this;
    }


    public CommerceSubscription withNextPayment(Optional<? extends CommerceSubscriptionNextPayment> nextPayment) {
        Utils.checkNotNull(nextPayment, "nextPayment");
        this.nextPayment = nextPayment;
        return this;
    }

    /**
     * Whether the payer is eligible for a free trial.
     */
    public CommerceSubscription withEligibleForFreeTrial(boolean eligibleForFreeTrial) {
        Utils.checkNotNull(eligibleForFreeTrial, "eligibleForFreeTrial");
        this.eligibleForFreeTrial = JsonNullable.of(eligibleForFreeTrial);
        return this;
    }

    /**
     * Whether the payer is eligible for a free trial.
     */
    public CommerceSubscription withEligibleForFreeTrial(JsonNullable<Boolean> eligibleForFreeTrial) {
        Utils.checkNotNull(eligibleForFreeTrial, "eligibleForFreeTrial");
        this.eligibleForFreeTrial = eligibleForFreeTrial;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceSubscription other = (CommerceSubscription) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.instanceId, other.instanceId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.payerId, other.payerId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.activeAt, other.activeAt) &&
            Utils.enhancedDeepEquals(this.pastDueAt, other.pastDueAt) &&
            Utils.enhancedDeepEquals(this.subscriptionItems, other.subscriptionItems) &&
            Utils.enhancedDeepEquals(this.nextPayment, other.nextPayment) &&
            Utils.enhancedDeepEquals(this.eligibleForFreeTrial, other.eligibleForFreeTrial);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, instanceId,
            status, payerId, createdAt,
            updatedAt, activeAt, pastDueAt,
            subscriptionItems, nextPayment, eligibleForFreeTrial);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceSubscription.class,
                "object", object,
                "id", id,
                "instanceId", instanceId,
                "status", status,
                "payerId", payerId,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "activeAt", activeAt,
                "pastDueAt", pastDueAt,
                "subscriptionItems", subscriptionItems,
                "nextPayment", nextPayment,
                "eligibleForFreeTrial", eligibleForFreeTrial);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CommerceSubscriptionObject object;

        private String id;

        private String instanceId;

        private CommerceSubscriptionStatus status;

        private String payerId;

        private Long createdAt;

        private Long updatedAt;

        private JsonNullable<Long> activeAt = JsonNullable.undefined();

        private JsonNullable<Long> pastDueAt = JsonNullable.undefined();

        private List<CommerceSubscriptionItem> subscriptionItems;

        private Optional<? extends CommerceSubscriptionNextPayment> nextPayment = Optional.empty();

        private JsonNullable<Boolean> eligibleForFreeTrial = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(CommerceSubscriptionObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * Unique identifier for the commerce subscription.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The ID of the instance this subscription belongs to.
         */
        public Builder instanceId(String instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = instanceId;
            return this;
        }


        /**
         * The current status of the subscription.
         */
        public Builder status(CommerceSubscriptionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The ID of the payer for this subscription.
         */
        public Builder payerId(String payerId) {
            Utils.checkNotNull(payerId, "payerId");
            this.payerId = payerId;
            return this;
        }


        /**
         * Unix timestamp (milliseconds) of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp (milliseconds) of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * Unix timestamp (milliseconds) when the subscription became active.
         */
        public Builder activeAt(long activeAt) {
            Utils.checkNotNull(activeAt, "activeAt");
            this.activeAt = JsonNullable.of(activeAt);
            return this;
        }

        /**
         * Unix timestamp (milliseconds) when the subscription became active.
         */
        public Builder activeAt(JsonNullable<Long> activeAt) {
            Utils.checkNotNull(activeAt, "activeAt");
            this.activeAt = activeAt;
            return this;
        }


        /**
         * Unix timestamp (milliseconds) when the subscription became past due.
         */
        public Builder pastDueAt(long pastDueAt) {
            Utils.checkNotNull(pastDueAt, "pastDueAt");
            this.pastDueAt = JsonNullable.of(pastDueAt);
            return this;
        }

        /**
         * Unix timestamp (milliseconds) when the subscription became past due.
         */
        public Builder pastDueAt(JsonNullable<Long> pastDueAt) {
            Utils.checkNotNull(pastDueAt, "pastDueAt");
            this.pastDueAt = pastDueAt;
            return this;
        }


        /**
         * Array of subscription items in this subscription.
         */
        public Builder subscriptionItems(List<CommerceSubscriptionItem> subscriptionItems) {
            Utils.checkNotNull(subscriptionItems, "subscriptionItems");
            this.subscriptionItems = subscriptionItems;
            return this;
        }


        public Builder nextPayment(CommerceSubscriptionNextPayment nextPayment) {
            Utils.checkNotNull(nextPayment, "nextPayment");
            this.nextPayment = Optional.ofNullable(nextPayment);
            return this;
        }

        public Builder nextPayment(Optional<? extends CommerceSubscriptionNextPayment> nextPayment) {
            Utils.checkNotNull(nextPayment, "nextPayment");
            this.nextPayment = nextPayment;
            return this;
        }


        /**
         * Whether the payer is eligible for a free trial.
         */
        public Builder eligibleForFreeTrial(boolean eligibleForFreeTrial) {
            Utils.checkNotNull(eligibleForFreeTrial, "eligibleForFreeTrial");
            this.eligibleForFreeTrial = JsonNullable.of(eligibleForFreeTrial);
            return this;
        }

        /**
         * Whether the payer is eligible for a free trial.
         */
        public Builder eligibleForFreeTrial(JsonNullable<Boolean> eligibleForFreeTrial) {
            Utils.checkNotNull(eligibleForFreeTrial, "eligibleForFreeTrial");
            this.eligibleForFreeTrial = eligibleForFreeTrial;
            return this;
        }

        public CommerceSubscription build() {

            return new CommerceSubscription(
                object, id, instanceId,
                status, payerId, createdAt,
                updatedAt, activeAt, pastDueAt,
                subscriptionItems, nextPayment, eligibleForFreeTrial);
        }

    }
}
