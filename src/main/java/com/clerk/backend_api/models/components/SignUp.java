/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.clerk.backend_api.models.components;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
/**
 * SignUp - Success
 */

public class SignUp {

    @JsonProperty("object")
    private SignUpObject object;

    @JsonProperty("id")
    private String id;

    @JsonProperty("status")
    private SignUpStatus status;

    @JsonProperty("required_fields")
    private List<String> requiredFields;

    @JsonProperty("optional_fields")
    private List<String> optionalFields;

    @JsonProperty("missing_fields")
    private List<String> missingFields;

    @JsonProperty("unverified_fields")
    private List<String> unverifiedFields;

    @JsonProperty("verifications")
    private SignUpVerifications verifications;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("username")
    private Optional<String> username;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("email_address")
    private Optional<String> emailAddress;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("phone_number")
    private Optional<String> phoneNumber;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("web3_wallet")
    private Optional<String> web3Wallet;

    @JsonProperty("password_enabled")
    private boolean passwordEnabled;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("first_name")
    private Optional<String> firstName;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("last_name")
    private Optional<String> lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unsafe_metadata")
    private Optional<? extends Map<String, Object>> unsafeMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends Map<String, Object>> publicMetadata;

    @JsonProperty("custom_action")
    private boolean customAction;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("external_id")
    private Optional<String> externalId;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("created_session_id")
    private Optional<String> createdSessionId;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("created_user_id")
    private Optional<String> createdUserId;

    /**
     * Unix timestamp at which the user abandoned the sign up attempt.
     * 
     */
    @JsonProperty("abandon_at")
    private long abandonAt;

    /**
     * Unix timestamp at which the user accepted the legal requirements.
     * 
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("legal_accepted_at")
    private Optional<Long> legalAcceptedAt;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_account")
    @Deprecated
    private Optional<? extends SignUpExternalAccount> externalAccount;

    @JsonCreator
    public SignUp(
            @JsonProperty("object") SignUpObject object,
            @JsonProperty("id") String id,
            @JsonProperty("status") SignUpStatus status,
            @JsonProperty("required_fields") List<String> requiredFields,
            @JsonProperty("optional_fields") List<String> optionalFields,
            @JsonProperty("missing_fields") List<String> missingFields,
            @JsonProperty("unverified_fields") List<String> unverifiedFields,
            @JsonProperty("verifications") SignUpVerifications verifications,
            @JsonProperty("username") Optional<String> username,
            @JsonProperty("email_address") Optional<String> emailAddress,
            @JsonProperty("phone_number") Optional<String> phoneNumber,
            @JsonProperty("web3_wallet") Optional<String> web3Wallet,
            @JsonProperty("password_enabled") boolean passwordEnabled,
            @JsonProperty("first_name") Optional<String> firstName,
            @JsonProperty("last_name") Optional<String> lastName,
            @JsonProperty("unsafe_metadata") Optional<? extends Map<String, Object>> unsafeMetadata,
            @JsonProperty("public_metadata") Optional<? extends Map<String, Object>> publicMetadata,
            @JsonProperty("custom_action") boolean customAction,
            @JsonProperty("external_id") Optional<String> externalId,
            @JsonProperty("created_session_id") Optional<String> createdSessionId,
            @JsonProperty("created_user_id") Optional<String> createdUserId,
            @JsonProperty("abandon_at") long abandonAt,
            @JsonProperty("legal_accepted_at") Optional<Long> legalAcceptedAt,
            @JsonProperty("external_account") Optional<? extends SignUpExternalAccount> externalAccount) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(requiredFields, "requiredFields");
        Utils.checkNotNull(optionalFields, "optionalFields");
        Utils.checkNotNull(missingFields, "missingFields");
        Utils.checkNotNull(unverifiedFields, "unverifiedFields");
        Utils.checkNotNull(verifications, "verifications");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(customAction, "customAction");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(createdSessionId, "createdSessionId");
        Utils.checkNotNull(createdUserId, "createdUserId");
        Utils.checkNotNull(abandonAt, "abandonAt");
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        Utils.checkNotNull(externalAccount, "externalAccount");
        this.object = object;
        this.id = id;
        this.status = status;
        this.requiredFields = requiredFields;
        this.optionalFields = optionalFields;
        this.missingFields = missingFields;
        this.unverifiedFields = unverifiedFields;
        this.verifications = verifications;
        this.username = username;
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.web3Wallet = web3Wallet;
        this.passwordEnabled = passwordEnabled;
        this.firstName = firstName;
        this.lastName = lastName;
        this.unsafeMetadata = unsafeMetadata;
        this.publicMetadata = publicMetadata;
        this.customAction = customAction;
        this.externalId = externalId;
        this.createdSessionId = createdSessionId;
        this.createdUserId = createdUserId;
        this.abandonAt = abandonAt;
        this.legalAcceptedAt = legalAcceptedAt;
        this.externalAccount = externalAccount;
    }
    
    public SignUp(
            SignUpObject object,
            String id,
            SignUpStatus status,
            List<String> requiredFields,
            List<String> optionalFields,
            List<String> missingFields,
            List<String> unverifiedFields,
            SignUpVerifications verifications,
            boolean passwordEnabled,
            boolean customAction,
            long abandonAt) {
        this(object, id, status, requiredFields, optionalFields, missingFields, unverifiedFields, verifications, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), passwordEnabled, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), customAction, Optional.empty(), Optional.empty(), Optional.empty(), abandonAt, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public SignUpObject object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public SignUpStatus status() {
        return status;
    }

    @JsonIgnore
    public List<String> requiredFields() {
        return requiredFields;
    }

    @JsonIgnore
    public List<String> optionalFields() {
        return optionalFields;
    }

    @JsonIgnore
    public List<String> missingFields() {
        return missingFields;
    }

    @JsonIgnore
    public List<String> unverifiedFields() {
        return unverifiedFields;
    }

    @JsonIgnore
    public SignUpVerifications verifications() {
        return verifications;
    }

    @JsonIgnore
    public Optional<String> username() {
        return username;
    }

    @JsonIgnore
    public Optional<String> emailAddress() {
        return emailAddress;
    }

    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    @JsonIgnore
    public Optional<String> web3Wallet() {
        return web3Wallet;
    }

    @JsonIgnore
    public boolean passwordEnabled() {
        return passwordEnabled;
    }

    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> unsafeMetadata() {
        return (Optional<Map<String, Object>>) unsafeMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> publicMetadata() {
        return (Optional<Map<String, Object>>) publicMetadata;
    }

    @JsonIgnore
    public boolean customAction() {
        return customAction;
    }

    @JsonIgnore
    public Optional<String> externalId() {
        return externalId;
    }

    @JsonIgnore
    public Optional<String> createdSessionId() {
        return createdSessionId;
    }

    @JsonIgnore
    public Optional<String> createdUserId() {
        return createdUserId;
    }

    /**
     * Unix timestamp at which the user abandoned the sign up attempt.
     * 
     */
    @JsonIgnore
    public long abandonAt() {
        return abandonAt;
    }

    /**
     * Unix timestamp at which the user accepted the legal requirements.
     * 
     */
    @JsonIgnore
    public Optional<Long> legalAcceptedAt() {
        return legalAcceptedAt;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SignUpExternalAccount> externalAccount() {
        return (Optional<SignUpExternalAccount>) externalAccount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SignUp withObject(SignUpObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public SignUp withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public SignUp withStatus(SignUpStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public SignUp withRequiredFields(List<String> requiredFields) {
        Utils.checkNotNull(requiredFields, "requiredFields");
        this.requiredFields = requiredFields;
        return this;
    }

    public SignUp withOptionalFields(List<String> optionalFields) {
        Utils.checkNotNull(optionalFields, "optionalFields");
        this.optionalFields = optionalFields;
        return this;
    }

    public SignUp withMissingFields(List<String> missingFields) {
        Utils.checkNotNull(missingFields, "missingFields");
        this.missingFields = missingFields;
        return this;
    }

    public SignUp withUnverifiedFields(List<String> unverifiedFields) {
        Utils.checkNotNull(unverifiedFields, "unverifiedFields");
        this.unverifiedFields = unverifiedFields;
        return this;
    }

    public SignUp withVerifications(SignUpVerifications verifications) {
        Utils.checkNotNull(verifications, "verifications");
        this.verifications = verifications;
        return this;
    }

    public SignUp withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    public SignUp withUsername(Optional<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public SignUp withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }

    public SignUp withEmailAddress(Optional<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    public SignUp withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    public SignUp withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    public SignUp withWeb3Wallet(String web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = Optional.ofNullable(web3Wallet);
        return this;
    }

    public SignUp withWeb3Wallet(Optional<String> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = web3Wallet;
        return this;
    }

    public SignUp withPasswordEnabled(boolean passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = passwordEnabled;
        return this;
    }

    public SignUp withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    public SignUp withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public SignUp withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    public SignUp withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public SignUp withUnsafeMetadata(Map<String, Object> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
        return this;
    }

    public SignUp withUnsafeMetadata(Optional<? extends Map<String, Object>> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = unsafeMetadata;
        return this;
    }

    public SignUp withPublicMetadata(Map<String, Object> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    public SignUp withPublicMetadata(Optional<? extends Map<String, Object>> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public SignUp withCustomAction(boolean customAction) {
        Utils.checkNotNull(customAction, "customAction");
        this.customAction = customAction;
        return this;
    }

    public SignUp withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }

    public SignUp withExternalId(Optional<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public SignUp withCreatedSessionId(String createdSessionId) {
        Utils.checkNotNull(createdSessionId, "createdSessionId");
        this.createdSessionId = Optional.ofNullable(createdSessionId);
        return this;
    }

    public SignUp withCreatedSessionId(Optional<String> createdSessionId) {
        Utils.checkNotNull(createdSessionId, "createdSessionId");
        this.createdSessionId = createdSessionId;
        return this;
    }

    public SignUp withCreatedUserId(String createdUserId) {
        Utils.checkNotNull(createdUserId, "createdUserId");
        this.createdUserId = Optional.ofNullable(createdUserId);
        return this;
    }

    public SignUp withCreatedUserId(Optional<String> createdUserId) {
        Utils.checkNotNull(createdUserId, "createdUserId");
        this.createdUserId = createdUserId;
        return this;
    }

    /**
     * Unix timestamp at which the user abandoned the sign up attempt.
     * 
     */
    public SignUp withAbandonAt(long abandonAt) {
        Utils.checkNotNull(abandonAt, "abandonAt");
        this.abandonAt = abandonAt;
        return this;
    }

    /**
     * Unix timestamp at which the user accepted the legal requirements.
     * 
     */
    public SignUp withLegalAcceptedAt(long legalAcceptedAt) {
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.legalAcceptedAt = Optional.ofNullable(legalAcceptedAt);
        return this;
    }

    /**
     * Unix timestamp at which the user accepted the legal requirements.
     * 
     */
    public SignUp withLegalAcceptedAt(Optional<Long> legalAcceptedAt) {
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.legalAcceptedAt = legalAcceptedAt;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SignUp withExternalAccount(SignUpExternalAccount externalAccount) {
        Utils.checkNotNull(externalAccount, "externalAccount");
        this.externalAccount = Optional.ofNullable(externalAccount);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SignUp withExternalAccount(Optional<? extends SignUpExternalAccount> externalAccount) {
        Utils.checkNotNull(externalAccount, "externalAccount");
        this.externalAccount = externalAccount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SignUp other = (SignUp) o;
        return 
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.requiredFields, other.requiredFields) &&
            Objects.deepEquals(this.optionalFields, other.optionalFields) &&
            Objects.deepEquals(this.missingFields, other.missingFields) &&
            Objects.deepEquals(this.unverifiedFields, other.unverifiedFields) &&
            Objects.deepEquals(this.verifications, other.verifications) &&
            Objects.deepEquals(this.username, other.username) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.web3Wallet, other.web3Wallet) &&
            Objects.deepEquals(this.passwordEnabled, other.passwordEnabled) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.unsafeMetadata, other.unsafeMetadata) &&
            Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            Objects.deepEquals(this.customAction, other.customAction) &&
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.createdSessionId, other.createdSessionId) &&
            Objects.deepEquals(this.createdUserId, other.createdUserId) &&
            Objects.deepEquals(this.abandonAt, other.abandonAt) &&
            Objects.deepEquals(this.legalAcceptedAt, other.legalAcceptedAt) &&
            Objects.deepEquals(this.externalAccount, other.externalAccount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            object,
            id,
            status,
            requiredFields,
            optionalFields,
            missingFields,
            unverifiedFields,
            verifications,
            username,
            emailAddress,
            phoneNumber,
            web3Wallet,
            passwordEnabled,
            firstName,
            lastName,
            unsafeMetadata,
            publicMetadata,
            customAction,
            externalId,
            createdSessionId,
            createdUserId,
            abandonAt,
            legalAcceptedAt,
            externalAccount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SignUp.class,
                "object", object,
                "id", id,
                "status", status,
                "requiredFields", requiredFields,
                "optionalFields", optionalFields,
                "missingFields", missingFields,
                "unverifiedFields", unverifiedFields,
                "verifications", verifications,
                "username", username,
                "emailAddress", emailAddress,
                "phoneNumber", phoneNumber,
                "web3Wallet", web3Wallet,
                "passwordEnabled", passwordEnabled,
                "firstName", firstName,
                "lastName", lastName,
                "unsafeMetadata", unsafeMetadata,
                "publicMetadata", publicMetadata,
                "customAction", customAction,
                "externalId", externalId,
                "createdSessionId", createdSessionId,
                "createdUserId", createdUserId,
                "abandonAt", abandonAt,
                "legalAcceptedAt", legalAcceptedAt,
                "externalAccount", externalAccount);
    }
    
    public final static class Builder {
 
        private SignUpObject object;
 
        private String id;
 
        private SignUpStatus status;
 
        private List<String> requiredFields;
 
        private List<String> optionalFields;
 
        private List<String> missingFields;
 
        private List<String> unverifiedFields;
 
        private SignUpVerifications verifications;
 
        private Optional<String> username = Optional.empty();
 
        private Optional<String> emailAddress = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();
 
        private Optional<String> web3Wallet = Optional.empty();
 
        private Boolean passwordEnabled;
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();
 
        private Optional<? extends Map<String, Object>> unsafeMetadata = Optional.empty();
 
        private Optional<? extends Map<String, Object>> publicMetadata = Optional.empty();
 
        private Boolean customAction;
 
        private Optional<String> externalId = Optional.empty();
 
        private Optional<String> createdSessionId = Optional.empty();
 
        private Optional<String> createdUserId = Optional.empty();
 
        private Long abandonAt;
 
        private Optional<Long> legalAcceptedAt = Optional.empty();
 
        @Deprecated
        private Optional<? extends SignUpExternalAccount> externalAccount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder object(SignUpObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder status(SignUpStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder requiredFields(List<String> requiredFields) {
            Utils.checkNotNull(requiredFields, "requiredFields");
            this.requiredFields = requiredFields;
            return this;
        }

        public Builder optionalFields(List<String> optionalFields) {
            Utils.checkNotNull(optionalFields, "optionalFields");
            this.optionalFields = optionalFields;
            return this;
        }

        public Builder missingFields(List<String> missingFields) {
            Utils.checkNotNull(missingFields, "missingFields");
            this.missingFields = missingFields;
            return this;
        }

        public Builder unverifiedFields(List<String> unverifiedFields) {
            Utils.checkNotNull(unverifiedFields, "unverifiedFields");
            this.unverifiedFields = unverifiedFields;
            return this;
        }

        public Builder verifications(SignUpVerifications verifications) {
            Utils.checkNotNull(verifications, "verifications");
            this.verifications = verifications;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        public Builder username(Optional<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        public Builder emailAddress(Optional<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder web3Wallet(String web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = Optional.ofNullable(web3Wallet);
            return this;
        }

        public Builder web3Wallet(Optional<String> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = web3Wallet;
            return this;
        }

        public Builder passwordEnabled(boolean passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = passwordEnabled;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder unsafeMetadata(Map<String, Object> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
            return this;
        }

        public Builder unsafeMetadata(Optional<? extends Map<String, Object>> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = unsafeMetadata;
            return this;
        }

        public Builder publicMetadata(Map<String, Object> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        public Builder publicMetadata(Optional<? extends Map<String, Object>> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        public Builder customAction(boolean customAction) {
            Utils.checkNotNull(customAction, "customAction");
            this.customAction = customAction;
            return this;
        }

        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        public Builder externalId(Optional<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        public Builder createdSessionId(String createdSessionId) {
            Utils.checkNotNull(createdSessionId, "createdSessionId");
            this.createdSessionId = Optional.ofNullable(createdSessionId);
            return this;
        }

        public Builder createdSessionId(Optional<String> createdSessionId) {
            Utils.checkNotNull(createdSessionId, "createdSessionId");
            this.createdSessionId = createdSessionId;
            return this;
        }

        public Builder createdUserId(String createdUserId) {
            Utils.checkNotNull(createdUserId, "createdUserId");
            this.createdUserId = Optional.ofNullable(createdUserId);
            return this;
        }

        public Builder createdUserId(Optional<String> createdUserId) {
            Utils.checkNotNull(createdUserId, "createdUserId");
            this.createdUserId = createdUserId;
            return this;
        }

        /**
         * Unix timestamp at which the user abandoned the sign up attempt.
         * 
         */
        public Builder abandonAt(long abandonAt) {
            Utils.checkNotNull(abandonAt, "abandonAt");
            this.abandonAt = abandonAt;
            return this;
        }

        /**
         * Unix timestamp at which the user accepted the legal requirements.
         * 
         */
        public Builder legalAcceptedAt(long legalAcceptedAt) {
            Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
            this.legalAcceptedAt = Optional.ofNullable(legalAcceptedAt);
            return this;
        }

        /**
         * Unix timestamp at which the user accepted the legal requirements.
         * 
         */
        public Builder legalAcceptedAt(Optional<Long> legalAcceptedAt) {
            Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
            this.legalAcceptedAt = legalAcceptedAt;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder externalAccount(SignUpExternalAccount externalAccount) {
            Utils.checkNotNull(externalAccount, "externalAccount");
            this.externalAccount = Optional.ofNullable(externalAccount);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder externalAccount(Optional<? extends SignUpExternalAccount> externalAccount) {
            Utils.checkNotNull(externalAccount, "externalAccount");
            this.externalAccount = externalAccount;
            return this;
        }
        
        public SignUp build() {
            return new SignUp(
                object,
                id,
                status,
                requiredFields,
                optionalFields,
                missingFields,
                unverifiedFields,
                verifications,
                username,
                emailAddress,
                phoneNumber,
                web3Wallet,
                passwordEnabled,
                firstName,
                lastName,
                unsafeMetadata,
                publicMetadata,
                customAction,
                externalId,
                createdSessionId,
                createdUserId,
                abandonAt,
                legalAcceptedAt,
                externalAccount);
        }
    }
}

