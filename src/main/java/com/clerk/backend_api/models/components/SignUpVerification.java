/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.clerk.backend_api.models.components;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class SignUpVerification {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_action")
    private Optional<? extends NextAction> nextAction;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_strategies")
    private Optional<? extends List<String>> supportedStrategies;

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonCreator
    public SignUpVerification(
            @JsonProperty("next_action") Optional<? extends NextAction> nextAction,
            @JsonProperty("supported_strategies") Optional<? extends List<String>> supportedStrategies) {
        Utils.checkNotNull(nextAction, "nextAction");
        Utils.checkNotNull(supportedStrategies, "supportedStrategies");
        this.nextAction = nextAction;
        this.supportedStrategies = supportedStrategies;
        this.additionalProperties = new HashMap<>();
    }
    
    public SignUpVerification() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NextAction> nextAction() {
        return (Optional<NextAction>) nextAction;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> supportedStrategies() {
        return (Optional<List<String>>) supportedStrategies;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SignUpVerification withNextAction(NextAction nextAction) {
        Utils.checkNotNull(nextAction, "nextAction");
        this.nextAction = Optional.ofNullable(nextAction);
        return this;
    }

    public SignUpVerification withNextAction(Optional<? extends NextAction> nextAction) {
        Utils.checkNotNull(nextAction, "nextAction");
        this.nextAction = nextAction;
        return this;
    }

    public SignUpVerification withSupportedStrategies(List<String> supportedStrategies) {
        Utils.checkNotNull(supportedStrategies, "supportedStrategies");
        this.supportedStrategies = Optional.ofNullable(supportedStrategies);
        return this;
    }

    public SignUpVerification withSupportedStrategies(Optional<? extends List<String>> supportedStrategies) {
        Utils.checkNotNull(supportedStrategies, "supportedStrategies");
        this.supportedStrategies = supportedStrategies;
        return this;
    }

    @JsonAnySetter
    public SignUpVerification withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public SignUpVerification withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SignUpVerification other = (SignUpVerification) o;
        return 
            Objects.deepEquals(this.nextAction, other.nextAction) &&
            Objects.deepEquals(this.supportedStrategies, other.supportedStrategies) &&
            Objects.deepEquals(this.additionalProperties, other.additionalProperties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            nextAction,
            supportedStrategies,
            additionalProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SignUpVerification.class,
                "nextAction", nextAction,
                "supportedStrategies", supportedStrategies,
                "additionalProperties", additionalProperties);
    }
    
    public final static class Builder {
 
        private Optional<? extends NextAction> nextAction = Optional.empty();
 
        private Optional<? extends List<String>> supportedStrategies = Optional.empty();
 
        private Map<String, Object> additionalProperties = new HashMap<>();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder nextAction(NextAction nextAction) {
            Utils.checkNotNull(nextAction, "nextAction");
            this.nextAction = Optional.ofNullable(nextAction);
            return this;
        }

        public Builder nextAction(Optional<? extends NextAction> nextAction) {
            Utils.checkNotNull(nextAction, "nextAction");
            this.nextAction = nextAction;
            return this;
        }

        public Builder supportedStrategies(List<String> supportedStrategies) {
            Utils.checkNotNull(supportedStrategies, "supportedStrategies");
            this.supportedStrategies = Optional.ofNullable(supportedStrategies);
            return this;
        }

        public Builder supportedStrategies(Optional<? extends List<String>> supportedStrategies) {
            Utils.checkNotNull(supportedStrategies, "supportedStrategies");
            this.supportedStrategies = supportedStrategies;
            return this;
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }
        
        public SignUpVerification build() {
            return new SignUpVerification(
                nextAction,
                supportedStrategies)
                .withAdditionalProperties(additionalProperties);
        }
    }
}

