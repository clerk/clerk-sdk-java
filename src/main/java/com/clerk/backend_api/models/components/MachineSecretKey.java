/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;

/**
 * MachineSecretKey
 * 
 * <p>Success
 */
public class MachineSecretKey {
    /**
     * String representing the object's type.
     */
    @JsonProperty("object")
    private MachineSecretKeyObject object;

    /**
     * The secret key for the machine.
     */
    @JsonProperty("secret")
    private String secret;

    @JsonCreator
    public MachineSecretKey(
            @JsonProperty("object") MachineSecretKeyObject object,
            @JsonProperty("secret") String secret) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(secret, "secret");
        this.object = object;
        this.secret = secret;
    }

    /**
     * String representing the object's type.
     */
    @JsonIgnore
    public MachineSecretKeyObject object() {
        return object;
    }

    /**
     * The secret key for the machine.
     */
    @JsonIgnore
    public String secret() {
        return secret;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type.
     */
    public MachineSecretKey withObject(MachineSecretKeyObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * The secret key for the machine.
     */
    public MachineSecretKey withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MachineSecretKey other = (MachineSecretKey) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.secret, other.secret);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, secret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MachineSecretKey.class,
                "object", object,
                "secret", secret);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private MachineSecretKeyObject object;

        private String secret;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type.
         */
        public Builder object(MachineSecretKeyObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * The secret key for the machine.
         */
        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }

        public MachineSecretKey build() {

            return new MachineSecretKey(
                object, secret);
        }

    }
}
