/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * OrganizationMembership - Hello world
 */

public class OrganizationMembership {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends OrganizationMembershipObject> object;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    private Optional<String> role;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_name")
    private Optional<String> roleName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends List<String>> permissions;

    /**
     * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends OrganizationMembershipPublicMetadata> publicMetadata;

    /**
     * Metadata saved on the organization membership, accessible only from the Backend API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends OrganizationMembershipPrivateMetadata> privateMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    private Optional<? extends OrganizationMembershipOrganization> organization;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_user_data")
    private Optional<? extends PublicUserData> publicUserData;

    /**
     * Unix timestamp of creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<Long> createdAt;

    /**
     * Unix timestamp of last update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<Long> updatedAt;

    @JsonCreator
    public OrganizationMembership(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("object") Optional<? extends OrganizationMembershipObject> object,
            @JsonProperty("role") Optional<String> role,
            @JsonProperty("role_name") Optional<String> roleName,
            @JsonProperty("permissions") Optional<? extends List<String>> permissions,
            @JsonProperty("public_metadata") Optional<? extends OrganizationMembershipPublicMetadata> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends OrganizationMembershipPrivateMetadata> privateMetadata,
            @JsonProperty("organization") Optional<? extends OrganizationMembershipOrganization> organization,
            @JsonProperty("public_user_data") Optional<? extends PublicUserData> publicUserData,
            @JsonProperty("created_at") Optional<Long> createdAt,
            @JsonProperty("updated_at") Optional<Long> updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(roleName, "roleName");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(organization, "organization");
        Utils.checkNotNull(publicUserData, "publicUserData");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.object = object;
        this.role = role;
        this.roleName = roleName;
        this.permissions = permissions;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.organization = organization;
        this.publicUserData = publicUserData;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public OrganizationMembership() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrganizationMembershipObject> object() {
        return (Optional<OrganizationMembershipObject>) object;
    }

    @JsonIgnore
    public Optional<String> role() {
        return role;
    }

    @JsonIgnore
    public Optional<String> roleName() {
        return roleName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> permissions() {
        return (Optional<List<String>>) permissions;
    }

    /**
     * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrganizationMembershipPublicMetadata> publicMetadata() {
        return (Optional<OrganizationMembershipPublicMetadata>) publicMetadata;
    }

    /**
     * Metadata saved on the organization membership, accessible only from the Backend API
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrganizationMembershipPrivateMetadata> privateMetadata() {
        return (Optional<OrganizationMembershipPrivateMetadata>) privateMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrganizationMembershipOrganization> organization() {
        return (Optional<OrganizationMembershipOrganization>) organization;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PublicUserData> publicUserData() {
        return (Optional<PublicUserData>) publicUserData;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public Optional<Long> createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     */
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OrganizationMembership withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public OrganizationMembership withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public OrganizationMembership withObject(OrganizationMembershipObject object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public OrganizationMembership withObject(Optional<? extends OrganizationMembershipObject> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public OrganizationMembership withRole(String role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    public OrganizationMembership withRole(Optional<String> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    public OrganizationMembership withRoleName(String roleName) {
        Utils.checkNotNull(roleName, "roleName");
        this.roleName = Optional.ofNullable(roleName);
        return this;
    }

    public OrganizationMembership withRoleName(Optional<String> roleName) {
        Utils.checkNotNull(roleName, "roleName");
        this.roleName = roleName;
        return this;
    }

    public OrganizationMembership withPermissions(List<String> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    public OrganizationMembership withPermissions(Optional<? extends List<String>> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
     */
    public OrganizationMembership withPublicMetadata(OrganizationMembershipPublicMetadata publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    /**
     * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
     */
    public OrganizationMembership withPublicMetadata(Optional<? extends OrganizationMembershipPublicMetadata> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    /**
     * Metadata saved on the organization membership, accessible only from the Backend API
     */
    public OrganizationMembership withPrivateMetadata(OrganizationMembershipPrivateMetadata privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }

    /**
     * Metadata saved on the organization membership, accessible only from the Backend API
     */
    public OrganizationMembership withPrivateMetadata(Optional<? extends OrganizationMembershipPrivateMetadata> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    public OrganizationMembership withOrganization(OrganizationMembershipOrganization organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = Optional.ofNullable(organization);
        return this;
    }

    public OrganizationMembership withOrganization(Optional<? extends OrganizationMembershipOrganization> organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    public OrganizationMembership withPublicUserData(PublicUserData publicUserData) {
        Utils.checkNotNull(publicUserData, "publicUserData");
        this.publicUserData = Optional.ofNullable(publicUserData);
        return this;
    }

    public OrganizationMembership withPublicUserData(Optional<? extends PublicUserData> publicUserData) {
        Utils.checkNotNull(publicUserData, "publicUserData");
        this.publicUserData = publicUserData;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public OrganizationMembership withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public OrganizationMembership withCreatedAt(Optional<Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public OrganizationMembership withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public OrganizationMembership withUpdatedAt(Optional<Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganizationMembership other = (OrganizationMembership) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.role, other.role) &&
            Objects.deepEquals(this.roleName, other.roleName) &&
            Objects.deepEquals(this.permissions, other.permissions) &&
            Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            Objects.deepEquals(this.privateMetadata, other.privateMetadata) &&
            Objects.deepEquals(this.organization, other.organization) &&
            Objects.deepEquals(this.publicUserData, other.publicUserData) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            object,
            role,
            roleName,
            permissions,
            publicMetadata,
            privateMetadata,
            organization,
            publicUserData,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrganizationMembership.class,
                "id", id,
                "object", object,
                "role", role,
                "roleName", roleName,
                "permissions", permissions,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "organization", organization,
                "publicUserData", publicUserData,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends OrganizationMembershipObject> object = Optional.empty();
 
        private Optional<String> role = Optional.empty();
 
        private Optional<String> roleName = Optional.empty();
 
        private Optional<? extends List<String>> permissions = Optional.empty();
 
        private Optional<? extends OrganizationMembershipPublicMetadata> publicMetadata = Optional.empty();
 
        private Optional<? extends OrganizationMembershipPrivateMetadata> privateMetadata = Optional.empty();
 
        private Optional<? extends OrganizationMembershipOrganization> organization = Optional.empty();
 
        private Optional<? extends PublicUserData> publicUserData = Optional.empty();
 
        private Optional<Long> createdAt = Optional.empty();
 
        private Optional<Long> updatedAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(OrganizationMembershipObject object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(Optional<? extends OrganizationMembershipObject> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder role(String role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Builder role(Optional<String> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        public Builder roleName(String roleName) {
            Utils.checkNotNull(roleName, "roleName");
            this.roleName = Optional.ofNullable(roleName);
            return this;
        }

        public Builder roleName(Optional<String> roleName) {
            Utils.checkNotNull(roleName, "roleName");
            this.roleName = roleName;
            return this;
        }

        public Builder permissions(List<String> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public Builder permissions(Optional<? extends List<String>> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        /**
         * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
         */
        public Builder publicMetadata(OrganizationMembershipPublicMetadata publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        /**
         * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
         */
        public Builder publicMetadata(Optional<? extends OrganizationMembershipPublicMetadata> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        /**
         * Metadata saved on the organization membership, accessible only from the Backend API
         */
        public Builder privateMetadata(OrganizationMembershipPrivateMetadata privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        /**
         * Metadata saved on the organization membership, accessible only from the Backend API
         */
        public Builder privateMetadata(Optional<? extends OrganizationMembershipPrivateMetadata> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }

        public Builder organization(OrganizationMembershipOrganization organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = Optional.ofNullable(organization);
            return this;
        }

        public Builder organization(Optional<? extends OrganizationMembershipOrganization> organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }

        public Builder publicUserData(PublicUserData publicUserData) {
            Utils.checkNotNull(publicUserData, "publicUserData");
            this.publicUserData = Optional.ofNullable(publicUserData);
            return this;
        }

        public Builder publicUserData(Optional<? extends PublicUserData> publicUserData) {
            Utils.checkNotNull(publicUserData, "publicUserData");
            this.publicUserData = publicUserData;
            return this;
        }

        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(Optional<Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(Optional<Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public OrganizationMembership build() {
            return new OrganizationMembership(
                id,
                object,
                role,
                roleName,
                permissions,
                publicMetadata,
                privateMetadata,
                organization,
                publicUserData,
                createdAt,
                updatedAt);
        }
    }
}

