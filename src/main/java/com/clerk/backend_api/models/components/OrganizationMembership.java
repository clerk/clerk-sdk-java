/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * OrganizationMembership
 * 
 * <p>Hello world
 */
public class OrganizationMembership {

    @JsonProperty("id")
    private String id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private OrganizationMembershipObject object;


    @JsonProperty("role")
    private String role;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_name")
    private Optional<String> roleName;


    @JsonProperty("permissions")
    private List<String> permissions;

    /**
     * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
     */
    @JsonProperty("public_metadata")
    private Map<String, Object> publicMetadata;

    /**
     * Metadata saved on the organization membership, accessible only from the Backend API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends Map<String, Object>> privateMetadata;


    @JsonProperty("organization")
    private OrganizationMembershipOrganization organization;

    /**
     * An organization membership with public user data populated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_user_data")
    private Optional<? extends OrganizationMembershipPublicUserData> publicUserData;

    /**
     * Unix timestamp of creation.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of last update.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    @JsonCreator
    public OrganizationMembership(
            @JsonProperty("id") String id,
            @JsonProperty("object") OrganizationMembershipObject object,
            @JsonProperty("role") String role,
            @JsonProperty("role_name") Optional<String> roleName,
            @JsonProperty("permissions") List<String> permissions,
            @JsonProperty("public_metadata") Map<String, Object> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends Map<String, Object>> privateMetadata,
            @JsonProperty("organization") OrganizationMembershipOrganization organization,
            @JsonProperty("public_user_data") Optional<? extends OrganizationMembershipPublicUserData> publicUserData,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(roleName, "roleName");
        Utils.checkNotNull(permissions, "permissions");
        publicMetadata = Utils.emptyMapIfNull(publicMetadata);
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(organization, "organization");
        Utils.checkNotNull(publicUserData, "publicUserData");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.object = object;
        this.role = role;
        this.roleName = roleName;
        this.permissions = permissions;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.organization = organization;
        this.publicUserData = publicUserData;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public OrganizationMembership(
            String id,
            OrganizationMembershipObject object,
            String role,
            List<String> permissions,
            Map<String, Object> publicMetadata,
            OrganizationMembershipOrganization organization,
            long createdAt,
            long updatedAt) {
        this(id, object, role,
            Optional.empty(), permissions, publicMetadata,
            Optional.empty(), organization, Optional.empty(),
            createdAt, updatedAt);
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public OrganizationMembershipObject object() {
        return object;
    }

    @JsonIgnore
    public String role() {
        return role;
    }

    @JsonIgnore
    public Optional<String> roleName() {
        return roleName;
    }

    @JsonIgnore
    public List<String> permissions() {
        return permissions;
    }

    /**
     * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
     */
    @JsonIgnore
    public Map<String, Object> publicMetadata() {
        return publicMetadata;
    }

    /**
     * Metadata saved on the organization membership, accessible only from the Backend API
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> privateMetadata() {
        return (Optional<Map<String, Object>>) privateMetadata;
    }

    @JsonIgnore
    public OrganizationMembershipOrganization organization() {
        return organization;
    }

    /**
     * An organization membership with public user data populated
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrganizationMembershipPublicUserData> publicUserData() {
        return (Optional<OrganizationMembershipPublicUserData>) publicUserData;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public OrganizationMembership withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public OrganizationMembership withObject(OrganizationMembershipObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public OrganizationMembership withRole(String role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    public OrganizationMembership withRoleName(String roleName) {
        Utils.checkNotNull(roleName, "roleName");
        this.roleName = Optional.ofNullable(roleName);
        return this;
    }


    public OrganizationMembership withRoleName(Optional<String> roleName) {
        Utils.checkNotNull(roleName, "roleName");
        this.roleName = roleName;
        return this;
    }

    public OrganizationMembership withPermissions(List<String> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    /**
     * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
     */
    public OrganizationMembership withPublicMetadata(Map<String, Object> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    /**
     * Metadata saved on the organization membership, accessible only from the Backend API
     */
    public OrganizationMembership withPrivateMetadata(Map<String, Object> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }


    /**
     * Metadata saved on the organization membership, accessible only from the Backend API
     */
    public OrganizationMembership withPrivateMetadata(Optional<? extends Map<String, Object>> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    public OrganizationMembership withOrganization(OrganizationMembershipOrganization organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    /**
     * An organization membership with public user data populated
     */
    public OrganizationMembership withPublicUserData(OrganizationMembershipPublicUserData publicUserData) {
        Utils.checkNotNull(publicUserData, "publicUserData");
        this.publicUserData = Optional.ofNullable(publicUserData);
        return this;
    }


    /**
     * An organization membership with public user data populated
     */
    public OrganizationMembership withPublicUserData(Optional<? extends OrganizationMembershipPublicUserData> publicUserData) {
        Utils.checkNotNull(publicUserData, "publicUserData");
        this.publicUserData = publicUserData;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public OrganizationMembership withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public OrganizationMembership withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganizationMembership other = (OrganizationMembership) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.role, other.role) &&
            Utils.enhancedDeepEquals(this.roleName, other.roleName) &&
            Utils.enhancedDeepEquals(this.permissions, other.permissions) &&
            Utils.enhancedDeepEquals(this.publicMetadata, other.publicMetadata) &&
            Utils.enhancedDeepEquals(this.privateMetadata, other.privateMetadata) &&
            Utils.enhancedDeepEquals(this.organization, other.organization) &&
            Utils.enhancedDeepEquals(this.publicUserData, other.publicUserData) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, object, role,
            roleName, permissions, publicMetadata,
            privateMetadata, organization, publicUserData,
            createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrganizationMembership.class,
                "id", id,
                "object", object,
                "role", role,
                "roleName", roleName,
                "permissions", permissions,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "organization", organization,
                "publicUserData", publicUserData,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private OrganizationMembershipObject object;

        private String role;

        private Optional<String> roleName = Optional.empty();

        private List<String> permissions;

        private Map<String, Object> publicMetadata;

        private Optional<? extends Map<String, Object>> privateMetadata = Optional.empty();

        private OrganizationMembershipOrganization organization;

        private Optional<? extends OrganizationMembershipPublicUserData> publicUserData = Optional.empty();

        private Long createdAt;

        private Long updatedAt;

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(OrganizationMembershipObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder role(String role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }


        public Builder roleName(String roleName) {
            Utils.checkNotNull(roleName, "roleName");
            this.roleName = Optional.ofNullable(roleName);
            return this;
        }

        public Builder roleName(Optional<String> roleName) {
            Utils.checkNotNull(roleName, "roleName");
            this.roleName = roleName;
            return this;
        }


        public Builder permissions(List<String> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }


        /**
         * Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
         */
        public Builder publicMetadata(Map<String, Object> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }


        /**
         * Metadata saved on the organization membership, accessible only from the Backend API
         */
        public Builder privateMetadata(Map<String, Object> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        /**
         * Metadata saved on the organization membership, accessible only from the Backend API
         */
        public Builder privateMetadata(Optional<? extends Map<String, Object>> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }


        public Builder organization(OrganizationMembershipOrganization organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }


        /**
         * An organization membership with public user data populated
         */
        public Builder publicUserData(OrganizationMembershipPublicUserData publicUserData) {
            Utils.checkNotNull(publicUserData, "publicUserData");
            this.publicUserData = Optional.ofNullable(publicUserData);
            return this;
        }

        /**
         * An organization membership with public user data populated
         */
        public Builder publicUserData(Optional<? extends OrganizationMembershipPublicUserData> publicUserData) {
            Utils.checkNotNull(publicUserData, "publicUserData");
            this.publicUserData = publicUserData;
            return this;
        }


        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public OrganizationMembership build() {

            return new OrganizationMembership(
                id, object, role,
                roleName, permissions, publicMetadata,
                privateMetadata, organization, publicUserData,
                createdAt, updatedAt);
        }

    }
}
