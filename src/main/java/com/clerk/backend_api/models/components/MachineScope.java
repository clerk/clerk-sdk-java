/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;

/**
 * MachineScope
 * 
 * <p>Machine scope created successfully for a machine
 */
public class MachineScope {

    @JsonProperty("object")
    private MachineScopeObject object;

    /**
     * The ID of the machine that has access to the target machine.
     */
    @JsonProperty("from_machine_id")
    private String fromMachineId;

    /**
     * The ID of the machine that is being accessed.
     */
    @JsonProperty("to_machine_id")
    private String toMachineId;

    /**
     * Unix timestamp of creation.
     */
    @JsonProperty("created_at")
    private long createdAt;

    @JsonCreator
    public MachineScope(
            @JsonProperty("object") MachineScopeObject object,
            @JsonProperty("from_machine_id") String fromMachineId,
            @JsonProperty("to_machine_id") String toMachineId,
            @JsonProperty("created_at") long createdAt) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(fromMachineId, "fromMachineId");
        Utils.checkNotNull(toMachineId, "toMachineId");
        Utils.checkNotNull(createdAt, "createdAt");
        this.object = object;
        this.fromMachineId = fromMachineId;
        this.toMachineId = toMachineId;
        this.createdAt = createdAt;
    }

    @JsonIgnore
    public MachineScopeObject object() {
        return object;
    }

    /**
     * The ID of the machine that has access to the target machine.
     */
    @JsonIgnore
    public String fromMachineId() {
        return fromMachineId;
    }

    /**
     * The ID of the machine that is being accessed.
     */
    @JsonIgnore
    public String toMachineId() {
        return toMachineId;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public MachineScope withObject(MachineScopeObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * The ID of the machine that has access to the target machine.
     */
    public MachineScope withFromMachineId(String fromMachineId) {
        Utils.checkNotNull(fromMachineId, "fromMachineId");
        this.fromMachineId = fromMachineId;
        return this;
    }

    /**
     * The ID of the machine that is being accessed.
     */
    public MachineScope withToMachineId(String toMachineId) {
        Utils.checkNotNull(toMachineId, "toMachineId");
        this.toMachineId = toMachineId;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public MachineScope withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MachineScope other = (MachineScope) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.fromMachineId, other.fromMachineId) &&
            Utils.enhancedDeepEquals(this.toMachineId, other.toMachineId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, fromMachineId, toMachineId,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MachineScope.class,
                "object", object,
                "fromMachineId", fromMachineId,
                "toMachineId", toMachineId,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private MachineScopeObject object;

        private String fromMachineId;

        private String toMachineId;

        private Long createdAt;

        private Builder() {
          // force use of static builder() method
        }


        public Builder object(MachineScopeObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * The ID of the machine that has access to the target machine.
         */
        public Builder fromMachineId(String fromMachineId) {
            Utils.checkNotNull(fromMachineId, "fromMachineId");
            this.fromMachineId = fromMachineId;
            return this;
        }


        /**
         * The ID of the machine that is being accessed.
         */
        public Builder toMachineId(String toMachineId) {
            Utils.checkNotNull(toMachineId, "toMachineId");
            this.toMachineId = toMachineId;
            return this;
        }


        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public MachineScope build() {

            return new MachineScope(
                object, fromMachineId, toMachineId,
                createdAt);
        }

    }
}
