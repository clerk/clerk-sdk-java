/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.clerk.backend_api.models.components;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class JWKSEcdsaPublicKey {

    @JsonProperty("kid")
    private String kid;

    @JsonProperty("alg")
    private String alg;

    @JsonProperty("use")
    private String use;

    @JsonProperty("kty")
    private JWKSEcdsaPublicKeyKty kty;

    @JsonProperty("crv")
    private String crv;

    @JsonProperty("x")
    private String x;

    @JsonProperty("y")
    private String y;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x5c")
    private Optional<? extends List<String>> x5c;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x5t")
    private Optional<String> x5t;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x5t#S256")
    private Optional<String> x5tNumberS256;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x5u")
    private Optional<String> x5u;

    @JsonCreator
    public JWKSEcdsaPublicKey(
            @JsonProperty("kid") String kid,
            @JsonProperty("alg") String alg,
            @JsonProperty("use") String use,
            @JsonProperty("kty") JWKSEcdsaPublicKeyKty kty,
            @JsonProperty("crv") String crv,
            @JsonProperty("x") String x,
            @JsonProperty("y") String y,
            @JsonProperty("x5c") Optional<? extends List<String>> x5c,
            @JsonProperty("x5t") Optional<String> x5t,
            @JsonProperty("x5t#S256") Optional<String> x5tNumberS256,
            @JsonProperty("x5u") Optional<String> x5u) {
        Utils.checkNotNull(kid, "kid");
        Utils.checkNotNull(alg, "alg");
        Utils.checkNotNull(use, "use");
        Utils.checkNotNull(kty, "kty");
        Utils.checkNotNull(crv, "crv");
        Utils.checkNotNull(x, "x");
        Utils.checkNotNull(y, "y");
        Utils.checkNotNull(x5c, "x5c");
        Utils.checkNotNull(x5t, "x5t");
        Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
        Utils.checkNotNull(x5u, "x5u");
        this.kid = kid;
        this.alg = alg;
        this.use = use;
        this.kty = kty;
        this.crv = crv;
        this.x = x;
        this.y = y;
        this.x5c = x5c;
        this.x5t = x5t;
        this.x5tNumberS256 = x5tNumberS256;
        this.x5u = x5u;
    }
    
    public JWKSEcdsaPublicKey(
            String kid,
            String alg,
            String use,
            JWKSEcdsaPublicKeyKty kty,
            String crv,
            String x,
            String y) {
        this(kid, alg, use, kty, crv, x, y, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String kid() {
        return kid;
    }

    @JsonIgnore
    public String alg() {
        return alg;
    }

    @JsonIgnore
    public String use() {
        return use;
    }

    @JsonIgnore
    public JWKSEcdsaPublicKeyKty kty() {
        return kty;
    }

    @JsonIgnore
    public String crv() {
        return crv;
    }

    @JsonIgnore
    public String x() {
        return x;
    }

    @JsonIgnore
    public String y() {
        return y;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> x5c() {
        return (Optional<List<String>>) x5c;
    }

    @JsonIgnore
    public Optional<String> x5t() {
        return x5t;
    }

    @JsonIgnore
    public Optional<String> x5tNumberS256() {
        return x5tNumberS256;
    }

    @JsonIgnore
    public Optional<String> x5u() {
        return x5u;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public JWKSEcdsaPublicKey withKid(String kid) {
        Utils.checkNotNull(kid, "kid");
        this.kid = kid;
        return this;
    }

    public JWKSEcdsaPublicKey withAlg(String alg) {
        Utils.checkNotNull(alg, "alg");
        this.alg = alg;
        return this;
    }

    public JWKSEcdsaPublicKey withUse(String use) {
        Utils.checkNotNull(use, "use");
        this.use = use;
        return this;
    }

    public JWKSEcdsaPublicKey withKty(JWKSEcdsaPublicKeyKty kty) {
        Utils.checkNotNull(kty, "kty");
        this.kty = kty;
        return this;
    }

    public JWKSEcdsaPublicKey withCrv(String crv) {
        Utils.checkNotNull(crv, "crv");
        this.crv = crv;
        return this;
    }

    public JWKSEcdsaPublicKey withX(String x) {
        Utils.checkNotNull(x, "x");
        this.x = x;
        return this;
    }

    public JWKSEcdsaPublicKey withY(String y) {
        Utils.checkNotNull(y, "y");
        this.y = y;
        return this;
    }

    public JWKSEcdsaPublicKey withX5c(List<String> x5c) {
        Utils.checkNotNull(x5c, "x5c");
        this.x5c = Optional.ofNullable(x5c);
        return this;
    }

    public JWKSEcdsaPublicKey withX5c(Optional<? extends List<String>> x5c) {
        Utils.checkNotNull(x5c, "x5c");
        this.x5c = x5c;
        return this;
    }

    public JWKSEcdsaPublicKey withX5t(String x5t) {
        Utils.checkNotNull(x5t, "x5t");
        this.x5t = Optional.ofNullable(x5t);
        return this;
    }

    public JWKSEcdsaPublicKey withX5t(Optional<String> x5t) {
        Utils.checkNotNull(x5t, "x5t");
        this.x5t = x5t;
        return this;
    }

    public JWKSEcdsaPublicKey withX5tNumberS256(String x5tNumberS256) {
        Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
        this.x5tNumberS256 = Optional.ofNullable(x5tNumberS256);
        return this;
    }

    public JWKSEcdsaPublicKey withX5tNumberS256(Optional<String> x5tNumberS256) {
        Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
        this.x5tNumberS256 = x5tNumberS256;
        return this;
    }

    public JWKSEcdsaPublicKey withX5u(String x5u) {
        Utils.checkNotNull(x5u, "x5u");
        this.x5u = Optional.ofNullable(x5u);
        return this;
    }

    public JWKSEcdsaPublicKey withX5u(Optional<String> x5u) {
        Utils.checkNotNull(x5u, "x5u");
        this.x5u = x5u;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JWKSEcdsaPublicKey other = (JWKSEcdsaPublicKey) o;
        return 
            Objects.deepEquals(this.kid, other.kid) &&
            Objects.deepEquals(this.alg, other.alg) &&
            Objects.deepEquals(this.use, other.use) &&
            Objects.deepEquals(this.kty, other.kty) &&
            Objects.deepEquals(this.crv, other.crv) &&
            Objects.deepEquals(this.x, other.x) &&
            Objects.deepEquals(this.y, other.y) &&
            Objects.deepEquals(this.x5c, other.x5c) &&
            Objects.deepEquals(this.x5t, other.x5t) &&
            Objects.deepEquals(this.x5tNumberS256, other.x5tNumberS256) &&
            Objects.deepEquals(this.x5u, other.x5u);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            kid,
            alg,
            use,
            kty,
            crv,
            x,
            y,
            x5c,
            x5t,
            x5tNumberS256,
            x5u);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JWKSEcdsaPublicKey.class,
                "kid", kid,
                "alg", alg,
                "use", use,
                "kty", kty,
                "crv", crv,
                "x", x,
                "y", y,
                "x5c", x5c,
                "x5t", x5t,
                "x5tNumberS256", x5tNumberS256,
                "x5u", x5u);
    }
    
    public final static class Builder {
 
        private String kid;
 
        private String alg;
 
        private String use;
 
        private JWKSEcdsaPublicKeyKty kty;
 
        private String crv;
 
        private String x;
 
        private String y;
 
        private Optional<? extends List<String>> x5c = Optional.empty();
 
        private Optional<String> x5t = Optional.empty();
 
        private Optional<String> x5tNumberS256 = Optional.empty();
 
        private Optional<String> x5u = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder kid(String kid) {
            Utils.checkNotNull(kid, "kid");
            this.kid = kid;
            return this;
        }

        public Builder alg(String alg) {
            Utils.checkNotNull(alg, "alg");
            this.alg = alg;
            return this;
        }

        public Builder use(String use) {
            Utils.checkNotNull(use, "use");
            this.use = use;
            return this;
        }

        public Builder kty(JWKSEcdsaPublicKeyKty kty) {
            Utils.checkNotNull(kty, "kty");
            this.kty = kty;
            return this;
        }

        public Builder crv(String crv) {
            Utils.checkNotNull(crv, "crv");
            this.crv = crv;
            return this;
        }

        public Builder x(String x) {
            Utils.checkNotNull(x, "x");
            this.x = x;
            return this;
        }

        public Builder y(String y) {
            Utils.checkNotNull(y, "y");
            this.y = y;
            return this;
        }

        public Builder x5c(List<String> x5c) {
            Utils.checkNotNull(x5c, "x5c");
            this.x5c = Optional.ofNullable(x5c);
            return this;
        }

        public Builder x5c(Optional<? extends List<String>> x5c) {
            Utils.checkNotNull(x5c, "x5c");
            this.x5c = x5c;
            return this;
        }

        public Builder x5t(String x5t) {
            Utils.checkNotNull(x5t, "x5t");
            this.x5t = Optional.ofNullable(x5t);
            return this;
        }

        public Builder x5t(Optional<String> x5t) {
            Utils.checkNotNull(x5t, "x5t");
            this.x5t = x5t;
            return this;
        }

        public Builder x5tNumberS256(String x5tNumberS256) {
            Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
            this.x5tNumberS256 = Optional.ofNullable(x5tNumberS256);
            return this;
        }

        public Builder x5tNumberS256(Optional<String> x5tNumberS256) {
            Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
            this.x5tNumberS256 = x5tNumberS256;
            return this;
        }

        public Builder x5u(String x5u) {
            Utils.checkNotNull(x5u, "x5u");
            this.x5u = Optional.ofNullable(x5u);
            return this;
        }

        public Builder x5u(Optional<String> x5u) {
            Utils.checkNotNull(x5u, "x5u");
            this.x5u = x5u;
            return this;
        }
        
        public JWKSEcdsaPublicKey build() {
            return new JWKSEcdsaPublicKey(
                kid,
                alg,
                use,
                kty,
                crv,
                x,
                y,
                x5c,
                x5t,
                x5tNumberS256,
                x5u);
        }
    }
}

