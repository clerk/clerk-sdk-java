/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * OrganizationMembershipPublicUserData
 * 
 * <p>An organization membership with public user data populated
 */
public class OrganizationMembershipPublicUserData {

    @JsonProperty("user_id")
    private String userId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("first_name")
    private Optional<String> firstName;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("last_name")
    private Optional<String> lastName;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("profile_image_url")
    @Deprecated
    private Optional<String> profileImageUrl;


    @JsonProperty("image_url")
    private String imageUrl;


    @JsonProperty("has_image")
    private boolean hasImage;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identifier")
    private JsonNullable<String> identifier;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private JsonNullable<String> username;

    @JsonCreator
    public OrganizationMembershipPublicUserData(
            @JsonProperty("user_id") String userId,
            @JsonProperty("first_name") Optional<String> firstName,
            @JsonProperty("last_name") Optional<String> lastName,
            @JsonProperty("profile_image_url") Optional<String> profileImageUrl,
            @JsonProperty("image_url") String imageUrl,
            @JsonProperty("has_image") boolean hasImage,
            @JsonProperty("identifier") JsonNullable<String> identifier,
            @JsonProperty("username") JsonNullable<String> username) {
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(hasImage, "hasImage");
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(username, "username");
        this.userId = userId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.profileImageUrl = profileImageUrl;
        this.imageUrl = imageUrl;
        this.hasImage = hasImage;
        this.identifier = identifier;
        this.username = username;
    }
    
    public OrganizationMembershipPublicUserData(
            String userId,
            String imageUrl,
            boolean hasImage) {
        this(userId, Optional.empty(), Optional.empty(),
            Optional.empty(), imageUrl, hasImage,
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public String userId() {
        return userId;
    }

    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> profileImageUrl() {
        return profileImageUrl;
    }

    @JsonIgnore
    public String imageUrl() {
        return imageUrl;
    }

    @JsonIgnore
    public boolean hasImage() {
        return hasImage;
    }

    @JsonIgnore
    public JsonNullable<String> identifier() {
        return identifier;
    }

    @JsonIgnore
    public JsonNullable<String> username() {
        return username;
    }

    public static Builder builder() {
        return new Builder();
    }


    public OrganizationMembershipPublicUserData withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    public OrganizationMembershipPublicUserData withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }


    public OrganizationMembershipPublicUserData withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public OrganizationMembershipPublicUserData withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }


    public OrganizationMembershipPublicUserData withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public OrganizationMembershipPublicUserData withProfileImageUrl(String profileImageUrl) {
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        this.profileImageUrl = Optional.ofNullable(profileImageUrl);
        return this;
    }


    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public OrganizationMembershipPublicUserData withProfileImageUrl(Optional<String> profileImageUrl) {
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        this.profileImageUrl = profileImageUrl;
        return this;
    }

    public OrganizationMembershipPublicUserData withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public OrganizationMembershipPublicUserData withHasImage(boolean hasImage) {
        Utils.checkNotNull(hasImage, "hasImage");
        this.hasImage = hasImage;
        return this;
    }

    public OrganizationMembershipPublicUserData withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = JsonNullable.of(identifier);
        return this;
    }

    public OrganizationMembershipPublicUserData withIdentifier(JsonNullable<String> identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    public OrganizationMembershipPublicUserData withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = JsonNullable.of(username);
        return this;
    }

    public OrganizationMembershipPublicUserData withUsername(JsonNullable<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganizationMembershipPublicUserData other = (OrganizationMembershipPublicUserData) o;
        return 
            Utils.enhancedDeepEquals(this.userId, other.userId) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.profileImageUrl, other.profileImageUrl) &&
            Utils.enhancedDeepEquals(this.imageUrl, other.imageUrl) &&
            Utils.enhancedDeepEquals(this.hasImage, other.hasImage) &&
            Utils.enhancedDeepEquals(this.identifier, other.identifier) &&
            Utils.enhancedDeepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            userId, firstName, lastName,
            profileImageUrl, imageUrl, hasImage,
            identifier, username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrganizationMembershipPublicUserData.class,
                "userId", userId,
                "firstName", firstName,
                "lastName", lastName,
                "profileImageUrl", profileImageUrl,
                "imageUrl", imageUrl,
                "hasImage", hasImage,
                "identifier", identifier,
                "username", username);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String userId;

        private Optional<String> firstName = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        @Deprecated
        private Optional<String> profileImageUrl = Optional.empty();

        private String imageUrl;

        private Boolean hasImage;

        private JsonNullable<String> identifier = JsonNullable.undefined();

        private JsonNullable<String> username = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }


        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder profileImageUrl(String profileImageUrl) {
            Utils.checkNotNull(profileImageUrl, "profileImageUrl");
            this.profileImageUrl = Optional.ofNullable(profileImageUrl);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder profileImageUrl(Optional<String> profileImageUrl) {
            Utils.checkNotNull(profileImageUrl, "profileImageUrl");
            this.profileImageUrl = profileImageUrl;
            return this;
        }


        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }


        public Builder hasImage(boolean hasImage) {
            Utils.checkNotNull(hasImage, "hasImage");
            this.hasImage = hasImage;
            return this;
        }


        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = JsonNullable.of(identifier);
            return this;
        }

        public Builder identifier(JsonNullable<String> identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }


        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = JsonNullable.of(username);
            return this;
        }

        public Builder username(JsonNullable<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public OrganizationMembershipPublicUserData build() {

            return new OrganizationMembershipPublicUserData(
                userId, firstName, lastName,
                profileImageUrl, imageUrl, hasImage,
                identifier, username);
        }

    }
}
