/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * OAuthAccessToken
 * 
 * <p>Success
 */
public class OAuthAccessToken {

    @JsonProperty("object")
    private OAuthAccessTokenObject object;

    /**
     * External account ID
     */
    @JsonProperty("external_account_id")
    private String externalAccountId;

    /**
     * The unique ID of the user in the external provider's system
     */
    @JsonProperty("provider_user_id")
    private String providerUserId;

    /**
     * The access token
     */
    @JsonProperty("token")
    private String token;

    /**
     * Unix timestamp of the access token expiration.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("expires_at")
    private Optional<Long> expiresAt;

    /**
     * The ID of the provider
     */
    @JsonProperty("provider")
    private String provider;


    @JsonProperty("public_metadata")
    private Map<String, Object> publicMetadata;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("label")
    private Optional<String> label;

    /**
     * The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private Optional<? extends List<String>> scopes;

    /**
     * The token secret. Only present for OAuth 1.0 tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_secret")
    private Optional<String> tokenSecret;

    @JsonCreator
    public OAuthAccessToken(
            @JsonProperty("object") OAuthAccessTokenObject object,
            @JsonProperty("external_account_id") String externalAccountId,
            @JsonProperty("provider_user_id") String providerUserId,
            @JsonProperty("token") String token,
            @JsonProperty("expires_at") Optional<Long> expiresAt,
            @JsonProperty("provider") String provider,
            @JsonProperty("public_metadata") Map<String, Object> publicMetadata,
            @JsonProperty("label") Optional<String> label,
            @JsonProperty("scopes") Optional<? extends List<String>> scopes,
            @JsonProperty("token_secret") Optional<String> tokenSecret) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(externalAccountId, "externalAccountId");
        Utils.checkNotNull(providerUserId, "providerUserId");
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(provider, "provider");
        publicMetadata = Utils.emptyMapIfNull(publicMetadata);
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(scopes, "scopes");
        Utils.checkNotNull(tokenSecret, "tokenSecret");
        this.object = object;
        this.externalAccountId = externalAccountId;
        this.providerUserId = providerUserId;
        this.token = token;
        this.expiresAt = expiresAt;
        this.provider = provider;
        this.publicMetadata = publicMetadata;
        this.label = label;
        this.scopes = scopes;
        this.tokenSecret = tokenSecret;
    }
    
    public OAuthAccessToken(
            OAuthAccessTokenObject object,
            String externalAccountId,
            String providerUserId,
            String token,
            String provider,
            Map<String, Object> publicMetadata) {
        this(object, externalAccountId, providerUserId,
            token, Optional.empty(), provider,
            publicMetadata, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public OAuthAccessTokenObject object() {
        return object;
    }

    /**
     * External account ID
     */
    @JsonIgnore
    public String externalAccountId() {
        return externalAccountId;
    }

    /**
     * The unique ID of the user in the external provider's system
     */
    @JsonIgnore
    public String providerUserId() {
        return providerUserId;
    }

    /**
     * The access token
     */
    @JsonIgnore
    public String token() {
        return token;
    }

    /**
     * Unix timestamp of the access token expiration.
     */
    @JsonIgnore
    public Optional<Long> expiresAt() {
        return expiresAt;
    }

    /**
     * The ID of the provider
     */
    @JsonIgnore
    public String provider() {
        return provider;
    }

    @JsonIgnore
    public Map<String, Object> publicMetadata() {
        return publicMetadata;
    }

    @JsonIgnore
    public Optional<String> label() {
        return label;
    }

    /**
     * The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> scopes() {
        return (Optional<List<String>>) scopes;
    }

    /**
     * The token secret. Only present for OAuth 1.0 tokens.
     */
    @JsonIgnore
    public Optional<String> tokenSecret() {
        return tokenSecret;
    }

    public static Builder builder() {
        return new Builder();
    }


    public OAuthAccessToken withObject(OAuthAccessTokenObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * External account ID
     */
    public OAuthAccessToken withExternalAccountId(String externalAccountId) {
        Utils.checkNotNull(externalAccountId, "externalAccountId");
        this.externalAccountId = externalAccountId;
        return this;
    }

    /**
     * The unique ID of the user in the external provider's system
     */
    public OAuthAccessToken withProviderUserId(String providerUserId) {
        Utils.checkNotNull(providerUserId, "providerUserId");
        this.providerUserId = providerUserId;
        return this;
    }

    /**
     * The access token
     */
    public OAuthAccessToken withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    /**
     * Unix timestamp of the access token expiration.
     */
    public OAuthAccessToken withExpiresAt(long expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = Optional.ofNullable(expiresAt);
        return this;
    }


    /**
     * Unix timestamp of the access token expiration.
     */
    public OAuthAccessToken withExpiresAt(Optional<Long> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * The ID of the provider
     */
    public OAuthAccessToken withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public OAuthAccessToken withPublicMetadata(Map<String, Object> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public OAuthAccessToken withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = Optional.ofNullable(label);
        return this;
    }


    public OAuthAccessToken withLabel(Optional<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    /**
     * The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.
     */
    public OAuthAccessToken withScopes(List<String> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = Optional.ofNullable(scopes);
        return this;
    }


    /**
     * The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.
     */
    public OAuthAccessToken withScopes(Optional<? extends List<String>> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    /**
     * The token secret. Only present for OAuth 1.0 tokens.
     */
    public OAuthAccessToken withTokenSecret(String tokenSecret) {
        Utils.checkNotNull(tokenSecret, "tokenSecret");
        this.tokenSecret = Optional.ofNullable(tokenSecret);
        return this;
    }


    /**
     * The token secret. Only present for OAuth 1.0 tokens.
     */
    public OAuthAccessToken withTokenSecret(Optional<String> tokenSecret) {
        Utils.checkNotNull(tokenSecret, "tokenSecret");
        this.tokenSecret = tokenSecret;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OAuthAccessToken other = (OAuthAccessToken) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.externalAccountId, other.externalAccountId) &&
            Utils.enhancedDeepEquals(this.providerUserId, other.providerUserId) &&
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.publicMetadata, other.publicMetadata) &&
            Utils.enhancedDeepEquals(this.label, other.label) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.tokenSecret, other.tokenSecret);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, externalAccountId, providerUserId,
            token, expiresAt, provider,
            publicMetadata, label, scopes,
            tokenSecret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OAuthAccessToken.class,
                "object", object,
                "externalAccountId", externalAccountId,
                "providerUserId", providerUserId,
                "token", token,
                "expiresAt", expiresAt,
                "provider", provider,
                "publicMetadata", publicMetadata,
                "label", label,
                "scopes", scopes,
                "tokenSecret", tokenSecret);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OAuthAccessTokenObject object;

        private String externalAccountId;

        private String providerUserId;

        private String token;

        private Optional<Long> expiresAt = Optional.empty();

        private String provider;

        private Map<String, Object> publicMetadata;

        private Optional<String> label = Optional.empty();

        private Optional<? extends List<String>> scopes = Optional.empty();

        private Optional<String> tokenSecret = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder object(OAuthAccessTokenObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * External account ID
         */
        public Builder externalAccountId(String externalAccountId) {
            Utils.checkNotNull(externalAccountId, "externalAccountId");
            this.externalAccountId = externalAccountId;
            return this;
        }


        /**
         * The unique ID of the user in the external provider's system
         */
        public Builder providerUserId(String providerUserId) {
            Utils.checkNotNull(providerUserId, "providerUserId");
            this.providerUserId = providerUserId;
            return this;
        }


        /**
         * The access token
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }


        /**
         * Unix timestamp of the access token expiration.
         */
        public Builder expiresAt(long expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        /**
         * Unix timestamp of the access token expiration.
         */
        public Builder expiresAt(Optional<Long> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }


        /**
         * The ID of the provider
         */
        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        public Builder publicMetadata(Map<String, Object> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }


        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = Optional.ofNullable(label);
            return this;
        }

        public Builder label(Optional<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }


        /**
         * The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.
         */
        public Builder scopes(List<String> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = Optional.ofNullable(scopes);
            return this;
        }

        /**
         * The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.
         */
        public Builder scopes(Optional<? extends List<String>> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }


        /**
         * The token secret. Only present for OAuth 1.0 tokens.
         */
        public Builder tokenSecret(String tokenSecret) {
            Utils.checkNotNull(tokenSecret, "tokenSecret");
            this.tokenSecret = Optional.ofNullable(tokenSecret);
            return this;
        }

        /**
         * The token secret. Only present for OAuth 1.0 tokens.
         */
        public Builder tokenSecret(Optional<String> tokenSecret) {
            Utils.checkNotNull(tokenSecret, "tokenSecret");
            this.tokenSecret = tokenSecret;
            return this;
        }

        public OAuthAccessToken build() {

            return new OAuthAccessToken(
                object, externalAccountId, providerUserId,
                token, expiresAt, provider,
                publicMetadata, label, scopes,
                tokenSecret);
        }

    }
}
