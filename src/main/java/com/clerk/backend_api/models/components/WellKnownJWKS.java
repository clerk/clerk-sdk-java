/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class WellKnownJWKS {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keys")
    private Optional<? extends List<Keys>> keys;

    @JsonCreator
    public WellKnownJWKS(
            @JsonProperty("keys") Optional<? extends List<Keys>> keys) {
        Utils.checkNotNull(keys, "keys");
        this.keys = keys;
    }
    
    public WellKnownJWKS() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Keys>> keys() {
        return (Optional<List<Keys>>) keys;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WellKnownJWKS withKeys(List<Keys> keys) {
        Utils.checkNotNull(keys, "keys");
        this.keys = Optional.ofNullable(keys);
        return this;
    }

    public WellKnownJWKS withKeys(Optional<? extends List<Keys>> keys) {
        Utils.checkNotNull(keys, "keys");
        this.keys = keys;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WellKnownJWKS other = (WellKnownJWKS) o;
        return 
            Objects.deepEquals(this.keys, other.keys);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            keys);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WellKnownJWKS.class,
                "keys", keys);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Keys>> keys = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder keys(List<Keys> keys) {
            Utils.checkNotNull(keys, "keys");
            this.keys = Optional.ofNullable(keys);
            return this;
        }

        public Builder keys(Optional<? extends List<Keys>> keys) {
            Utils.checkNotNull(keys, "keys");
            this.keys = keys;
            return this;
        }
        
        public WellKnownJWKS build() {
            return new WellKnownJWKS(
                keys);
        }
    }
}

