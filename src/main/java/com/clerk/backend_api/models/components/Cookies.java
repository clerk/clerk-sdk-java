/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class Cookies {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private CookiesObject object;

    /**
     * Array of cookie directives.
     */
    @JsonProperty("cookies")
    private List<String> cookies;

    @JsonCreator
    public Cookies(
            @JsonProperty("object") CookiesObject object,
            @JsonProperty("cookies") List<String> cookies) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(cookies, "cookies");
        this.object = object;
        this.cookies = cookies;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public CookiesObject object() {
        return object;
    }

    /**
     * Array of cookie directives.
     */
    @JsonIgnore
    public List<String> cookies() {
        return cookies;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public Cookies withObject(CookiesObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * Array of cookie directives.
     */
    public Cookies withCookies(List<String> cookies) {
        Utils.checkNotNull(cookies, "cookies");
        this.cookies = cookies;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Cookies other = (Cookies) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.cookies, other.cookies);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, cookies);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Cookies.class,
                "object", object,
                "cookies", cookies);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CookiesObject object;

        private List<String> cookies;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(CookiesObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * Array of cookie directives.
         */
        public Builder cookies(List<String> cookies) {
            Utils.checkNotNull(cookies, "cookies");
            this.cookies = cookies;
            return this;
        }

        public Cookies build() {

            return new Cookies(
                object, cookies);
        }

    }
}
