/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * TotalCount
 * 
 * <p>Success
 */
public class TotalCount {

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private TotalCountObject object;

    @JsonProperty("total_count")
    private long totalCount;

    @JsonCreator
    public TotalCount(
            @JsonProperty("object") TotalCountObject object,
            @JsonProperty("total_count") long totalCount) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(totalCount, "totalCount");
        this.object = object;
        this.totalCount = totalCount;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public TotalCountObject object() {
        return object;
    }

    @JsonIgnore
    public long totalCount() {
        return totalCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public TotalCount withObject(TotalCountObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public TotalCount withTotalCount(long totalCount) {
        Utils.checkNotNull(totalCount, "totalCount");
        this.totalCount = totalCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TotalCount other = (TotalCount) o;
        return 
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.totalCount, other.totalCount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            object,
            totalCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TotalCount.class,
                "object", object,
                "totalCount", totalCount);
    }
    
    public final static class Builder {
 
        private TotalCountObject object;
 
        private Long totalCount;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(TotalCountObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder totalCount(long totalCount) {
            Utils.checkNotNull(totalCount, "totalCount");
            this.totalCount = totalCount;
            return this;
        }
        
        public TotalCount build() {
            return new TotalCount(
                object,
                totalCount);
        }
    }
}
