/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SchemasSAMLConnection {

    @JsonProperty("object")
    private SchemasSAMLConnectionObject object;

    @JsonProperty("id")
    private String id;

    @JsonProperty("name")
    private String name;

    @JsonProperty("domain")
    private String domain;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("idp_entity_id")
    private Optional<String> idpEntityId;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("idp_sso_url")
    private Optional<String> idpSsoUrl;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("idp_certificate")
    private Optional<String> idpCertificate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_metadata_url")
    private JsonNullable<String> idpMetadataUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_metadata")
    private JsonNullable<String> idpMetadata;

    @JsonProperty("acs_url")
    private String acsUrl;

    @JsonProperty("sp_entity_id")
    private String spEntityId;

    @JsonProperty("sp_metadata_url")
    private String spMetadataUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribute_mapping")
    private Optional<? extends AttributeMapping> attributeMapping;

    @JsonProperty("active")
    private boolean active;

    @JsonProperty("provider")
    private String provider;

    @JsonProperty("user_count")
    private long userCount;

    @JsonProperty("sync_user_attributes")
    private boolean syncUserAttributes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_subdomains")
    private Optional<Boolean> allowSubdomains;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_idp_initiated")
    private Optional<Boolean> allowIdpInitiated;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disable_additional_identifications")
    private Optional<Boolean> disableAdditionalIdentifications;

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    @JsonCreator
    public SchemasSAMLConnection(
            @JsonProperty("object") SchemasSAMLConnectionObject object,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("domain") String domain,
            @JsonProperty("idp_entity_id") Optional<String> idpEntityId,
            @JsonProperty("idp_sso_url") Optional<String> idpSsoUrl,
            @JsonProperty("idp_certificate") Optional<String> idpCertificate,
            @JsonProperty("idp_metadata_url") JsonNullable<String> idpMetadataUrl,
            @JsonProperty("idp_metadata") JsonNullable<String> idpMetadata,
            @JsonProperty("acs_url") String acsUrl,
            @JsonProperty("sp_entity_id") String spEntityId,
            @JsonProperty("sp_metadata_url") String spMetadataUrl,
            @JsonProperty("attribute_mapping") Optional<? extends AttributeMapping> attributeMapping,
            @JsonProperty("active") boolean active,
            @JsonProperty("provider") String provider,
            @JsonProperty("user_count") long userCount,
            @JsonProperty("sync_user_attributes") boolean syncUserAttributes,
            @JsonProperty("allow_subdomains") Optional<Boolean> allowSubdomains,
            @JsonProperty("allow_idp_initiated") Optional<Boolean> allowIdpInitiated,
            @JsonProperty("disable_additional_identifications") Optional<Boolean> disableAdditionalIdentifications,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        Utils.checkNotNull(acsUrl, "acsUrl");
        Utils.checkNotNull(spEntityId, "spEntityId");
        Utils.checkNotNull(spMetadataUrl, "spMetadataUrl");
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(userCount, "userCount");
        Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.object = object;
        this.id = id;
        this.name = name;
        this.domain = domain;
        this.idpEntityId = idpEntityId;
        this.idpSsoUrl = idpSsoUrl;
        this.idpCertificate = idpCertificate;
        this.idpMetadataUrl = idpMetadataUrl;
        this.idpMetadata = idpMetadata;
        this.acsUrl = acsUrl;
        this.spEntityId = spEntityId;
        this.spMetadataUrl = spMetadataUrl;
        this.attributeMapping = attributeMapping;
        this.active = active;
        this.provider = provider;
        this.userCount = userCount;
        this.syncUserAttributes = syncUserAttributes;
        this.allowSubdomains = allowSubdomains;
        this.allowIdpInitiated = allowIdpInitiated;
        this.disableAdditionalIdentifications = disableAdditionalIdentifications;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public SchemasSAMLConnection(
            SchemasSAMLConnectionObject object,
            String id,
            String name,
            String domain,
            String acsUrl,
            String spEntityId,
            String spMetadataUrl,
            boolean active,
            String provider,
            long userCount,
            boolean syncUserAttributes,
            long createdAt,
            long updatedAt) {
        this(object, id, name, domain, Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), acsUrl, spEntityId, spMetadataUrl, Optional.empty(), active, provider, userCount, syncUserAttributes, Optional.empty(), Optional.empty(), Optional.empty(), createdAt, updatedAt);
    }

    @JsonIgnore
    public SchemasSAMLConnectionObject object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String domain() {
        return domain;
    }

    @JsonIgnore
    public Optional<String> idpEntityId() {
        return idpEntityId;
    }

    @JsonIgnore
    public Optional<String> idpSsoUrl() {
        return idpSsoUrl;
    }

    @JsonIgnore
    public Optional<String> idpCertificate() {
        return idpCertificate;
    }

    @JsonIgnore
    public JsonNullable<String> idpMetadataUrl() {
        return idpMetadataUrl;
    }

    @JsonIgnore
    public JsonNullable<String> idpMetadata() {
        return idpMetadata;
    }

    @JsonIgnore
    public String acsUrl() {
        return acsUrl;
    }

    @JsonIgnore
    public String spEntityId() {
        return spEntityId;
    }

    @JsonIgnore
    public String spMetadataUrl() {
        return spMetadataUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AttributeMapping> attributeMapping() {
        return (Optional<AttributeMapping>) attributeMapping;
    }

    @JsonIgnore
    public boolean active() {
        return active;
    }

    @JsonIgnore
    public String provider() {
        return provider;
    }

    @JsonIgnore
    public long userCount() {
        return userCount;
    }

    @JsonIgnore
    public boolean syncUserAttributes() {
        return syncUserAttributes;
    }

    @JsonIgnore
    public Optional<Boolean> allowSubdomains() {
        return allowSubdomains;
    }

    @JsonIgnore
    public Optional<Boolean> allowIdpInitiated() {
        return allowIdpInitiated;
    }

    @JsonIgnore
    public Optional<Boolean> disableAdditionalIdentifications() {
        return disableAdditionalIdentifications;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SchemasSAMLConnection withObject(SchemasSAMLConnectionObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public SchemasSAMLConnection withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public SchemasSAMLConnection withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public SchemasSAMLConnection withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    public SchemasSAMLConnection withIdpEntityId(String idpEntityId) {
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        this.idpEntityId = Optional.ofNullable(idpEntityId);
        return this;
    }

    public SchemasSAMLConnection withIdpEntityId(Optional<String> idpEntityId) {
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        this.idpEntityId = idpEntityId;
        return this;
    }

    public SchemasSAMLConnection withIdpSsoUrl(String idpSsoUrl) {
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        this.idpSsoUrl = Optional.ofNullable(idpSsoUrl);
        return this;
    }

    public SchemasSAMLConnection withIdpSsoUrl(Optional<String> idpSsoUrl) {
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        this.idpSsoUrl = idpSsoUrl;
        return this;
    }

    public SchemasSAMLConnection withIdpCertificate(String idpCertificate) {
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        this.idpCertificate = Optional.ofNullable(idpCertificate);
        return this;
    }

    public SchemasSAMLConnection withIdpCertificate(Optional<String> idpCertificate) {
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        this.idpCertificate = idpCertificate;
        return this;
    }

    public SchemasSAMLConnection withIdpMetadataUrl(String idpMetadataUrl) {
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        this.idpMetadataUrl = JsonNullable.of(idpMetadataUrl);
        return this;
    }

    public SchemasSAMLConnection withIdpMetadataUrl(JsonNullable<String> idpMetadataUrl) {
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        this.idpMetadataUrl = idpMetadataUrl;
        return this;
    }

    public SchemasSAMLConnection withIdpMetadata(String idpMetadata) {
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        this.idpMetadata = JsonNullable.of(idpMetadata);
        return this;
    }

    public SchemasSAMLConnection withIdpMetadata(JsonNullable<String> idpMetadata) {
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        this.idpMetadata = idpMetadata;
        return this;
    }

    public SchemasSAMLConnection withAcsUrl(String acsUrl) {
        Utils.checkNotNull(acsUrl, "acsUrl");
        this.acsUrl = acsUrl;
        return this;
    }

    public SchemasSAMLConnection withSpEntityId(String spEntityId) {
        Utils.checkNotNull(spEntityId, "spEntityId");
        this.spEntityId = spEntityId;
        return this;
    }

    public SchemasSAMLConnection withSpMetadataUrl(String spMetadataUrl) {
        Utils.checkNotNull(spMetadataUrl, "spMetadataUrl");
        this.spMetadataUrl = spMetadataUrl;
        return this;
    }

    public SchemasSAMLConnection withAttributeMapping(AttributeMapping attributeMapping) {
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        this.attributeMapping = Optional.ofNullable(attributeMapping);
        return this;
    }

    public SchemasSAMLConnection withAttributeMapping(Optional<? extends AttributeMapping> attributeMapping) {
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        this.attributeMapping = attributeMapping;
        return this;
    }

    public SchemasSAMLConnection withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public SchemasSAMLConnection withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public SchemasSAMLConnection withUserCount(long userCount) {
        Utils.checkNotNull(userCount, "userCount");
        this.userCount = userCount;
        return this;
    }

    public SchemasSAMLConnection withSyncUserAttributes(boolean syncUserAttributes) {
        Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
        this.syncUserAttributes = syncUserAttributes;
        return this;
    }

    public SchemasSAMLConnection withAllowSubdomains(boolean allowSubdomains) {
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        this.allowSubdomains = Optional.ofNullable(allowSubdomains);
        return this;
    }

    public SchemasSAMLConnection withAllowSubdomains(Optional<Boolean> allowSubdomains) {
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        this.allowSubdomains = allowSubdomains;
        return this;
    }

    public SchemasSAMLConnection withAllowIdpInitiated(boolean allowIdpInitiated) {
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        this.allowIdpInitiated = Optional.ofNullable(allowIdpInitiated);
        return this;
    }

    public SchemasSAMLConnection withAllowIdpInitiated(Optional<Boolean> allowIdpInitiated) {
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        this.allowIdpInitiated = allowIdpInitiated;
        return this;
    }

    public SchemasSAMLConnection withDisableAdditionalIdentifications(boolean disableAdditionalIdentifications) {
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        this.disableAdditionalIdentifications = Optional.ofNullable(disableAdditionalIdentifications);
        return this;
    }

    public SchemasSAMLConnection withDisableAdditionalIdentifications(Optional<Boolean> disableAdditionalIdentifications) {
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        this.disableAdditionalIdentifications = disableAdditionalIdentifications;
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public SchemasSAMLConnection withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public SchemasSAMLConnection withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SchemasSAMLConnection other = (SchemasSAMLConnection) o;
        return 
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.domain, other.domain) &&
            Objects.deepEquals(this.idpEntityId, other.idpEntityId) &&
            Objects.deepEquals(this.idpSsoUrl, other.idpSsoUrl) &&
            Objects.deepEquals(this.idpCertificate, other.idpCertificate) &&
            Objects.deepEquals(this.idpMetadataUrl, other.idpMetadataUrl) &&
            Objects.deepEquals(this.idpMetadata, other.idpMetadata) &&
            Objects.deepEquals(this.acsUrl, other.acsUrl) &&
            Objects.deepEquals(this.spEntityId, other.spEntityId) &&
            Objects.deepEquals(this.spMetadataUrl, other.spMetadataUrl) &&
            Objects.deepEquals(this.attributeMapping, other.attributeMapping) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.userCount, other.userCount) &&
            Objects.deepEquals(this.syncUserAttributes, other.syncUserAttributes) &&
            Objects.deepEquals(this.allowSubdomains, other.allowSubdomains) &&
            Objects.deepEquals(this.allowIdpInitiated, other.allowIdpInitiated) &&
            Objects.deepEquals(this.disableAdditionalIdentifications, other.disableAdditionalIdentifications) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            object,
            id,
            name,
            domain,
            idpEntityId,
            idpSsoUrl,
            idpCertificate,
            idpMetadataUrl,
            idpMetadata,
            acsUrl,
            spEntityId,
            spMetadataUrl,
            attributeMapping,
            active,
            provider,
            userCount,
            syncUserAttributes,
            allowSubdomains,
            allowIdpInitiated,
            disableAdditionalIdentifications,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SchemasSAMLConnection.class,
                "object", object,
                "id", id,
                "name", name,
                "domain", domain,
                "idpEntityId", idpEntityId,
                "idpSsoUrl", idpSsoUrl,
                "idpCertificate", idpCertificate,
                "idpMetadataUrl", idpMetadataUrl,
                "idpMetadata", idpMetadata,
                "acsUrl", acsUrl,
                "spEntityId", spEntityId,
                "spMetadataUrl", spMetadataUrl,
                "attributeMapping", attributeMapping,
                "active", active,
                "provider", provider,
                "userCount", userCount,
                "syncUserAttributes", syncUserAttributes,
                "allowSubdomains", allowSubdomains,
                "allowIdpInitiated", allowIdpInitiated,
                "disableAdditionalIdentifications", disableAdditionalIdentifications,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private SchemasSAMLConnectionObject object;
 
        private String id;
 
        private String name;
 
        private String domain;
 
        private Optional<String> idpEntityId = Optional.empty();
 
        private Optional<String> idpSsoUrl = Optional.empty();
 
        private Optional<String> idpCertificate = Optional.empty();
 
        private JsonNullable<String> idpMetadataUrl = JsonNullable.undefined();
 
        private JsonNullable<String> idpMetadata = JsonNullable.undefined();
 
        private String acsUrl;
 
        private String spEntityId;
 
        private String spMetadataUrl;
 
        private Optional<? extends AttributeMapping> attributeMapping = Optional.empty();
 
        private Boolean active;
 
        private String provider;
 
        private Long userCount;
 
        private Boolean syncUserAttributes;
 
        private Optional<Boolean> allowSubdomains = Optional.empty();
 
        private Optional<Boolean> allowIdpInitiated = Optional.empty();
 
        private Optional<Boolean> disableAdditionalIdentifications = Optional.empty();
 
        private Long createdAt;
 
        private Long updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder object(SchemasSAMLConnectionObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        public Builder idpEntityId(String idpEntityId) {
            Utils.checkNotNull(idpEntityId, "idpEntityId");
            this.idpEntityId = Optional.ofNullable(idpEntityId);
            return this;
        }

        public Builder idpEntityId(Optional<String> idpEntityId) {
            Utils.checkNotNull(idpEntityId, "idpEntityId");
            this.idpEntityId = idpEntityId;
            return this;
        }

        public Builder idpSsoUrl(String idpSsoUrl) {
            Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
            this.idpSsoUrl = Optional.ofNullable(idpSsoUrl);
            return this;
        }

        public Builder idpSsoUrl(Optional<String> idpSsoUrl) {
            Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
            this.idpSsoUrl = idpSsoUrl;
            return this;
        }

        public Builder idpCertificate(String idpCertificate) {
            Utils.checkNotNull(idpCertificate, "idpCertificate");
            this.idpCertificate = Optional.ofNullable(idpCertificate);
            return this;
        }

        public Builder idpCertificate(Optional<String> idpCertificate) {
            Utils.checkNotNull(idpCertificate, "idpCertificate");
            this.idpCertificate = idpCertificate;
            return this;
        }

        public Builder idpMetadataUrl(String idpMetadataUrl) {
            Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
            this.idpMetadataUrl = JsonNullable.of(idpMetadataUrl);
            return this;
        }

        public Builder idpMetadataUrl(JsonNullable<String> idpMetadataUrl) {
            Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
            this.idpMetadataUrl = idpMetadataUrl;
            return this;
        }

        public Builder idpMetadata(String idpMetadata) {
            Utils.checkNotNull(idpMetadata, "idpMetadata");
            this.idpMetadata = JsonNullable.of(idpMetadata);
            return this;
        }

        public Builder idpMetadata(JsonNullable<String> idpMetadata) {
            Utils.checkNotNull(idpMetadata, "idpMetadata");
            this.idpMetadata = idpMetadata;
            return this;
        }

        public Builder acsUrl(String acsUrl) {
            Utils.checkNotNull(acsUrl, "acsUrl");
            this.acsUrl = acsUrl;
            return this;
        }

        public Builder spEntityId(String spEntityId) {
            Utils.checkNotNull(spEntityId, "spEntityId");
            this.spEntityId = spEntityId;
            return this;
        }

        public Builder spMetadataUrl(String spMetadataUrl) {
            Utils.checkNotNull(spMetadataUrl, "spMetadataUrl");
            this.spMetadataUrl = spMetadataUrl;
            return this;
        }

        public Builder attributeMapping(AttributeMapping attributeMapping) {
            Utils.checkNotNull(attributeMapping, "attributeMapping");
            this.attributeMapping = Optional.ofNullable(attributeMapping);
            return this;
        }

        public Builder attributeMapping(Optional<? extends AttributeMapping> attributeMapping) {
            Utils.checkNotNull(attributeMapping, "attributeMapping");
            this.attributeMapping = attributeMapping;
            return this;
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        public Builder userCount(long userCount) {
            Utils.checkNotNull(userCount, "userCount");
            this.userCount = userCount;
            return this;
        }

        public Builder syncUserAttributes(boolean syncUserAttributes) {
            Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
            this.syncUserAttributes = syncUserAttributes;
            return this;
        }

        public Builder allowSubdomains(boolean allowSubdomains) {
            Utils.checkNotNull(allowSubdomains, "allowSubdomains");
            this.allowSubdomains = Optional.ofNullable(allowSubdomains);
            return this;
        }

        public Builder allowSubdomains(Optional<Boolean> allowSubdomains) {
            Utils.checkNotNull(allowSubdomains, "allowSubdomains");
            this.allowSubdomains = allowSubdomains;
            return this;
        }

        public Builder allowIdpInitiated(boolean allowIdpInitiated) {
            Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
            this.allowIdpInitiated = Optional.ofNullable(allowIdpInitiated);
            return this;
        }

        public Builder allowIdpInitiated(Optional<Boolean> allowIdpInitiated) {
            Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
            this.allowIdpInitiated = allowIdpInitiated;
            return this;
        }

        public Builder disableAdditionalIdentifications(boolean disableAdditionalIdentifications) {
            Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
            this.disableAdditionalIdentifications = Optional.ofNullable(disableAdditionalIdentifications);
            return this;
        }

        public Builder disableAdditionalIdentifications(Optional<Boolean> disableAdditionalIdentifications) {
            Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
            this.disableAdditionalIdentifications = disableAdditionalIdentifications;
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public SchemasSAMLConnection build() {
            return new SchemasSAMLConnection(
                object,
                id,
                name,
                domain,
                idpEntityId,
                idpSsoUrl,
                idpCertificate,
                idpMetadataUrl,
                idpMetadata,
                acsUrl,
                spEntityId,
                spMetadataUrl,
                attributeMapping,
                active,
                provider,
                userCount,
                syncUserAttributes,
                allowSubdomains,
                allowIdpInitiated,
                disableAdditionalIdentifications,
                createdAt,
                updatedAt);
        }
    }
}

