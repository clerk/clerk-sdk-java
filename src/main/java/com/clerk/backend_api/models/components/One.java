/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class One {

    @JsonProperty("object")
    private SchemasSAMLConnectionObject object;


    @JsonProperty("id")
    private String id;


    @JsonProperty("name")
    private String name;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonProperty("domain")
    @Deprecated
    private String domain;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains")
    private Optional<? extends List<String>> domains;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("idp_entity_id")
    private Optional<String> idpEntityId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("idp_sso_url")
    private Optional<String> idpSsoUrl;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("idp_certificate")
    private Optional<String> idpCertificate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_metadata_url")
    private JsonNullable<String> idpMetadataUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_metadata")
    private JsonNullable<String> idpMetadata;


    @JsonProperty("acs_url")
    private String acsUrl;


    @JsonProperty("sp_entity_id")
    private String spEntityId;


    @JsonProperty("sp_metadata_url")
    private String spMetadataUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_id")
    private JsonNullable<String> organizationId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribute_mapping")
    private Optional<? extends SAMLConnectionAttributeMapping> attributeMapping;


    @JsonProperty("active")
    private boolean active;


    @JsonProperty("provider")
    private String provider;


    @JsonProperty("user_count")
    private long userCount;


    @JsonProperty("sync_user_attributes")
    private boolean syncUserAttributes;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_subdomains")
    private Optional<Boolean> allowSubdomains;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_idp_initiated")
    private Optional<Boolean> allowIdpInitiated;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disable_additional_identifications")
    private Optional<Boolean> disableAdditionalIdentifications;

    /**
     * Unix timestamp of creation.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of last update.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    @JsonCreator
    public One(
            @JsonProperty("object") SchemasSAMLConnectionObject object,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("domain") String domain,
            @JsonProperty("domains") Optional<? extends List<String>> domains,
            @JsonProperty("idp_entity_id") Optional<String> idpEntityId,
            @JsonProperty("idp_sso_url") Optional<String> idpSsoUrl,
            @JsonProperty("idp_certificate") Optional<String> idpCertificate,
            @JsonProperty("idp_metadata_url") JsonNullable<String> idpMetadataUrl,
            @JsonProperty("idp_metadata") JsonNullable<String> idpMetadata,
            @JsonProperty("acs_url") String acsUrl,
            @JsonProperty("sp_entity_id") String spEntityId,
            @JsonProperty("sp_metadata_url") String spMetadataUrl,
            @JsonProperty("organization_id") JsonNullable<String> organizationId,
            @JsonProperty("attribute_mapping") Optional<? extends SAMLConnectionAttributeMapping> attributeMapping,
            @JsonProperty("active") boolean active,
            @JsonProperty("provider") String provider,
            @JsonProperty("user_count") long userCount,
            @JsonProperty("sync_user_attributes") boolean syncUserAttributes,
            @JsonProperty("allow_subdomains") Optional<Boolean> allowSubdomains,
            @JsonProperty("allow_idp_initiated") Optional<Boolean> allowIdpInitiated,
            @JsonProperty("disable_additional_identifications") Optional<Boolean> disableAdditionalIdentifications,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(domains, "domains");
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        Utils.checkNotNull(acsUrl, "acsUrl");
        Utils.checkNotNull(spEntityId, "spEntityId");
        Utils.checkNotNull(spMetadataUrl, "spMetadataUrl");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(userCount, "userCount");
        Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.object = object;
        this.id = id;
        this.name = name;
        this.domain = domain;
        this.domains = domains;
        this.idpEntityId = idpEntityId;
        this.idpSsoUrl = idpSsoUrl;
        this.idpCertificate = idpCertificate;
        this.idpMetadataUrl = idpMetadataUrl;
        this.idpMetadata = idpMetadata;
        this.acsUrl = acsUrl;
        this.spEntityId = spEntityId;
        this.spMetadataUrl = spMetadataUrl;
        this.organizationId = organizationId;
        this.attributeMapping = attributeMapping;
        this.active = active;
        this.provider = provider;
        this.userCount = userCount;
        this.syncUserAttributes = syncUserAttributes;
        this.allowSubdomains = allowSubdomains;
        this.allowIdpInitiated = allowIdpInitiated;
        this.disableAdditionalIdentifications = disableAdditionalIdentifications;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public One(
            SchemasSAMLConnectionObject object,
            String id,
            String name,
            String domain,
            String acsUrl,
            String spEntityId,
            String spMetadataUrl,
            boolean active,
            String provider,
            long userCount,
            boolean syncUserAttributes,
            long createdAt,
            long updatedAt) {
        this(object, id, name,
            domain, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), acsUrl, spEntityId,
            spMetadataUrl, JsonNullable.undefined(), Optional.empty(),
            active, provider, userCount,
            syncUserAttributes, Optional.empty(), Optional.empty(),
            Optional.empty(), createdAt, updatedAt);
    }

    @JsonIgnore
    public SchemasSAMLConnectionObject object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public String domain() {
        return domain;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> domains() {
        return (Optional<List<String>>) domains;
    }

    @JsonIgnore
    public Optional<String> idpEntityId() {
        return idpEntityId;
    }

    @JsonIgnore
    public Optional<String> idpSsoUrl() {
        return idpSsoUrl;
    }

    @JsonIgnore
    public Optional<String> idpCertificate() {
        return idpCertificate;
    }

    @JsonIgnore
    public JsonNullable<String> idpMetadataUrl() {
        return idpMetadataUrl;
    }

    @JsonIgnore
    public JsonNullable<String> idpMetadata() {
        return idpMetadata;
    }

    @JsonIgnore
    public String acsUrl() {
        return acsUrl;
    }

    @JsonIgnore
    public String spEntityId() {
        return spEntityId;
    }

    @JsonIgnore
    public String spMetadataUrl() {
        return spMetadataUrl;
    }

    @JsonIgnore
    public JsonNullable<String> organizationId() {
        return organizationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SAMLConnectionAttributeMapping> attributeMapping() {
        return (Optional<SAMLConnectionAttributeMapping>) attributeMapping;
    }

    @JsonIgnore
    public boolean active() {
        return active;
    }

    @JsonIgnore
    public String provider() {
        return provider;
    }

    @JsonIgnore
    public long userCount() {
        return userCount;
    }

    @JsonIgnore
    public boolean syncUserAttributes() {
        return syncUserAttributes;
    }

    @JsonIgnore
    public Optional<Boolean> allowSubdomains() {
        return allowSubdomains;
    }

    @JsonIgnore
    public Optional<Boolean> allowIdpInitiated() {
        return allowIdpInitiated;
    }

    @JsonIgnore
    public Optional<Boolean> disableAdditionalIdentifications() {
        return disableAdditionalIdentifications;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public One withObject(SchemasSAMLConnectionObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public One withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public One withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public One withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    public One withDomains(List<String> domains) {
        Utils.checkNotNull(domains, "domains");
        this.domains = Optional.ofNullable(domains);
        return this;
    }


    public One withDomains(Optional<? extends List<String>> domains) {
        Utils.checkNotNull(domains, "domains");
        this.domains = domains;
        return this;
    }

    public One withIdpEntityId(String idpEntityId) {
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        this.idpEntityId = Optional.ofNullable(idpEntityId);
        return this;
    }


    public One withIdpEntityId(Optional<String> idpEntityId) {
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        this.idpEntityId = idpEntityId;
        return this;
    }

    public One withIdpSsoUrl(String idpSsoUrl) {
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        this.idpSsoUrl = Optional.ofNullable(idpSsoUrl);
        return this;
    }


    public One withIdpSsoUrl(Optional<String> idpSsoUrl) {
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        this.idpSsoUrl = idpSsoUrl;
        return this;
    }

    public One withIdpCertificate(String idpCertificate) {
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        this.idpCertificate = Optional.ofNullable(idpCertificate);
        return this;
    }


    public One withIdpCertificate(Optional<String> idpCertificate) {
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        this.idpCertificate = idpCertificate;
        return this;
    }

    public One withIdpMetadataUrl(String idpMetadataUrl) {
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        this.idpMetadataUrl = JsonNullable.of(idpMetadataUrl);
        return this;
    }

    public One withIdpMetadataUrl(JsonNullable<String> idpMetadataUrl) {
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        this.idpMetadataUrl = idpMetadataUrl;
        return this;
    }

    public One withIdpMetadata(String idpMetadata) {
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        this.idpMetadata = JsonNullable.of(idpMetadata);
        return this;
    }

    public One withIdpMetadata(JsonNullable<String> idpMetadata) {
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        this.idpMetadata = idpMetadata;
        return this;
    }

    public One withAcsUrl(String acsUrl) {
        Utils.checkNotNull(acsUrl, "acsUrl");
        this.acsUrl = acsUrl;
        return this;
    }

    public One withSpEntityId(String spEntityId) {
        Utils.checkNotNull(spEntityId, "spEntityId");
        this.spEntityId = spEntityId;
        return this;
    }

    public One withSpMetadataUrl(String spMetadataUrl) {
        Utils.checkNotNull(spMetadataUrl, "spMetadataUrl");
        this.spMetadataUrl = spMetadataUrl;
        return this;
    }

    public One withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = JsonNullable.of(organizationId);
        return this;
    }

    public One withOrganizationId(JsonNullable<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public One withAttributeMapping(SAMLConnectionAttributeMapping attributeMapping) {
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        this.attributeMapping = Optional.ofNullable(attributeMapping);
        return this;
    }


    public One withAttributeMapping(Optional<? extends SAMLConnectionAttributeMapping> attributeMapping) {
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        this.attributeMapping = attributeMapping;
        return this;
    }

    public One withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public One withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public One withUserCount(long userCount) {
        Utils.checkNotNull(userCount, "userCount");
        this.userCount = userCount;
        return this;
    }

    public One withSyncUserAttributes(boolean syncUserAttributes) {
        Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
        this.syncUserAttributes = syncUserAttributes;
        return this;
    }

    public One withAllowSubdomains(boolean allowSubdomains) {
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        this.allowSubdomains = Optional.ofNullable(allowSubdomains);
        return this;
    }


    public One withAllowSubdomains(Optional<Boolean> allowSubdomains) {
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        this.allowSubdomains = allowSubdomains;
        return this;
    }

    public One withAllowIdpInitiated(boolean allowIdpInitiated) {
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        this.allowIdpInitiated = Optional.ofNullable(allowIdpInitiated);
        return this;
    }


    public One withAllowIdpInitiated(Optional<Boolean> allowIdpInitiated) {
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        this.allowIdpInitiated = allowIdpInitiated;
        return this;
    }

    public One withDisableAdditionalIdentifications(boolean disableAdditionalIdentifications) {
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        this.disableAdditionalIdentifications = Optional.ofNullable(disableAdditionalIdentifications);
        return this;
    }


    public One withDisableAdditionalIdentifications(Optional<Boolean> disableAdditionalIdentifications) {
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        this.disableAdditionalIdentifications = disableAdditionalIdentifications;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public One withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public One withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        One other = (One) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.domain, other.domain) &&
            Utils.enhancedDeepEquals(this.domains, other.domains) &&
            Utils.enhancedDeepEquals(this.idpEntityId, other.idpEntityId) &&
            Utils.enhancedDeepEquals(this.idpSsoUrl, other.idpSsoUrl) &&
            Utils.enhancedDeepEquals(this.idpCertificate, other.idpCertificate) &&
            Utils.enhancedDeepEquals(this.idpMetadataUrl, other.idpMetadataUrl) &&
            Utils.enhancedDeepEquals(this.idpMetadata, other.idpMetadata) &&
            Utils.enhancedDeepEquals(this.acsUrl, other.acsUrl) &&
            Utils.enhancedDeepEquals(this.spEntityId, other.spEntityId) &&
            Utils.enhancedDeepEquals(this.spMetadataUrl, other.spMetadataUrl) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.attributeMapping, other.attributeMapping) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.userCount, other.userCount) &&
            Utils.enhancedDeepEquals(this.syncUserAttributes, other.syncUserAttributes) &&
            Utils.enhancedDeepEquals(this.allowSubdomains, other.allowSubdomains) &&
            Utils.enhancedDeepEquals(this.allowIdpInitiated, other.allowIdpInitiated) &&
            Utils.enhancedDeepEquals(this.disableAdditionalIdentifications, other.disableAdditionalIdentifications) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, name,
            domain, domains, idpEntityId,
            idpSsoUrl, idpCertificate, idpMetadataUrl,
            idpMetadata, acsUrl, spEntityId,
            spMetadataUrl, organizationId, attributeMapping,
            active, provider, userCount,
            syncUserAttributes, allowSubdomains, allowIdpInitiated,
            disableAdditionalIdentifications, createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(One.class,
                "object", object,
                "id", id,
                "name", name,
                "domain", domain,
                "domains", domains,
                "idpEntityId", idpEntityId,
                "idpSsoUrl", idpSsoUrl,
                "idpCertificate", idpCertificate,
                "idpMetadataUrl", idpMetadataUrl,
                "idpMetadata", idpMetadata,
                "acsUrl", acsUrl,
                "spEntityId", spEntityId,
                "spMetadataUrl", spMetadataUrl,
                "organizationId", organizationId,
                "attributeMapping", attributeMapping,
                "active", active,
                "provider", provider,
                "userCount", userCount,
                "syncUserAttributes", syncUserAttributes,
                "allowSubdomains", allowSubdomains,
                "allowIdpInitiated", allowIdpInitiated,
                "disableAdditionalIdentifications", disableAdditionalIdentifications,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private SchemasSAMLConnectionObject object;

        private String id;

        private String name;

        @Deprecated
        private String domain;

        private Optional<? extends List<String>> domains = Optional.empty();

        private Optional<String> idpEntityId = Optional.empty();

        private Optional<String> idpSsoUrl = Optional.empty();

        private Optional<String> idpCertificate = Optional.empty();

        private JsonNullable<String> idpMetadataUrl = JsonNullable.undefined();

        private JsonNullable<String> idpMetadata = JsonNullable.undefined();

        private String acsUrl;

        private String spEntityId;

        private String spMetadataUrl;

        private JsonNullable<String> organizationId = JsonNullable.undefined();

        private Optional<? extends SAMLConnectionAttributeMapping> attributeMapping = Optional.empty();

        private Boolean active;

        private String provider;

        private Long userCount;

        private Boolean syncUserAttributes;

        private Optional<Boolean> allowSubdomains = Optional.empty();

        private Optional<Boolean> allowIdpInitiated = Optional.empty();

        private Optional<Boolean> disableAdditionalIdentifications = Optional.empty();

        private Long createdAt;

        private Long updatedAt;

        private Builder() {
          // force use of static builder() method
        }


        public Builder object(SchemasSAMLConnectionObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }


        public Builder domains(List<String> domains) {
            Utils.checkNotNull(domains, "domains");
            this.domains = Optional.ofNullable(domains);
            return this;
        }

        public Builder domains(Optional<? extends List<String>> domains) {
            Utils.checkNotNull(domains, "domains");
            this.domains = domains;
            return this;
        }


        public Builder idpEntityId(String idpEntityId) {
            Utils.checkNotNull(idpEntityId, "idpEntityId");
            this.idpEntityId = Optional.ofNullable(idpEntityId);
            return this;
        }

        public Builder idpEntityId(Optional<String> idpEntityId) {
            Utils.checkNotNull(idpEntityId, "idpEntityId");
            this.idpEntityId = idpEntityId;
            return this;
        }


        public Builder idpSsoUrl(String idpSsoUrl) {
            Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
            this.idpSsoUrl = Optional.ofNullable(idpSsoUrl);
            return this;
        }

        public Builder idpSsoUrl(Optional<String> idpSsoUrl) {
            Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
            this.idpSsoUrl = idpSsoUrl;
            return this;
        }


        public Builder idpCertificate(String idpCertificate) {
            Utils.checkNotNull(idpCertificate, "idpCertificate");
            this.idpCertificate = Optional.ofNullable(idpCertificate);
            return this;
        }

        public Builder idpCertificate(Optional<String> idpCertificate) {
            Utils.checkNotNull(idpCertificate, "idpCertificate");
            this.idpCertificate = idpCertificate;
            return this;
        }


        public Builder idpMetadataUrl(String idpMetadataUrl) {
            Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
            this.idpMetadataUrl = JsonNullable.of(idpMetadataUrl);
            return this;
        }

        public Builder idpMetadataUrl(JsonNullable<String> idpMetadataUrl) {
            Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
            this.idpMetadataUrl = idpMetadataUrl;
            return this;
        }


        public Builder idpMetadata(String idpMetadata) {
            Utils.checkNotNull(idpMetadata, "idpMetadata");
            this.idpMetadata = JsonNullable.of(idpMetadata);
            return this;
        }

        public Builder idpMetadata(JsonNullable<String> idpMetadata) {
            Utils.checkNotNull(idpMetadata, "idpMetadata");
            this.idpMetadata = idpMetadata;
            return this;
        }


        public Builder acsUrl(String acsUrl) {
            Utils.checkNotNull(acsUrl, "acsUrl");
            this.acsUrl = acsUrl;
            return this;
        }


        public Builder spEntityId(String spEntityId) {
            Utils.checkNotNull(spEntityId, "spEntityId");
            this.spEntityId = spEntityId;
            return this;
        }


        public Builder spMetadataUrl(String spMetadataUrl) {
            Utils.checkNotNull(spMetadataUrl, "spMetadataUrl");
            this.spMetadataUrl = spMetadataUrl;
            return this;
        }


        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = JsonNullable.of(organizationId);
            return this;
        }

        public Builder organizationId(JsonNullable<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        public Builder attributeMapping(SAMLConnectionAttributeMapping attributeMapping) {
            Utils.checkNotNull(attributeMapping, "attributeMapping");
            this.attributeMapping = Optional.ofNullable(attributeMapping);
            return this;
        }

        public Builder attributeMapping(Optional<? extends SAMLConnectionAttributeMapping> attributeMapping) {
            Utils.checkNotNull(attributeMapping, "attributeMapping");
            this.attributeMapping = attributeMapping;
            return this;
        }


        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }


        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        public Builder userCount(long userCount) {
            Utils.checkNotNull(userCount, "userCount");
            this.userCount = userCount;
            return this;
        }


        public Builder syncUserAttributes(boolean syncUserAttributes) {
            Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
            this.syncUserAttributes = syncUserAttributes;
            return this;
        }


        public Builder allowSubdomains(boolean allowSubdomains) {
            Utils.checkNotNull(allowSubdomains, "allowSubdomains");
            this.allowSubdomains = Optional.ofNullable(allowSubdomains);
            return this;
        }

        public Builder allowSubdomains(Optional<Boolean> allowSubdomains) {
            Utils.checkNotNull(allowSubdomains, "allowSubdomains");
            this.allowSubdomains = allowSubdomains;
            return this;
        }


        public Builder allowIdpInitiated(boolean allowIdpInitiated) {
            Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
            this.allowIdpInitiated = Optional.ofNullable(allowIdpInitiated);
            return this;
        }

        public Builder allowIdpInitiated(Optional<Boolean> allowIdpInitiated) {
            Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
            this.allowIdpInitiated = allowIdpInitiated;
            return this;
        }


        public Builder disableAdditionalIdentifications(boolean disableAdditionalIdentifications) {
            Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
            this.disableAdditionalIdentifications = Optional.ofNullable(disableAdditionalIdentifications);
            return this;
        }

        public Builder disableAdditionalIdentifications(Optional<Boolean> disableAdditionalIdentifications) {
            Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
            this.disableAdditionalIdentifications = disableAdditionalIdentifications;
            return this;
        }


        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public One build() {

            return new One(
                object, id, name,
                domain, domains, idpEntityId,
                idpSsoUrl, idpCertificate, idpMetadataUrl,
                idpMetadata, acsUrl, spEntityId,
                spMetadataUrl, organizationId, attributeMapping,
                active, provider, userCount,
                syncUserAttributes, allowSubdomains, allowIdpInitiated,
                disableAdditionalIdentifications, createdAt, updatedAt);
        }

    }
}
