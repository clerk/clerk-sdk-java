/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class WaitlistEntry {

    @JsonProperty("object")
    private WaitlistEntryObject object;

    @JsonProperty("id")
    private String id;

    @JsonProperty("email_address")
    private String emailAddress;

    @JsonProperty("status")
    private WaitlistEntryStatus status;

    /**
     * Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_locked")
    private Optional<Boolean> isLocked;

    /**
     * Unix timestamp of creation.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of last update.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invitation")
    private JsonNullable<? extends WaitlistEntryInvitation> invitation;

    @JsonCreator
    public WaitlistEntry(
            @JsonProperty("object") WaitlistEntryObject object,
            @JsonProperty("id") String id,
            @JsonProperty("email_address") String emailAddress,
            @JsonProperty("status") WaitlistEntryStatus status,
            @JsonProperty("is_locked") Optional<Boolean> isLocked,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt,
            @JsonProperty("invitation") JsonNullable<? extends WaitlistEntryInvitation> invitation) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(isLocked, "isLocked");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(invitation, "invitation");
        this.object = object;
        this.id = id;
        this.emailAddress = emailAddress;
        this.status = status;
        this.isLocked = isLocked;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.invitation = invitation;
    }
    
    public WaitlistEntry(
            WaitlistEntryObject object,
            String id,
            String emailAddress,
            WaitlistEntryStatus status,
            long createdAt,
            long updatedAt) {
        this(object, id, emailAddress, status, Optional.empty(), createdAt, updatedAt, JsonNullable.undefined());
    }

    @JsonIgnore
    public WaitlistEntryObject object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String emailAddress() {
        return emailAddress;
    }

    @JsonIgnore
    public WaitlistEntryStatus status() {
        return status;
    }

    /**
     * Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.
     */
    @JsonIgnore
    public Optional<Boolean> isLocked() {
        return isLocked;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<WaitlistEntryInvitation> invitation() {
        return (JsonNullable<WaitlistEntryInvitation>) invitation;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public WaitlistEntry withObject(WaitlistEntryObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public WaitlistEntry withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public WaitlistEntry withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    public WaitlistEntry withStatus(WaitlistEntryStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.
     */
    public WaitlistEntry withIsLocked(boolean isLocked) {
        Utils.checkNotNull(isLocked, "isLocked");
        this.isLocked = Optional.ofNullable(isLocked);
        return this;
    }

    /**
     * Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.
     */
    public WaitlistEntry withIsLocked(Optional<Boolean> isLocked) {
        Utils.checkNotNull(isLocked, "isLocked");
        this.isLocked = isLocked;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public WaitlistEntry withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public WaitlistEntry withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public WaitlistEntry withInvitation(WaitlistEntryInvitation invitation) {
        Utils.checkNotNull(invitation, "invitation");
        this.invitation = JsonNullable.of(invitation);
        return this;
    }

    public WaitlistEntry withInvitation(JsonNullable<? extends WaitlistEntryInvitation> invitation) {
        Utils.checkNotNull(invitation, "invitation");
        this.invitation = invitation;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WaitlistEntry other = (WaitlistEntry) o;
        return 
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.isLocked, other.isLocked) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.invitation, other.invitation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            object,
            id,
            emailAddress,
            status,
            isLocked,
            createdAt,
            updatedAt,
            invitation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WaitlistEntry.class,
                "object", object,
                "id", id,
                "emailAddress", emailAddress,
                "status", status,
                "isLocked", isLocked,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "invitation", invitation);
    }
    
    public final static class Builder {
 
        private WaitlistEntryObject object;
 
        private String id;
 
        private String emailAddress;
 
        private WaitlistEntryStatus status;
 
        private Optional<Boolean> isLocked = Optional.empty();
 
        private Long createdAt;
 
        private Long updatedAt;
 
        private JsonNullable<? extends WaitlistEntryInvitation> invitation = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder object(WaitlistEntryObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder status(WaitlistEntryStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.
         */
        public Builder isLocked(boolean isLocked) {
            Utils.checkNotNull(isLocked, "isLocked");
            this.isLocked = Optional.ofNullable(isLocked);
            return this;
        }

        /**
         * Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.
         */
        public Builder isLocked(Optional<Boolean> isLocked) {
            Utils.checkNotNull(isLocked, "isLocked");
            this.isLocked = isLocked;
            return this;
        }

        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder invitation(WaitlistEntryInvitation invitation) {
            Utils.checkNotNull(invitation, "invitation");
            this.invitation = JsonNullable.of(invitation);
            return this;
        }

        public Builder invitation(JsonNullable<? extends WaitlistEntryInvitation> invitation) {
            Utils.checkNotNull(invitation, "invitation");
            this.invitation = invitation;
            return this;
        }
        
        public WaitlistEntry build() {
            return new WaitlistEntry(
                object,
                id,
                emailAddress,
                status,
                isLocked,
                createdAt,
                updatedAt,
                invitation);
        }
    }
}
