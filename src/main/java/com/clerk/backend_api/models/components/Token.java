/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;


public class Token {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private TokenObject object;

    /**
     * String representing the encoded JSON Web Token (JWT) value.
     */
    @JsonProperty("jwt")
    private String jwt;

    @JsonCreator
    public Token(
            @JsonProperty("object") TokenObject object,
            @JsonProperty("jwt") String jwt) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(jwt, "jwt");
        this.object = object;
        this.jwt = jwt;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public TokenObject object() {
        return object;
    }

    /**
     * String representing the encoded JSON Web Token (JWT) value.
     */
    @JsonIgnore
    public String jwt() {
        return jwt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public Token withObject(TokenObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * String representing the encoded JSON Web Token (JWT) value.
     */
    public Token withJwt(String jwt) {
        Utils.checkNotNull(jwt, "jwt");
        this.jwt = jwt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Token other = (Token) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.jwt, other.jwt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, jwt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Token.class,
                "object", object,
                "jwt", jwt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private TokenObject object;

        private String jwt;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(TokenObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * String representing the encoded JSON Web Token (JWT) value.
         */
        public Builder jwt(String jwt) {
            Utils.checkNotNull(jwt, "jwt");
            this.jwt = jwt;
            return this;
        }

        public Token build() {

            return new Token(
                object, jwt);
        }

    }
}
