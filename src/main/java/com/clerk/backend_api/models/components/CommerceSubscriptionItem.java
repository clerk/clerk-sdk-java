/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CommerceSubscriptionItem {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private CommerceSubscriptionItemObject object;

    /**
     * Unique identifier for the subscription item.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Unique identifier for the Clerk instance.
     */
    @JsonProperty("instance_id")
    private String instanceId;

    /**
     * Current status of the subscription item.
     */
    @JsonProperty("status")
    private CommerceSubscriptionItemStatus status;

    /**
     * Credit information (only available in PaymentAttempt events).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credit")
    private JsonNullable<? extends Credit> credit;

    /**
     * Unique identifier for the associated plan.
     */
    @JsonProperty("plan_id")
    private String planId;

    /**
     * The associated commerce plan.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("plan")
    private Optional<? extends Plan> plan;

    /**
     * The billing period for this subscription.
     */
    @JsonProperty("plan_period")
    private PlanPeriod planPeriod;

    /**
     * Unique identifier for the payment source.
     */
    @JsonProperty("payment_source_id")
    private String paymentSourceId;

    /**
     * The payment source associated with this subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_source")
    private JsonNullable<? extends PaymentSource> paymentSource;

    /**
     * Total amount paid over the lifetime of this subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifetime_paid")
    private JsonNullable<? extends LifetimePaid> lifetimePaid;

    /**
     * Current amount for this subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends Amount> amount;

    /**
     * Information about the next invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_invoice")
    private JsonNullable<? extends NextInvoice> nextInvoice;

    /**
     * Information about the next payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_payment")
    private JsonNullable<? extends NextPayment> nextPayment;

    /**
     * Unique identifier for the payer.
     */
    @JsonProperty("payer_id")
    private String payerId;

    /**
     * The payer associated with this subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payer")
    private JsonNullable<? extends Payer> payer;

    /**
     * Whether this subscription is currently on a free trial.
     */
    @JsonProperty("is_free_trial")
    private boolean isFreeTrial;

    /**
     * Unix timestamp (in milliseconds) when the current period started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period_start")
    private JsonNullable<Long> periodStart;

    /**
     * Unix timestamp (in milliseconds) when the current period ends.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period_end")
    private JsonNullable<Long> periodEnd;

    /**
     * Date used for proration calculations.
     */
    @JsonProperty("proration_date")
    private String prorationDate;

    /**
     * Unix timestamp (in milliseconds) when the subscription was canceled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceled_at")
    private JsonNullable<Long> canceledAt;

    /**
     * Unix timestamp (in milliseconds) when the subscription became past due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("past_due_at")
    private JsonNullable<Long> pastDueAt;

    /**
     * Unix timestamp (in milliseconds) when the subscription ended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ended_at")
    private JsonNullable<Long> endedAt;

    /**
     * Unix timestamp (in milliseconds) when the subscription was created.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp (in milliseconds) when the subscription was last updated.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    @JsonCreator
    public CommerceSubscriptionItem(
            @JsonProperty("object") CommerceSubscriptionItemObject object,
            @JsonProperty("id") String id,
            @JsonProperty("instance_id") String instanceId,
            @JsonProperty("status") CommerceSubscriptionItemStatus status,
            @JsonProperty("credit") JsonNullable<? extends Credit> credit,
            @JsonProperty("plan_id") String planId,
            @JsonProperty("plan") Optional<? extends Plan> plan,
            @JsonProperty("plan_period") PlanPeriod planPeriod,
            @JsonProperty("payment_source_id") String paymentSourceId,
            @JsonProperty("payment_source") JsonNullable<? extends PaymentSource> paymentSource,
            @JsonProperty("lifetime_paid") JsonNullable<? extends LifetimePaid> lifetimePaid,
            @JsonProperty("amount") JsonNullable<? extends Amount> amount,
            @JsonProperty("next_invoice") JsonNullable<? extends NextInvoice> nextInvoice,
            @JsonProperty("next_payment") JsonNullable<? extends NextPayment> nextPayment,
            @JsonProperty("payer_id") String payerId,
            @JsonProperty("payer") JsonNullable<? extends Payer> payer,
            @JsonProperty("is_free_trial") boolean isFreeTrial,
            @JsonProperty("period_start") JsonNullable<Long> periodStart,
            @JsonProperty("period_end") JsonNullable<Long> periodEnd,
            @JsonProperty("proration_date") String prorationDate,
            @JsonProperty("canceled_at") JsonNullable<Long> canceledAt,
            @JsonProperty("past_due_at") JsonNullable<Long> pastDueAt,
            @JsonProperty("ended_at") JsonNullable<Long> endedAt,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(instanceId, "instanceId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(credit, "credit");
        Utils.checkNotNull(planId, "planId");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(planPeriod, "planPeriod");
        Utils.checkNotNull(paymentSourceId, "paymentSourceId");
        Utils.checkNotNull(paymentSource, "paymentSource");
        Utils.checkNotNull(lifetimePaid, "lifetimePaid");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(nextInvoice, "nextInvoice");
        Utils.checkNotNull(nextPayment, "nextPayment");
        Utils.checkNotNull(payerId, "payerId");
        Utils.checkNotNull(payer, "payer");
        Utils.checkNotNull(isFreeTrial, "isFreeTrial");
        Utils.checkNotNull(periodStart, "periodStart");
        Utils.checkNotNull(periodEnd, "periodEnd");
        Utils.checkNotNull(prorationDate, "prorationDate");
        Utils.checkNotNull(canceledAt, "canceledAt");
        Utils.checkNotNull(pastDueAt, "pastDueAt");
        Utils.checkNotNull(endedAt, "endedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.object = object;
        this.id = id;
        this.instanceId = instanceId;
        this.status = status;
        this.credit = credit;
        this.planId = planId;
        this.plan = plan;
        this.planPeriod = planPeriod;
        this.paymentSourceId = paymentSourceId;
        this.paymentSource = paymentSource;
        this.lifetimePaid = lifetimePaid;
        this.amount = amount;
        this.nextInvoice = nextInvoice;
        this.nextPayment = nextPayment;
        this.payerId = payerId;
        this.payer = payer;
        this.isFreeTrial = isFreeTrial;
        this.periodStart = periodStart;
        this.periodEnd = periodEnd;
        this.prorationDate = prorationDate;
        this.canceledAt = canceledAt;
        this.pastDueAt = pastDueAt;
        this.endedAt = endedAt;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public CommerceSubscriptionItem(
            CommerceSubscriptionItemObject object,
            String id,
            String instanceId,
            CommerceSubscriptionItemStatus status,
            String planId,
            PlanPeriod planPeriod,
            String paymentSourceId,
            String payerId,
            boolean isFreeTrial,
            String prorationDate,
            long createdAt,
            long updatedAt) {
        this(object, id, instanceId,
            status, JsonNullable.undefined(), planId,
            Optional.empty(), planPeriod, paymentSourceId,
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), payerId,
            JsonNullable.undefined(), isFreeTrial, JsonNullable.undefined(),
            JsonNullable.undefined(), prorationDate, JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), createdAt,
            updatedAt);
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public CommerceSubscriptionItemObject object() {
        return object;
    }

    /**
     * Unique identifier for the subscription item.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Unique identifier for the Clerk instance.
     */
    @JsonIgnore
    public String instanceId() {
        return instanceId;
    }

    /**
     * Current status of the subscription item.
     */
    @JsonIgnore
    public CommerceSubscriptionItemStatus status() {
        return status;
    }

    /**
     * Credit information (only available in PaymentAttempt events).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Credit> credit() {
        return (JsonNullable<Credit>) credit;
    }

    /**
     * Unique identifier for the associated plan.
     */
    @JsonIgnore
    public String planId() {
        return planId;
    }

    /**
     * The associated commerce plan.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Plan> plan() {
        return (Optional<Plan>) plan;
    }

    /**
     * The billing period for this subscription.
     */
    @JsonIgnore
    public PlanPeriod planPeriod() {
        return planPeriod;
    }

    /**
     * Unique identifier for the payment source.
     */
    @JsonIgnore
    public String paymentSourceId() {
        return paymentSourceId;
    }

    /**
     * The payment source associated with this subscription.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PaymentSource> paymentSource() {
        return (JsonNullable<PaymentSource>) paymentSource;
    }

    /**
     * Total amount paid over the lifetime of this subscription.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LifetimePaid> lifetimePaid() {
        return (JsonNullable<LifetimePaid>) lifetimePaid;
    }

    /**
     * Current amount for this subscription.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Amount> amount() {
        return (JsonNullable<Amount>) amount;
    }

    /**
     * Information about the next invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<NextInvoice> nextInvoice() {
        return (JsonNullable<NextInvoice>) nextInvoice;
    }

    /**
     * Information about the next payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<NextPayment> nextPayment() {
        return (JsonNullable<NextPayment>) nextPayment;
    }

    /**
     * Unique identifier for the payer.
     */
    @JsonIgnore
    public String payerId() {
        return payerId;
    }

    /**
     * The payer associated with this subscription.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Payer> payer() {
        return (JsonNullable<Payer>) payer;
    }

    /**
     * Whether this subscription is currently on a free trial.
     */
    @JsonIgnore
    public boolean isFreeTrial() {
        return isFreeTrial;
    }

    /**
     * Unix timestamp (in milliseconds) when the current period started.
     */
    @JsonIgnore
    public JsonNullable<Long> periodStart() {
        return periodStart;
    }

    /**
     * Unix timestamp (in milliseconds) when the current period ends.
     */
    @JsonIgnore
    public JsonNullable<Long> periodEnd() {
        return periodEnd;
    }

    /**
     * Date used for proration calculations.
     */
    @JsonIgnore
    public String prorationDate() {
        return prorationDate;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription was canceled.
     */
    @JsonIgnore
    public JsonNullable<Long> canceledAt() {
        return canceledAt;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription became past due.
     */
    @JsonIgnore
    public JsonNullable<Long> pastDueAt() {
        return pastDueAt;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription ended.
     */
    @JsonIgnore
    public JsonNullable<Long> endedAt() {
        return endedAt;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription was created.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription was last updated.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public CommerceSubscriptionItem withObject(CommerceSubscriptionItemObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * Unique identifier for the subscription item.
     */
    public CommerceSubscriptionItem withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Unique identifier for the Clerk instance.
     */
    public CommerceSubscriptionItem withInstanceId(String instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = instanceId;
        return this;
    }

    /**
     * Current status of the subscription item.
     */
    public CommerceSubscriptionItem withStatus(CommerceSubscriptionItemStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Credit information (only available in PaymentAttempt events).
     */
    public CommerceSubscriptionItem withCredit(Credit credit) {
        Utils.checkNotNull(credit, "credit");
        this.credit = JsonNullable.of(credit);
        return this;
    }

    /**
     * Credit information (only available in PaymentAttempt events).
     */
    public CommerceSubscriptionItem withCredit(JsonNullable<? extends Credit> credit) {
        Utils.checkNotNull(credit, "credit");
        this.credit = credit;
        return this;
    }

    /**
     * Unique identifier for the associated plan.
     */
    public CommerceSubscriptionItem withPlanId(String planId) {
        Utils.checkNotNull(planId, "planId");
        this.planId = planId;
        return this;
    }

    /**
     * The associated commerce plan.
     */
    public CommerceSubscriptionItem withPlan(Plan plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = Optional.ofNullable(plan);
        return this;
    }


    /**
     * The associated commerce plan.
     */
    public CommerceSubscriptionItem withPlan(Optional<? extends Plan> plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * The billing period for this subscription.
     */
    public CommerceSubscriptionItem withPlanPeriod(PlanPeriod planPeriod) {
        Utils.checkNotNull(planPeriod, "planPeriod");
        this.planPeriod = planPeriod;
        return this;
    }

    /**
     * Unique identifier for the payment source.
     */
    public CommerceSubscriptionItem withPaymentSourceId(String paymentSourceId) {
        Utils.checkNotNull(paymentSourceId, "paymentSourceId");
        this.paymentSourceId = paymentSourceId;
        return this;
    }

    /**
     * The payment source associated with this subscription.
     */
    public CommerceSubscriptionItem withPaymentSource(PaymentSource paymentSource) {
        Utils.checkNotNull(paymentSource, "paymentSource");
        this.paymentSource = JsonNullable.of(paymentSource);
        return this;
    }

    /**
     * The payment source associated with this subscription.
     */
    public CommerceSubscriptionItem withPaymentSource(JsonNullable<? extends PaymentSource> paymentSource) {
        Utils.checkNotNull(paymentSource, "paymentSource");
        this.paymentSource = paymentSource;
        return this;
    }

    /**
     * Total amount paid over the lifetime of this subscription.
     */
    public CommerceSubscriptionItem withLifetimePaid(LifetimePaid lifetimePaid) {
        Utils.checkNotNull(lifetimePaid, "lifetimePaid");
        this.lifetimePaid = JsonNullable.of(lifetimePaid);
        return this;
    }

    /**
     * Total amount paid over the lifetime of this subscription.
     */
    public CommerceSubscriptionItem withLifetimePaid(JsonNullable<? extends LifetimePaid> lifetimePaid) {
        Utils.checkNotNull(lifetimePaid, "lifetimePaid");
        this.lifetimePaid = lifetimePaid;
        return this;
    }

    /**
     * Current amount for this subscription.
     */
    public CommerceSubscriptionItem withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * Current amount for this subscription.
     */
    public CommerceSubscriptionItem withAmount(JsonNullable<? extends Amount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Information about the next invoice.
     */
    public CommerceSubscriptionItem withNextInvoice(NextInvoice nextInvoice) {
        Utils.checkNotNull(nextInvoice, "nextInvoice");
        this.nextInvoice = JsonNullable.of(nextInvoice);
        return this;
    }

    /**
     * Information about the next invoice.
     */
    public CommerceSubscriptionItem withNextInvoice(JsonNullable<? extends NextInvoice> nextInvoice) {
        Utils.checkNotNull(nextInvoice, "nextInvoice");
        this.nextInvoice = nextInvoice;
        return this;
    }

    /**
     * Information about the next payment.
     */
    public CommerceSubscriptionItem withNextPayment(NextPayment nextPayment) {
        Utils.checkNotNull(nextPayment, "nextPayment");
        this.nextPayment = JsonNullable.of(nextPayment);
        return this;
    }

    /**
     * Information about the next payment.
     */
    public CommerceSubscriptionItem withNextPayment(JsonNullable<? extends NextPayment> nextPayment) {
        Utils.checkNotNull(nextPayment, "nextPayment");
        this.nextPayment = nextPayment;
        return this;
    }

    /**
     * Unique identifier for the payer.
     */
    public CommerceSubscriptionItem withPayerId(String payerId) {
        Utils.checkNotNull(payerId, "payerId");
        this.payerId = payerId;
        return this;
    }

    /**
     * The payer associated with this subscription.
     */
    public CommerceSubscriptionItem withPayer(Payer payer) {
        Utils.checkNotNull(payer, "payer");
        this.payer = JsonNullable.of(payer);
        return this;
    }

    /**
     * The payer associated with this subscription.
     */
    public CommerceSubscriptionItem withPayer(JsonNullable<? extends Payer> payer) {
        Utils.checkNotNull(payer, "payer");
        this.payer = payer;
        return this;
    }

    /**
     * Whether this subscription is currently on a free trial.
     */
    public CommerceSubscriptionItem withIsFreeTrial(boolean isFreeTrial) {
        Utils.checkNotNull(isFreeTrial, "isFreeTrial");
        this.isFreeTrial = isFreeTrial;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the current period started.
     */
    public CommerceSubscriptionItem withPeriodStart(long periodStart) {
        Utils.checkNotNull(periodStart, "periodStart");
        this.periodStart = JsonNullable.of(periodStart);
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the current period started.
     */
    public CommerceSubscriptionItem withPeriodStart(JsonNullable<Long> periodStart) {
        Utils.checkNotNull(periodStart, "periodStart");
        this.periodStart = periodStart;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the current period ends.
     */
    public CommerceSubscriptionItem withPeriodEnd(long periodEnd) {
        Utils.checkNotNull(periodEnd, "periodEnd");
        this.periodEnd = JsonNullable.of(periodEnd);
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the current period ends.
     */
    public CommerceSubscriptionItem withPeriodEnd(JsonNullable<Long> periodEnd) {
        Utils.checkNotNull(periodEnd, "periodEnd");
        this.periodEnd = periodEnd;
        return this;
    }

    /**
     * Date used for proration calculations.
     */
    public CommerceSubscriptionItem withProrationDate(String prorationDate) {
        Utils.checkNotNull(prorationDate, "prorationDate");
        this.prorationDate = prorationDate;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription was canceled.
     */
    public CommerceSubscriptionItem withCanceledAt(long canceledAt) {
        Utils.checkNotNull(canceledAt, "canceledAt");
        this.canceledAt = JsonNullable.of(canceledAt);
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription was canceled.
     */
    public CommerceSubscriptionItem withCanceledAt(JsonNullable<Long> canceledAt) {
        Utils.checkNotNull(canceledAt, "canceledAt");
        this.canceledAt = canceledAt;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription became past due.
     */
    public CommerceSubscriptionItem withPastDueAt(long pastDueAt) {
        Utils.checkNotNull(pastDueAt, "pastDueAt");
        this.pastDueAt = JsonNullable.of(pastDueAt);
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription became past due.
     */
    public CommerceSubscriptionItem withPastDueAt(JsonNullable<Long> pastDueAt) {
        Utils.checkNotNull(pastDueAt, "pastDueAt");
        this.pastDueAt = pastDueAt;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription ended.
     */
    public CommerceSubscriptionItem withEndedAt(long endedAt) {
        Utils.checkNotNull(endedAt, "endedAt");
        this.endedAt = JsonNullable.of(endedAt);
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription ended.
     */
    public CommerceSubscriptionItem withEndedAt(JsonNullable<Long> endedAt) {
        Utils.checkNotNull(endedAt, "endedAt");
        this.endedAt = endedAt;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription was created.
     */
    public CommerceSubscriptionItem withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the subscription was last updated.
     */
    public CommerceSubscriptionItem withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceSubscriptionItem other = (CommerceSubscriptionItem) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.instanceId, other.instanceId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.credit, other.credit) &&
            Utils.enhancedDeepEquals(this.planId, other.planId) &&
            Utils.enhancedDeepEquals(this.plan, other.plan) &&
            Utils.enhancedDeepEquals(this.planPeriod, other.planPeriod) &&
            Utils.enhancedDeepEquals(this.paymentSourceId, other.paymentSourceId) &&
            Utils.enhancedDeepEquals(this.paymentSource, other.paymentSource) &&
            Utils.enhancedDeepEquals(this.lifetimePaid, other.lifetimePaid) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.nextInvoice, other.nextInvoice) &&
            Utils.enhancedDeepEquals(this.nextPayment, other.nextPayment) &&
            Utils.enhancedDeepEquals(this.payerId, other.payerId) &&
            Utils.enhancedDeepEquals(this.payer, other.payer) &&
            Utils.enhancedDeepEquals(this.isFreeTrial, other.isFreeTrial) &&
            Utils.enhancedDeepEquals(this.periodStart, other.periodStart) &&
            Utils.enhancedDeepEquals(this.periodEnd, other.periodEnd) &&
            Utils.enhancedDeepEquals(this.prorationDate, other.prorationDate) &&
            Utils.enhancedDeepEquals(this.canceledAt, other.canceledAt) &&
            Utils.enhancedDeepEquals(this.pastDueAt, other.pastDueAt) &&
            Utils.enhancedDeepEquals(this.endedAt, other.endedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, instanceId,
            status, credit, planId,
            plan, planPeriod, paymentSourceId,
            paymentSource, lifetimePaid, amount,
            nextInvoice, nextPayment, payerId,
            payer, isFreeTrial, periodStart,
            periodEnd, prorationDate, canceledAt,
            pastDueAt, endedAt, createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceSubscriptionItem.class,
                "object", object,
                "id", id,
                "instanceId", instanceId,
                "status", status,
                "credit", credit,
                "planId", planId,
                "plan", plan,
                "planPeriod", planPeriod,
                "paymentSourceId", paymentSourceId,
                "paymentSource", paymentSource,
                "lifetimePaid", lifetimePaid,
                "amount", amount,
                "nextInvoice", nextInvoice,
                "nextPayment", nextPayment,
                "payerId", payerId,
                "payer", payer,
                "isFreeTrial", isFreeTrial,
                "periodStart", periodStart,
                "periodEnd", periodEnd,
                "prorationDate", prorationDate,
                "canceledAt", canceledAt,
                "pastDueAt", pastDueAt,
                "endedAt", endedAt,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CommerceSubscriptionItemObject object;

        private String id;

        private String instanceId;

        private CommerceSubscriptionItemStatus status;

        private JsonNullable<? extends Credit> credit = JsonNullable.undefined();

        private String planId;

        private Optional<? extends Plan> plan = Optional.empty();

        private PlanPeriod planPeriod;

        private String paymentSourceId;

        private JsonNullable<? extends PaymentSource> paymentSource = JsonNullable.undefined();

        private JsonNullable<? extends LifetimePaid> lifetimePaid = JsonNullable.undefined();

        private JsonNullable<? extends Amount> amount = JsonNullable.undefined();

        private JsonNullable<? extends NextInvoice> nextInvoice = JsonNullable.undefined();

        private JsonNullable<? extends NextPayment> nextPayment = JsonNullable.undefined();

        private String payerId;

        private JsonNullable<? extends Payer> payer = JsonNullable.undefined();

        private Boolean isFreeTrial;

        private JsonNullable<Long> periodStart = JsonNullable.undefined();

        private JsonNullable<Long> periodEnd = JsonNullable.undefined();

        private String prorationDate;

        private JsonNullable<Long> canceledAt = JsonNullable.undefined();

        private JsonNullable<Long> pastDueAt = JsonNullable.undefined();

        private JsonNullable<Long> endedAt = JsonNullable.undefined();

        private Long createdAt;

        private Long updatedAt;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(CommerceSubscriptionItemObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * Unique identifier for the subscription item.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Unique identifier for the Clerk instance.
         */
        public Builder instanceId(String instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = instanceId;
            return this;
        }


        /**
         * Current status of the subscription item.
         */
        public Builder status(CommerceSubscriptionItemStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Credit information (only available in PaymentAttempt events).
         */
        public Builder credit(Credit credit) {
            Utils.checkNotNull(credit, "credit");
            this.credit = JsonNullable.of(credit);
            return this;
        }

        /**
         * Credit information (only available in PaymentAttempt events).
         */
        public Builder credit(JsonNullable<? extends Credit> credit) {
            Utils.checkNotNull(credit, "credit");
            this.credit = credit;
            return this;
        }


        /**
         * Unique identifier for the associated plan.
         */
        public Builder planId(String planId) {
            Utils.checkNotNull(planId, "planId");
            this.planId = planId;
            return this;
        }


        /**
         * The associated commerce plan.
         */
        public Builder plan(Plan plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = Optional.ofNullable(plan);
            return this;
        }

        /**
         * The associated commerce plan.
         */
        public Builder plan(Optional<? extends Plan> plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }


        /**
         * The billing period for this subscription.
         */
        public Builder planPeriod(PlanPeriod planPeriod) {
            Utils.checkNotNull(planPeriod, "planPeriod");
            this.planPeriod = planPeriod;
            return this;
        }


        /**
         * Unique identifier for the payment source.
         */
        public Builder paymentSourceId(String paymentSourceId) {
            Utils.checkNotNull(paymentSourceId, "paymentSourceId");
            this.paymentSourceId = paymentSourceId;
            return this;
        }


        /**
         * The payment source associated with this subscription.
         */
        public Builder paymentSource(PaymentSource paymentSource) {
            Utils.checkNotNull(paymentSource, "paymentSource");
            this.paymentSource = JsonNullable.of(paymentSource);
            return this;
        }

        /**
         * The payment source associated with this subscription.
         */
        public Builder paymentSource(JsonNullable<? extends PaymentSource> paymentSource) {
            Utils.checkNotNull(paymentSource, "paymentSource");
            this.paymentSource = paymentSource;
            return this;
        }


        /**
         * Total amount paid over the lifetime of this subscription.
         */
        public Builder lifetimePaid(LifetimePaid lifetimePaid) {
            Utils.checkNotNull(lifetimePaid, "lifetimePaid");
            this.lifetimePaid = JsonNullable.of(lifetimePaid);
            return this;
        }

        /**
         * Total amount paid over the lifetime of this subscription.
         */
        public Builder lifetimePaid(JsonNullable<? extends LifetimePaid> lifetimePaid) {
            Utils.checkNotNull(lifetimePaid, "lifetimePaid");
            this.lifetimePaid = lifetimePaid;
            return this;
        }


        /**
         * Current amount for this subscription.
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * Current amount for this subscription.
         */
        public Builder amount(JsonNullable<? extends Amount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Information about the next invoice.
         */
        public Builder nextInvoice(NextInvoice nextInvoice) {
            Utils.checkNotNull(nextInvoice, "nextInvoice");
            this.nextInvoice = JsonNullable.of(nextInvoice);
            return this;
        }

        /**
         * Information about the next invoice.
         */
        public Builder nextInvoice(JsonNullable<? extends NextInvoice> nextInvoice) {
            Utils.checkNotNull(nextInvoice, "nextInvoice");
            this.nextInvoice = nextInvoice;
            return this;
        }


        /**
         * Information about the next payment.
         */
        public Builder nextPayment(NextPayment nextPayment) {
            Utils.checkNotNull(nextPayment, "nextPayment");
            this.nextPayment = JsonNullable.of(nextPayment);
            return this;
        }

        /**
         * Information about the next payment.
         */
        public Builder nextPayment(JsonNullable<? extends NextPayment> nextPayment) {
            Utils.checkNotNull(nextPayment, "nextPayment");
            this.nextPayment = nextPayment;
            return this;
        }


        /**
         * Unique identifier for the payer.
         */
        public Builder payerId(String payerId) {
            Utils.checkNotNull(payerId, "payerId");
            this.payerId = payerId;
            return this;
        }


        /**
         * The payer associated with this subscription.
         */
        public Builder payer(Payer payer) {
            Utils.checkNotNull(payer, "payer");
            this.payer = JsonNullable.of(payer);
            return this;
        }

        /**
         * The payer associated with this subscription.
         */
        public Builder payer(JsonNullable<? extends Payer> payer) {
            Utils.checkNotNull(payer, "payer");
            this.payer = payer;
            return this;
        }


        /**
         * Whether this subscription is currently on a free trial.
         */
        public Builder isFreeTrial(boolean isFreeTrial) {
            Utils.checkNotNull(isFreeTrial, "isFreeTrial");
            this.isFreeTrial = isFreeTrial;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the current period started.
         */
        public Builder periodStart(long periodStart) {
            Utils.checkNotNull(periodStart, "periodStart");
            this.periodStart = JsonNullable.of(periodStart);
            return this;
        }

        /**
         * Unix timestamp (in milliseconds) when the current period started.
         */
        public Builder periodStart(JsonNullable<Long> periodStart) {
            Utils.checkNotNull(periodStart, "periodStart");
            this.periodStart = periodStart;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the current period ends.
         */
        public Builder periodEnd(long periodEnd) {
            Utils.checkNotNull(periodEnd, "periodEnd");
            this.periodEnd = JsonNullable.of(periodEnd);
            return this;
        }

        /**
         * Unix timestamp (in milliseconds) when the current period ends.
         */
        public Builder periodEnd(JsonNullable<Long> periodEnd) {
            Utils.checkNotNull(periodEnd, "periodEnd");
            this.periodEnd = periodEnd;
            return this;
        }


        /**
         * Date used for proration calculations.
         */
        public Builder prorationDate(String prorationDate) {
            Utils.checkNotNull(prorationDate, "prorationDate");
            this.prorationDate = prorationDate;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the subscription was canceled.
         */
        public Builder canceledAt(long canceledAt) {
            Utils.checkNotNull(canceledAt, "canceledAt");
            this.canceledAt = JsonNullable.of(canceledAt);
            return this;
        }

        /**
         * Unix timestamp (in milliseconds) when the subscription was canceled.
         */
        public Builder canceledAt(JsonNullable<Long> canceledAt) {
            Utils.checkNotNull(canceledAt, "canceledAt");
            this.canceledAt = canceledAt;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the subscription became past due.
         */
        public Builder pastDueAt(long pastDueAt) {
            Utils.checkNotNull(pastDueAt, "pastDueAt");
            this.pastDueAt = JsonNullable.of(pastDueAt);
            return this;
        }

        /**
         * Unix timestamp (in milliseconds) when the subscription became past due.
         */
        public Builder pastDueAt(JsonNullable<Long> pastDueAt) {
            Utils.checkNotNull(pastDueAt, "pastDueAt");
            this.pastDueAt = pastDueAt;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the subscription ended.
         */
        public Builder endedAt(long endedAt) {
            Utils.checkNotNull(endedAt, "endedAt");
            this.endedAt = JsonNullable.of(endedAt);
            return this;
        }

        /**
         * Unix timestamp (in milliseconds) when the subscription ended.
         */
        public Builder endedAt(JsonNullable<Long> endedAt) {
            Utils.checkNotNull(endedAt, "endedAt");
            this.endedAt = endedAt;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the subscription was created.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the subscription was last updated.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public CommerceSubscriptionItem build() {

            return new CommerceSubscriptionItem(
                object, id, instanceId,
                status, credit, planId,
                plan, planPeriod, paymentSourceId,
                paymentSource, lifetimePaid, amount,
                nextInvoice, nextPayment, payerId,
                payer, isFreeTrial, periodStart,
                periodEnd, prorationDate, canceledAt,
                pastDueAt, endedAt, createdAt,
                updatedAt);
        }

    }
}
