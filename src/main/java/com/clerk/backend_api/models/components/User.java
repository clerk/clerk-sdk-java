/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * User
 * 
 * <p>Success
 */
public class User {

    @JsonProperty("id")
    private String id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private UserObject object;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("external_id")
    private Optional<String> externalId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("primary_email_address_id")
    private Optional<String> primaryEmailAddressId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("primary_phone_number_id")
    private Optional<String> primaryPhoneNumberId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("primary_web3_wallet_id")
    private Optional<String> primaryWeb3WalletId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("username")
    private Optional<String> username;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("first_name")
    private Optional<String> firstName;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("last_name")
    private Optional<String> lastName;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_image_url")
    @Deprecated
    private Optional<String> profileImageUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    private Optional<String> imageUrl;


    @JsonProperty("has_image")
    private boolean hasImage;


    @JsonProperty("public_metadata")
    private Map<String, Object> publicMetadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private JsonNullable<? extends Map<String, Object>> privateMetadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unsafe_metadata")
    private Optional<? extends Map<String, Object>> unsafeMetadata;


    @JsonProperty("email_addresses")
    private List<EmailAddress> emailAddresses;


    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonProperty("web3_wallets")
    private List<Web3Wallet> web3Wallets;


    @JsonProperty("passkeys")
    private List<Passkey> passkeys;


    @JsonProperty("password_enabled")
    private boolean passwordEnabled;


    @JsonProperty("two_factor_enabled")
    private boolean twoFactorEnabled;


    @JsonProperty("totp_enabled")
    private boolean totpEnabled;


    @JsonProperty("backup_code_enabled")
    private boolean backupCodeEnabled;

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("mfa_enabled_at")
    private Optional<Long> mfaEnabledAt;

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("mfa_disabled_at")
    private Optional<Long> mfaDisabledAt;


    @JsonProperty("external_accounts")
    private List<ExternalAccountWithVerification> externalAccounts;


    @JsonProperty("saml_accounts")
    private List<SAMLAccount> samlAccounts;

    /**
     * Unix timestamp of last sign-in.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("last_sign_in_at")
    private Optional<Long> lastSignInAt;

    /**
     * Flag to denote whether user is banned or not.
     */
    @JsonProperty("banned")
    private boolean banned;

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     */
    @JsonProperty("locked")
    private boolean locked;

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("lockout_expires_in_seconds")
    private Optional<Long> lockoutExpiresInSeconds;

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("verification_attempts_remaining")
    private Optional<Long> verificationAttemptsRemaining;

    /**
     * Unix timestamp of last update.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    /**
     * Unix timestamp of creation.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * If enabled, user can delete themselves via FAPI.
     */
    @JsonProperty("delete_self_enabled")
    private boolean deleteSelfEnabled;

    /**
     * If enabled, user can create organizations via FAPI.
     */
    @JsonProperty("create_organization_enabled")
    private boolean createOrganizationEnabled;

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_organizations_limit")
    private JsonNullable<Long> createOrganizationsLimit;

    /**
     * Unix timestamp of the latest session activity, with day precision.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("last_active_at")
    private Optional<Long> lastActiveAt;

    /**
     * Unix timestamp of when the user accepted the legal requirements.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("legal_accepted_at")
    private Optional<Long> legalAcceptedAt;

    @JsonCreator
    public User(
            @JsonProperty("id") String id,
            @JsonProperty("object") UserObject object,
            @JsonProperty("external_id") Optional<String> externalId,
            @JsonProperty("primary_email_address_id") Optional<String> primaryEmailAddressId,
            @JsonProperty("primary_phone_number_id") Optional<String> primaryPhoneNumberId,
            @JsonProperty("primary_web3_wallet_id") Optional<String> primaryWeb3WalletId,
            @JsonProperty("username") Optional<String> username,
            @JsonProperty("first_name") Optional<String> firstName,
            @JsonProperty("last_name") Optional<String> lastName,
            @JsonProperty("profile_image_url") Optional<String> profileImageUrl,
            @JsonProperty("image_url") Optional<String> imageUrl,
            @JsonProperty("has_image") boolean hasImage,
            @JsonProperty("public_metadata") Map<String, Object> publicMetadata,
            @JsonProperty("private_metadata") JsonNullable<? extends Map<String, Object>> privateMetadata,
            @JsonProperty("unsafe_metadata") Optional<? extends Map<String, Object>> unsafeMetadata,
            @JsonProperty("email_addresses") List<EmailAddress> emailAddresses,
            @JsonProperty("phone_numbers") List<PhoneNumber> phoneNumbers,
            @JsonProperty("web3_wallets") List<Web3Wallet> web3Wallets,
            @JsonProperty("passkeys") List<Passkey> passkeys,
            @JsonProperty("password_enabled") boolean passwordEnabled,
            @JsonProperty("two_factor_enabled") boolean twoFactorEnabled,
            @JsonProperty("totp_enabled") boolean totpEnabled,
            @JsonProperty("backup_code_enabled") boolean backupCodeEnabled,
            @JsonProperty("mfa_enabled_at") Optional<Long> mfaEnabledAt,
            @JsonProperty("mfa_disabled_at") Optional<Long> mfaDisabledAt,
            @JsonProperty("external_accounts") List<ExternalAccountWithVerification> externalAccounts,
            @JsonProperty("saml_accounts") List<SAMLAccount> samlAccounts,
            @JsonProperty("last_sign_in_at") Optional<Long> lastSignInAt,
            @JsonProperty("banned") boolean banned,
            @JsonProperty("locked") boolean locked,
            @JsonProperty("lockout_expires_in_seconds") Optional<Long> lockoutExpiresInSeconds,
            @JsonProperty("verification_attempts_remaining") Optional<Long> verificationAttemptsRemaining,
            @JsonProperty("updated_at") long updatedAt,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("delete_self_enabled") boolean deleteSelfEnabled,
            @JsonProperty("create_organization_enabled") boolean createOrganizationEnabled,
            @JsonProperty("create_organizations_limit") JsonNullable<Long> createOrganizationsLimit,
            @JsonProperty("last_active_at") Optional<Long> lastActiveAt,
            @JsonProperty("legal_accepted_at") Optional<Long> legalAcceptedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(hasImage, "hasImage");
        publicMetadata = Utils.emptyMapIfNull(publicMetadata);
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(web3Wallets, "web3Wallets");
        Utils.checkNotNull(passkeys, "passkeys");
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
        Utils.checkNotNull(totpEnabled, "totpEnabled");
        Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
        Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
        Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
        Utils.checkNotNull(externalAccounts, "externalAccounts");
        Utils.checkNotNull(samlAccounts, "samlAccounts");
        Utils.checkNotNull(lastSignInAt, "lastSignInAt");
        Utils.checkNotNull(banned, "banned");
        Utils.checkNotNull(locked, "locked");
        Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
        Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
        Utils.checkNotNull(lastActiveAt, "lastActiveAt");
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.id = id;
        this.object = object;
        this.externalId = externalId;
        this.primaryEmailAddressId = primaryEmailAddressId;
        this.primaryPhoneNumberId = primaryPhoneNumberId;
        this.primaryWeb3WalletId = primaryWeb3WalletId;
        this.username = username;
        this.firstName = firstName;
        this.lastName = lastName;
        this.profileImageUrl = profileImageUrl;
        this.imageUrl = imageUrl;
        this.hasImage = hasImage;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.unsafeMetadata = unsafeMetadata;
        this.emailAddresses = emailAddresses;
        this.phoneNumbers = phoneNumbers;
        this.web3Wallets = web3Wallets;
        this.passkeys = passkeys;
        this.passwordEnabled = passwordEnabled;
        this.twoFactorEnabled = twoFactorEnabled;
        this.totpEnabled = totpEnabled;
        this.backupCodeEnabled = backupCodeEnabled;
        this.mfaEnabledAt = mfaEnabledAt;
        this.mfaDisabledAt = mfaDisabledAt;
        this.externalAccounts = externalAccounts;
        this.samlAccounts = samlAccounts;
        this.lastSignInAt = lastSignInAt;
        this.banned = banned;
        this.locked = locked;
        this.lockoutExpiresInSeconds = lockoutExpiresInSeconds;
        this.verificationAttemptsRemaining = verificationAttemptsRemaining;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.deleteSelfEnabled = deleteSelfEnabled;
        this.createOrganizationEnabled = createOrganizationEnabled;
        this.createOrganizationsLimit = createOrganizationsLimit;
        this.lastActiveAt = lastActiveAt;
        this.legalAcceptedAt = legalAcceptedAt;
    }
    
    public User(
            String id,
            UserObject object,
            boolean hasImage,
            Map<String, Object> publicMetadata,
            List<EmailAddress> emailAddresses,
            List<PhoneNumber> phoneNumbers,
            List<Web3Wallet> web3Wallets,
            List<Passkey> passkeys,
            boolean passwordEnabled,
            boolean twoFactorEnabled,
            boolean totpEnabled,
            boolean backupCodeEnabled,
            List<ExternalAccountWithVerification> externalAccounts,
            List<SAMLAccount> samlAccounts,
            boolean banned,
            boolean locked,
            long updatedAt,
            long createdAt,
            boolean deleteSelfEnabled,
            boolean createOrganizationEnabled) {
        this(id, object, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), hasImage,
            publicMetadata, JsonNullable.undefined(), Optional.empty(),
            emailAddresses, phoneNumbers, web3Wallets,
            passkeys, passwordEnabled, twoFactorEnabled,
            totpEnabled, backupCodeEnabled, Optional.empty(),
            Optional.empty(), externalAccounts, samlAccounts,
            Optional.empty(), banned, locked,
            Optional.empty(), Optional.empty(), updatedAt,
            createdAt, deleteSelfEnabled, createOrganizationEnabled,
            JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public UserObject object() {
        return object;
    }

    @JsonIgnore
    public Optional<String> externalId() {
        return externalId;
    }

    @JsonIgnore
    public Optional<String> primaryEmailAddressId() {
        return primaryEmailAddressId;
    }

    @JsonIgnore
    public Optional<String> primaryPhoneNumberId() {
        return primaryPhoneNumberId;
    }

    @JsonIgnore
    public Optional<String> primaryWeb3WalletId() {
        return primaryWeb3WalletId;
    }

    @JsonIgnore
    public Optional<String> username() {
        return username;
    }

    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> profileImageUrl() {
        return profileImageUrl;
    }

    @JsonIgnore
    public Optional<String> imageUrl() {
        return imageUrl;
    }

    @JsonIgnore
    public boolean hasImage() {
        return hasImage;
    }

    @JsonIgnore
    public Map<String, Object> publicMetadata() {
        return publicMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> privateMetadata() {
        return (JsonNullable<Map<String, Object>>) privateMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> unsafeMetadata() {
        return (Optional<Map<String, Object>>) unsafeMetadata;
    }

    @JsonIgnore
    public List<EmailAddress> emailAddresses() {
        return emailAddresses;
    }

    @JsonIgnore
    public List<PhoneNumber> phoneNumbers() {
        return phoneNumbers;
    }

    @JsonIgnore
    public List<Web3Wallet> web3Wallets() {
        return web3Wallets;
    }

    @JsonIgnore
    public List<Passkey> passkeys() {
        return passkeys;
    }

    @JsonIgnore
    public boolean passwordEnabled() {
        return passwordEnabled;
    }

    @JsonIgnore
    public boolean twoFactorEnabled() {
        return twoFactorEnabled;
    }

    @JsonIgnore
    public boolean totpEnabled() {
        return totpEnabled;
    }

    @JsonIgnore
    public boolean backupCodeEnabled() {
        return backupCodeEnabled;
    }

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     */
    @JsonIgnore
    public Optional<Long> mfaEnabledAt() {
        return mfaEnabledAt;
    }

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     */
    @JsonIgnore
    public Optional<Long> mfaDisabledAt() {
        return mfaDisabledAt;
    }

    @JsonIgnore
    public List<ExternalAccountWithVerification> externalAccounts() {
        return externalAccounts;
    }

    @JsonIgnore
    public List<SAMLAccount> samlAccounts() {
        return samlAccounts;
    }

    /**
     * Unix timestamp of last sign-in.
     */
    @JsonIgnore
    public Optional<Long> lastSignInAt() {
        return lastSignInAt;
    }

    /**
     * Flag to denote whether user is banned or not.
     */
    @JsonIgnore
    public boolean banned() {
        return banned;
    }

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     */
    @JsonIgnore
    public boolean locked() {
        return locked;
    }

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     */
    @JsonIgnore
    public Optional<Long> lockoutExpiresInSeconds() {
        return lockoutExpiresInSeconds;
    }

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     */
    @JsonIgnore
    public Optional<Long> verificationAttemptsRemaining() {
        return verificationAttemptsRemaining;
    }

    /**
     * Unix timestamp of last update.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     */
    @JsonIgnore
    public boolean deleteSelfEnabled() {
        return deleteSelfEnabled;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     */
    @JsonIgnore
    public boolean createOrganizationEnabled() {
        return createOrganizationEnabled;
    }

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     */
    @JsonIgnore
    public JsonNullable<Long> createOrganizationsLimit() {
        return createOrganizationsLimit;
    }

    /**
     * Unix timestamp of the latest session activity, with day precision.
     */
    @JsonIgnore
    public Optional<Long> lastActiveAt() {
        return lastActiveAt;
    }

    /**
     * Unix timestamp of when the user accepted the legal requirements.
     */
    @JsonIgnore
    public Optional<Long> legalAcceptedAt() {
        return legalAcceptedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public User withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public User withObject(UserObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public User withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }


    public User withExternalId(Optional<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public User withPrimaryEmailAddressId(String primaryEmailAddressId) {
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        this.primaryEmailAddressId = Optional.ofNullable(primaryEmailAddressId);
        return this;
    }


    public User withPrimaryEmailAddressId(Optional<String> primaryEmailAddressId) {
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        this.primaryEmailAddressId = primaryEmailAddressId;
        return this;
    }

    public User withPrimaryPhoneNumberId(String primaryPhoneNumberId) {
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        this.primaryPhoneNumberId = Optional.ofNullable(primaryPhoneNumberId);
        return this;
    }


    public User withPrimaryPhoneNumberId(Optional<String> primaryPhoneNumberId) {
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        this.primaryPhoneNumberId = primaryPhoneNumberId;
        return this;
    }

    public User withPrimaryWeb3WalletId(String primaryWeb3WalletId) {
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        this.primaryWeb3WalletId = Optional.ofNullable(primaryWeb3WalletId);
        return this;
    }


    public User withPrimaryWeb3WalletId(Optional<String> primaryWeb3WalletId) {
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        this.primaryWeb3WalletId = primaryWeb3WalletId;
        return this;
    }

    public User withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }


    public User withUsername(Optional<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public User withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }


    public User withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public User withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }


    public User withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public User withProfileImageUrl(String profileImageUrl) {
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        this.profileImageUrl = Optional.ofNullable(profileImageUrl);
        return this;
    }


    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public User withProfileImageUrl(Optional<String> profileImageUrl) {
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        this.profileImageUrl = profileImageUrl;
        return this;
    }

    public User withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }


    public User withImageUrl(Optional<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public User withHasImage(boolean hasImage) {
        Utils.checkNotNull(hasImage, "hasImage");
        this.hasImage = hasImage;
        return this;
    }

    public User withPublicMetadata(Map<String, Object> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public User withPrivateMetadata(Map<String, Object> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = JsonNullable.of(privateMetadata);
        return this;
    }

    public User withPrivateMetadata(JsonNullable<? extends Map<String, Object>> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    public User withUnsafeMetadata(Map<String, Object> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
        return this;
    }


    public User withUnsafeMetadata(Optional<? extends Map<String, Object>> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = unsafeMetadata;
        return this;
    }

    public User withEmailAddresses(List<EmailAddress> emailAddresses) {
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        this.emailAddresses = emailAddresses;
        return this;
    }

    public User withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public User withWeb3Wallets(List<Web3Wallet> web3Wallets) {
        Utils.checkNotNull(web3Wallets, "web3Wallets");
        this.web3Wallets = web3Wallets;
        return this;
    }

    public User withPasskeys(List<Passkey> passkeys) {
        Utils.checkNotNull(passkeys, "passkeys");
        this.passkeys = passkeys;
        return this;
    }

    public User withPasswordEnabled(boolean passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = passwordEnabled;
        return this;
    }

    public User withTwoFactorEnabled(boolean twoFactorEnabled) {
        Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
        this.twoFactorEnabled = twoFactorEnabled;
        return this;
    }

    public User withTotpEnabled(boolean totpEnabled) {
        Utils.checkNotNull(totpEnabled, "totpEnabled");
        this.totpEnabled = totpEnabled;
        return this;
    }

    public User withBackupCodeEnabled(boolean backupCodeEnabled) {
        Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
        this.backupCodeEnabled = backupCodeEnabled;
        return this;
    }

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     */
    public User withMfaEnabledAt(long mfaEnabledAt) {
        Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
        this.mfaEnabledAt = Optional.ofNullable(mfaEnabledAt);
        return this;
    }


    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     */
    public User withMfaEnabledAt(Optional<Long> mfaEnabledAt) {
        Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
        this.mfaEnabledAt = mfaEnabledAt;
        return this;
    }

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     */
    public User withMfaDisabledAt(long mfaDisabledAt) {
        Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
        this.mfaDisabledAt = Optional.ofNullable(mfaDisabledAt);
        return this;
    }


    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     */
    public User withMfaDisabledAt(Optional<Long> mfaDisabledAt) {
        Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
        this.mfaDisabledAt = mfaDisabledAt;
        return this;
    }

    public User withExternalAccounts(List<ExternalAccountWithVerification> externalAccounts) {
        Utils.checkNotNull(externalAccounts, "externalAccounts");
        this.externalAccounts = externalAccounts;
        return this;
    }

    public User withSamlAccounts(List<SAMLAccount> samlAccounts) {
        Utils.checkNotNull(samlAccounts, "samlAccounts");
        this.samlAccounts = samlAccounts;
        return this;
    }

    /**
     * Unix timestamp of last sign-in.
     */
    public User withLastSignInAt(long lastSignInAt) {
        Utils.checkNotNull(lastSignInAt, "lastSignInAt");
        this.lastSignInAt = Optional.ofNullable(lastSignInAt);
        return this;
    }


    /**
     * Unix timestamp of last sign-in.
     */
    public User withLastSignInAt(Optional<Long> lastSignInAt) {
        Utils.checkNotNull(lastSignInAt, "lastSignInAt");
        this.lastSignInAt = lastSignInAt;
        return this;
    }

    /**
     * Flag to denote whether user is banned or not.
     */
    public User withBanned(boolean banned) {
        Utils.checkNotNull(banned, "banned");
        this.banned = banned;
        return this;
    }

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     */
    public User withLocked(boolean locked) {
        Utils.checkNotNull(locked, "locked");
        this.locked = locked;
        return this;
    }

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     */
    public User withLockoutExpiresInSeconds(long lockoutExpiresInSeconds) {
        Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
        this.lockoutExpiresInSeconds = Optional.ofNullable(lockoutExpiresInSeconds);
        return this;
    }


    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     */
    public User withLockoutExpiresInSeconds(Optional<Long> lockoutExpiresInSeconds) {
        Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
        this.lockoutExpiresInSeconds = lockoutExpiresInSeconds;
        return this;
    }

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     */
    public User withVerificationAttemptsRemaining(long verificationAttemptsRemaining) {
        Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
        this.verificationAttemptsRemaining = Optional.ofNullable(verificationAttemptsRemaining);
        return this;
    }


    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     */
    public User withVerificationAttemptsRemaining(Optional<Long> verificationAttemptsRemaining) {
        Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
        this.verificationAttemptsRemaining = verificationAttemptsRemaining;
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public User withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public User withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     */
    public User withDeleteSelfEnabled(boolean deleteSelfEnabled) {
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        this.deleteSelfEnabled = deleteSelfEnabled;
        return this;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     */
    public User withCreateOrganizationEnabled(boolean createOrganizationEnabled) {
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        this.createOrganizationEnabled = createOrganizationEnabled;
        return this;
    }

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     */
    public User withCreateOrganizationsLimit(long createOrganizationsLimit) {
        Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
        this.createOrganizationsLimit = JsonNullable.of(createOrganizationsLimit);
        return this;
    }

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     */
    public User withCreateOrganizationsLimit(JsonNullable<Long> createOrganizationsLimit) {
        Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
        this.createOrganizationsLimit = createOrganizationsLimit;
        return this;
    }

    /**
     * Unix timestamp of the latest session activity, with day precision.
     */
    public User withLastActiveAt(long lastActiveAt) {
        Utils.checkNotNull(lastActiveAt, "lastActiveAt");
        this.lastActiveAt = Optional.ofNullable(lastActiveAt);
        return this;
    }


    /**
     * Unix timestamp of the latest session activity, with day precision.
     */
    public User withLastActiveAt(Optional<Long> lastActiveAt) {
        Utils.checkNotNull(lastActiveAt, "lastActiveAt");
        this.lastActiveAt = lastActiveAt;
        return this;
    }

    /**
     * Unix timestamp of when the user accepted the legal requirements.
     */
    public User withLegalAcceptedAt(long legalAcceptedAt) {
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.legalAcceptedAt = Optional.ofNullable(legalAcceptedAt);
        return this;
    }


    /**
     * Unix timestamp of when the user accepted the legal requirements.
     */
    public User withLegalAcceptedAt(Optional<Long> legalAcceptedAt) {
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.legalAcceptedAt = legalAcceptedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.primaryEmailAddressId, other.primaryEmailAddressId) &&
            Utils.enhancedDeepEquals(this.primaryPhoneNumberId, other.primaryPhoneNumberId) &&
            Utils.enhancedDeepEquals(this.primaryWeb3WalletId, other.primaryWeb3WalletId) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.profileImageUrl, other.profileImageUrl) &&
            Utils.enhancedDeepEquals(this.imageUrl, other.imageUrl) &&
            Utils.enhancedDeepEquals(this.hasImage, other.hasImage) &&
            Utils.enhancedDeepEquals(this.publicMetadata, other.publicMetadata) &&
            Utils.enhancedDeepEquals(this.privateMetadata, other.privateMetadata) &&
            Utils.enhancedDeepEquals(this.unsafeMetadata, other.unsafeMetadata) &&
            Utils.enhancedDeepEquals(this.emailAddresses, other.emailAddresses) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.web3Wallets, other.web3Wallets) &&
            Utils.enhancedDeepEquals(this.passkeys, other.passkeys) &&
            Utils.enhancedDeepEquals(this.passwordEnabled, other.passwordEnabled) &&
            Utils.enhancedDeepEquals(this.twoFactorEnabled, other.twoFactorEnabled) &&
            Utils.enhancedDeepEquals(this.totpEnabled, other.totpEnabled) &&
            Utils.enhancedDeepEquals(this.backupCodeEnabled, other.backupCodeEnabled) &&
            Utils.enhancedDeepEquals(this.mfaEnabledAt, other.mfaEnabledAt) &&
            Utils.enhancedDeepEquals(this.mfaDisabledAt, other.mfaDisabledAt) &&
            Utils.enhancedDeepEquals(this.externalAccounts, other.externalAccounts) &&
            Utils.enhancedDeepEquals(this.samlAccounts, other.samlAccounts) &&
            Utils.enhancedDeepEquals(this.lastSignInAt, other.lastSignInAt) &&
            Utils.enhancedDeepEquals(this.banned, other.banned) &&
            Utils.enhancedDeepEquals(this.locked, other.locked) &&
            Utils.enhancedDeepEquals(this.lockoutExpiresInSeconds, other.lockoutExpiresInSeconds) &&
            Utils.enhancedDeepEquals(this.verificationAttemptsRemaining, other.verificationAttemptsRemaining) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.deleteSelfEnabled, other.deleteSelfEnabled) &&
            Utils.enhancedDeepEquals(this.createOrganizationEnabled, other.createOrganizationEnabled) &&
            Utils.enhancedDeepEquals(this.createOrganizationsLimit, other.createOrganizationsLimit) &&
            Utils.enhancedDeepEquals(this.lastActiveAt, other.lastActiveAt) &&
            Utils.enhancedDeepEquals(this.legalAcceptedAt, other.legalAcceptedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, object, externalId,
            primaryEmailAddressId, primaryPhoneNumberId, primaryWeb3WalletId,
            username, firstName, lastName,
            profileImageUrl, imageUrl, hasImage,
            publicMetadata, privateMetadata, unsafeMetadata,
            emailAddresses, phoneNumbers, web3Wallets,
            passkeys, passwordEnabled, twoFactorEnabled,
            totpEnabled, backupCodeEnabled, mfaEnabledAt,
            mfaDisabledAt, externalAccounts, samlAccounts,
            lastSignInAt, banned, locked,
            lockoutExpiresInSeconds, verificationAttemptsRemaining, updatedAt,
            createdAt, deleteSelfEnabled, createOrganizationEnabled,
            createOrganizationsLimit, lastActiveAt, legalAcceptedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "id", id,
                "object", object,
                "externalId", externalId,
                "primaryEmailAddressId", primaryEmailAddressId,
                "primaryPhoneNumberId", primaryPhoneNumberId,
                "primaryWeb3WalletId", primaryWeb3WalletId,
                "username", username,
                "firstName", firstName,
                "lastName", lastName,
                "profileImageUrl", profileImageUrl,
                "imageUrl", imageUrl,
                "hasImage", hasImage,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "unsafeMetadata", unsafeMetadata,
                "emailAddresses", emailAddresses,
                "phoneNumbers", phoneNumbers,
                "web3Wallets", web3Wallets,
                "passkeys", passkeys,
                "passwordEnabled", passwordEnabled,
                "twoFactorEnabled", twoFactorEnabled,
                "totpEnabled", totpEnabled,
                "backupCodeEnabled", backupCodeEnabled,
                "mfaEnabledAt", mfaEnabledAt,
                "mfaDisabledAt", mfaDisabledAt,
                "externalAccounts", externalAccounts,
                "samlAccounts", samlAccounts,
                "lastSignInAt", lastSignInAt,
                "banned", banned,
                "locked", locked,
                "lockoutExpiresInSeconds", lockoutExpiresInSeconds,
                "verificationAttemptsRemaining", verificationAttemptsRemaining,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "deleteSelfEnabled", deleteSelfEnabled,
                "createOrganizationEnabled", createOrganizationEnabled,
                "createOrganizationsLimit", createOrganizationsLimit,
                "lastActiveAt", lastActiveAt,
                "legalAcceptedAt", legalAcceptedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private UserObject object;

        private Optional<String> externalId = Optional.empty();

        private Optional<String> primaryEmailAddressId = Optional.empty();

        private Optional<String> primaryPhoneNumberId = Optional.empty();

        private Optional<String> primaryWeb3WalletId = Optional.empty();

        private Optional<String> username = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        @Deprecated
        private Optional<String> profileImageUrl = Optional.empty();

        private Optional<String> imageUrl = Optional.empty();

        private Boolean hasImage;

        private Map<String, Object> publicMetadata;

        private JsonNullable<? extends Map<String, Object>> privateMetadata = JsonNullable.undefined();

        private Optional<? extends Map<String, Object>> unsafeMetadata = Optional.empty();

        private List<EmailAddress> emailAddresses;

        private List<PhoneNumber> phoneNumbers;

        private List<Web3Wallet> web3Wallets;

        private List<Passkey> passkeys;

        private Boolean passwordEnabled;

        private Boolean twoFactorEnabled;

        private Boolean totpEnabled;

        private Boolean backupCodeEnabled;

        private Optional<Long> mfaEnabledAt = Optional.empty();

        private Optional<Long> mfaDisabledAt = Optional.empty();

        private List<ExternalAccountWithVerification> externalAccounts;

        private List<SAMLAccount> samlAccounts;

        private Optional<Long> lastSignInAt = Optional.empty();

        private Boolean banned;

        private Boolean locked;

        private Optional<Long> lockoutExpiresInSeconds = Optional.empty();

        private Optional<Long> verificationAttemptsRemaining = Optional.empty();

        private Long updatedAt;

        private Long createdAt;

        private Boolean deleteSelfEnabled;

        private Boolean createOrganizationEnabled;

        private JsonNullable<Long> createOrganizationsLimit = JsonNullable.undefined();

        private Optional<Long> lastActiveAt = Optional.empty();

        private Optional<Long> legalAcceptedAt = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(UserObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        public Builder externalId(Optional<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        public Builder primaryEmailAddressId(String primaryEmailAddressId) {
            Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
            this.primaryEmailAddressId = Optional.ofNullable(primaryEmailAddressId);
            return this;
        }

        public Builder primaryEmailAddressId(Optional<String> primaryEmailAddressId) {
            Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
            this.primaryEmailAddressId = primaryEmailAddressId;
            return this;
        }


        public Builder primaryPhoneNumberId(String primaryPhoneNumberId) {
            Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
            this.primaryPhoneNumberId = Optional.ofNullable(primaryPhoneNumberId);
            return this;
        }

        public Builder primaryPhoneNumberId(Optional<String> primaryPhoneNumberId) {
            Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
            this.primaryPhoneNumberId = primaryPhoneNumberId;
            return this;
        }


        public Builder primaryWeb3WalletId(String primaryWeb3WalletId) {
            Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
            this.primaryWeb3WalletId = Optional.ofNullable(primaryWeb3WalletId);
            return this;
        }

        public Builder primaryWeb3WalletId(Optional<String> primaryWeb3WalletId) {
            Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
            this.primaryWeb3WalletId = primaryWeb3WalletId;
            return this;
        }


        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        public Builder username(Optional<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }


        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder profileImageUrl(String profileImageUrl) {
            Utils.checkNotNull(profileImageUrl, "profileImageUrl");
            this.profileImageUrl = Optional.ofNullable(profileImageUrl);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder profileImageUrl(Optional<String> profileImageUrl) {
            Utils.checkNotNull(profileImageUrl, "profileImageUrl");
            this.profileImageUrl = profileImageUrl;
            return this;
        }


        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        public Builder imageUrl(Optional<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }


        public Builder hasImage(boolean hasImage) {
            Utils.checkNotNull(hasImage, "hasImage");
            this.hasImage = hasImage;
            return this;
        }


        public Builder publicMetadata(Map<String, Object> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }


        public Builder privateMetadata(Map<String, Object> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = JsonNullable.of(privateMetadata);
            return this;
        }

        public Builder privateMetadata(JsonNullable<? extends Map<String, Object>> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }


        public Builder unsafeMetadata(Map<String, Object> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
            return this;
        }

        public Builder unsafeMetadata(Optional<? extends Map<String, Object>> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = unsafeMetadata;
            return this;
        }


        public Builder emailAddresses(List<EmailAddress> emailAddresses) {
            Utils.checkNotNull(emailAddresses, "emailAddresses");
            this.emailAddresses = emailAddresses;
            return this;
        }


        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }


        public Builder web3Wallets(List<Web3Wallet> web3Wallets) {
            Utils.checkNotNull(web3Wallets, "web3Wallets");
            this.web3Wallets = web3Wallets;
            return this;
        }


        public Builder passkeys(List<Passkey> passkeys) {
            Utils.checkNotNull(passkeys, "passkeys");
            this.passkeys = passkeys;
            return this;
        }


        public Builder passwordEnabled(boolean passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = passwordEnabled;
            return this;
        }


        public Builder twoFactorEnabled(boolean twoFactorEnabled) {
            Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
            this.twoFactorEnabled = twoFactorEnabled;
            return this;
        }


        public Builder totpEnabled(boolean totpEnabled) {
            Utils.checkNotNull(totpEnabled, "totpEnabled");
            this.totpEnabled = totpEnabled;
            return this;
        }


        public Builder backupCodeEnabled(boolean backupCodeEnabled) {
            Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
            this.backupCodeEnabled = backupCodeEnabled;
            return this;
        }


        /**
         * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
         */
        public Builder mfaEnabledAt(long mfaEnabledAt) {
            Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
            this.mfaEnabledAt = Optional.ofNullable(mfaEnabledAt);
            return this;
        }

        /**
         * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
         */
        public Builder mfaEnabledAt(Optional<Long> mfaEnabledAt) {
            Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
            this.mfaEnabledAt = mfaEnabledAt;
            return this;
        }


        /**
         * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
         */
        public Builder mfaDisabledAt(long mfaDisabledAt) {
            Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
            this.mfaDisabledAt = Optional.ofNullable(mfaDisabledAt);
            return this;
        }

        /**
         * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
         */
        public Builder mfaDisabledAt(Optional<Long> mfaDisabledAt) {
            Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
            this.mfaDisabledAt = mfaDisabledAt;
            return this;
        }


        public Builder externalAccounts(List<ExternalAccountWithVerification> externalAccounts) {
            Utils.checkNotNull(externalAccounts, "externalAccounts");
            this.externalAccounts = externalAccounts;
            return this;
        }


        public Builder samlAccounts(List<SAMLAccount> samlAccounts) {
            Utils.checkNotNull(samlAccounts, "samlAccounts");
            this.samlAccounts = samlAccounts;
            return this;
        }


        /**
         * Unix timestamp of last sign-in.
         */
        public Builder lastSignInAt(long lastSignInAt) {
            Utils.checkNotNull(lastSignInAt, "lastSignInAt");
            this.lastSignInAt = Optional.ofNullable(lastSignInAt);
            return this;
        }

        /**
         * Unix timestamp of last sign-in.
         */
        public Builder lastSignInAt(Optional<Long> lastSignInAt) {
            Utils.checkNotNull(lastSignInAt, "lastSignInAt");
            this.lastSignInAt = lastSignInAt;
            return this;
        }


        /**
         * Flag to denote whether user is banned or not.
         */
        public Builder banned(boolean banned) {
            Utils.checkNotNull(banned, "banned");
            this.banned = banned;
            return this;
        }


        /**
         * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
         */
        public Builder locked(boolean locked) {
            Utils.checkNotNull(locked, "locked");
            this.locked = locked;
            return this;
        }


        /**
         * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
         */
        public Builder lockoutExpiresInSeconds(long lockoutExpiresInSeconds) {
            Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
            this.lockoutExpiresInSeconds = Optional.ofNullable(lockoutExpiresInSeconds);
            return this;
        }

        /**
         * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
         */
        public Builder lockoutExpiresInSeconds(Optional<Long> lockoutExpiresInSeconds) {
            Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
            this.lockoutExpiresInSeconds = lockoutExpiresInSeconds;
            return this;
        }


        /**
         * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
         */
        public Builder verificationAttemptsRemaining(long verificationAttemptsRemaining) {
            Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
            this.verificationAttemptsRemaining = Optional.ofNullable(verificationAttemptsRemaining);
            return this;
        }

        /**
         * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
         */
        public Builder verificationAttemptsRemaining(Optional<Long> verificationAttemptsRemaining) {
            Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
            this.verificationAttemptsRemaining = verificationAttemptsRemaining;
            return this;
        }


        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * If enabled, user can delete themselves via FAPI.
         */
        public Builder deleteSelfEnabled(boolean deleteSelfEnabled) {
            Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
            this.deleteSelfEnabled = deleteSelfEnabled;
            return this;
        }


        /**
         * If enabled, user can create organizations via FAPI.
         */
        public Builder createOrganizationEnabled(boolean createOrganizationEnabled) {
            Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
            this.createOrganizationEnabled = createOrganizationEnabled;
            return this;
        }


        /**
         * The maximum number of organizations the user can create. 0 means unlimited.
         */
        public Builder createOrganizationsLimit(long createOrganizationsLimit) {
            Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
            this.createOrganizationsLimit = JsonNullable.of(createOrganizationsLimit);
            return this;
        }

        /**
         * The maximum number of organizations the user can create. 0 means unlimited.
         */
        public Builder createOrganizationsLimit(JsonNullable<Long> createOrganizationsLimit) {
            Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
            this.createOrganizationsLimit = createOrganizationsLimit;
            return this;
        }


        /**
         * Unix timestamp of the latest session activity, with day precision.
         */
        public Builder lastActiveAt(long lastActiveAt) {
            Utils.checkNotNull(lastActiveAt, "lastActiveAt");
            this.lastActiveAt = Optional.ofNullable(lastActiveAt);
            return this;
        }

        /**
         * Unix timestamp of the latest session activity, with day precision.
         */
        public Builder lastActiveAt(Optional<Long> lastActiveAt) {
            Utils.checkNotNull(lastActiveAt, "lastActiveAt");
            this.lastActiveAt = lastActiveAt;
            return this;
        }


        /**
         * Unix timestamp of when the user accepted the legal requirements.
         */
        public Builder legalAcceptedAt(long legalAcceptedAt) {
            Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
            this.legalAcceptedAt = Optional.ofNullable(legalAcceptedAt);
            return this;
        }

        /**
         * Unix timestamp of when the user accepted the legal requirements.
         */
        public Builder legalAcceptedAt(Optional<Long> legalAcceptedAt) {
            Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
            this.legalAcceptedAt = legalAcceptedAt;
            return this;
        }

        public User build() {

            return new User(
                id, object, externalId,
                primaryEmailAddressId, primaryPhoneNumberId, primaryWeb3WalletId,
                username, firstName, lastName,
                profileImageUrl, imageUrl, hasImage,
                publicMetadata, privateMetadata, unsafeMetadata,
                emailAddresses, phoneNumbers, web3Wallets,
                passkeys, passwordEnabled, twoFactorEnabled,
                totpEnabled, backupCodeEnabled, mfaEnabledAt,
                mfaDisabledAt, externalAccounts, samlAccounts,
                lastSignInAt, banned, locked,
                lockoutExpiresInSeconds, verificationAttemptsRemaining, updatedAt,
                createdAt, deleteSelfEnabled, createOrganizationEnabled,
                createOrganizationsLimit, lastActiveAt, legalAcceptedAt);
        }

    }
}
