/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class User {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends UserObject> object;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<String> externalId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_email_address_id")
    private JsonNullable<String> primaryEmailAddressId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_phone_number_id")
    private JsonNullable<String> primaryPhoneNumberId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_web3_wallet_id")
    private JsonNullable<String> primaryWeb3WalletId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private JsonNullable<String> username;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_image_url")
    @Deprecated
    private Optional<String> profileImageUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    private Optional<String> imageUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_image")
    private Optional<Boolean> hasImage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends PublicMetadata> publicMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private JsonNullable<? extends PrivateMetadata> privateMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unsafe_metadata")
    private Optional<? extends UnsafeMetadata> unsafeMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_addresses")
    private Optional<? extends List<EmailAddress>> emailAddresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("web3_wallets")
    private Optional<? extends List<Web3Wallet>> web3Wallets;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passkeys")
    private Optional<? extends List<SchemasPasskey>> passkeys;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_enabled")
    private Optional<Boolean> passwordEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("two_factor_enabled")
    private Optional<Boolean> twoFactorEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totp_enabled")
    private Optional<Boolean> totpEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup_code_enabled")
    private Optional<Boolean> backupCodeEnabled;

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mfa_enabled_at")
    private JsonNullable<Long> mfaEnabledAt;

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mfa_disabled_at")
    private JsonNullable<Long> mfaDisabledAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_accounts")
    private Optional<? extends List<ExternalAccounts>> externalAccounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("saml_accounts")
    private Optional<? extends List<SAMLAccount>> samlAccounts;

    /**
     * Unix timestamp of last sign-in.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_sign_in_at")
    private JsonNullable<Long> lastSignInAt;

    /**
     * Flag to denote whether user is banned or not.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banned")
    private Optional<Boolean> banned;

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    private Optional<Boolean> locked;

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lockout_expires_in_seconds")
    private JsonNullable<Long> lockoutExpiresInSeconds;

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verification_attempts_remaining")
    private JsonNullable<Long> verificationAttemptsRemaining;

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<Long> updatedAt;

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<Long> createdAt;

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delete_self_enabled")
    private Optional<Boolean> deleteSelfEnabled;

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_organization_enabled")
    private Optional<Boolean> createOrganizationEnabled;

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_organizations_limit")
    private JsonNullable<Long> createOrganizationsLimit;

    /**
     * Unix timestamp of the latest session activity, with day precision.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_active_at")
    private JsonNullable<Long> lastActiveAt;

    /**
     * Unix timestamp of when the user accepted the legal requirements.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legal_accepted_at")
    private JsonNullable<Long> legalAcceptedAt;

    @JsonCreator
    public User(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("object") Optional<? extends UserObject> object,
            @JsonProperty("external_id") JsonNullable<String> externalId,
            @JsonProperty("primary_email_address_id") JsonNullable<String> primaryEmailAddressId,
            @JsonProperty("primary_phone_number_id") JsonNullable<String> primaryPhoneNumberId,
            @JsonProperty("primary_web3_wallet_id") JsonNullable<String> primaryWeb3WalletId,
            @JsonProperty("username") JsonNullable<String> username,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("profile_image_url") Optional<String> profileImageUrl,
            @JsonProperty("image_url") Optional<String> imageUrl,
            @JsonProperty("has_image") Optional<Boolean> hasImage,
            @JsonProperty("public_metadata") Optional<? extends PublicMetadata> publicMetadata,
            @JsonProperty("private_metadata") JsonNullable<? extends PrivateMetadata> privateMetadata,
            @JsonProperty("unsafe_metadata") Optional<? extends UnsafeMetadata> unsafeMetadata,
            @JsonProperty("email_addresses") Optional<? extends List<EmailAddress>> emailAddresses,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("web3_wallets") Optional<? extends List<Web3Wallet>> web3Wallets,
            @JsonProperty("passkeys") Optional<? extends List<SchemasPasskey>> passkeys,
            @JsonProperty("password_enabled") Optional<Boolean> passwordEnabled,
            @JsonProperty("two_factor_enabled") Optional<Boolean> twoFactorEnabled,
            @JsonProperty("totp_enabled") Optional<Boolean> totpEnabled,
            @JsonProperty("backup_code_enabled") Optional<Boolean> backupCodeEnabled,
            @JsonProperty("mfa_enabled_at") JsonNullable<Long> mfaEnabledAt,
            @JsonProperty("mfa_disabled_at") JsonNullable<Long> mfaDisabledAt,
            @JsonProperty("external_accounts") Optional<? extends List<ExternalAccounts>> externalAccounts,
            @JsonProperty("saml_accounts") Optional<? extends List<SAMLAccount>> samlAccounts,
            @JsonProperty("last_sign_in_at") JsonNullable<Long> lastSignInAt,
            @JsonProperty("banned") Optional<Boolean> banned,
            @JsonProperty("locked") Optional<Boolean> locked,
            @JsonProperty("lockout_expires_in_seconds") JsonNullable<Long> lockoutExpiresInSeconds,
            @JsonProperty("verification_attempts_remaining") JsonNullable<Long> verificationAttemptsRemaining,
            @JsonProperty("updated_at") Optional<Long> updatedAt,
            @JsonProperty("created_at") Optional<Long> createdAt,
            @JsonProperty("delete_self_enabled") Optional<Boolean> deleteSelfEnabled,
            @JsonProperty("create_organization_enabled") Optional<Boolean> createOrganizationEnabled,
            @JsonProperty("create_organizations_limit") JsonNullable<Long> createOrganizationsLimit,
            @JsonProperty("last_active_at") JsonNullable<Long> lastActiveAt,
            @JsonProperty("legal_accepted_at") JsonNullable<Long> legalAcceptedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(hasImage, "hasImage");
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(web3Wallets, "web3Wallets");
        Utils.checkNotNull(passkeys, "passkeys");
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
        Utils.checkNotNull(totpEnabled, "totpEnabled");
        Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
        Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
        Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
        Utils.checkNotNull(externalAccounts, "externalAccounts");
        Utils.checkNotNull(samlAccounts, "samlAccounts");
        Utils.checkNotNull(lastSignInAt, "lastSignInAt");
        Utils.checkNotNull(banned, "banned");
        Utils.checkNotNull(locked, "locked");
        Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
        Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
        Utils.checkNotNull(lastActiveAt, "lastActiveAt");
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.id = id;
        this.object = object;
        this.externalId = externalId;
        this.primaryEmailAddressId = primaryEmailAddressId;
        this.primaryPhoneNumberId = primaryPhoneNumberId;
        this.primaryWeb3WalletId = primaryWeb3WalletId;
        this.username = username;
        this.firstName = firstName;
        this.lastName = lastName;
        this.profileImageUrl = profileImageUrl;
        this.imageUrl = imageUrl;
        this.hasImage = hasImage;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.unsafeMetadata = unsafeMetadata;
        this.emailAddresses = emailAddresses;
        this.phoneNumbers = phoneNumbers;
        this.web3Wallets = web3Wallets;
        this.passkeys = passkeys;
        this.passwordEnabled = passwordEnabled;
        this.twoFactorEnabled = twoFactorEnabled;
        this.totpEnabled = totpEnabled;
        this.backupCodeEnabled = backupCodeEnabled;
        this.mfaEnabledAt = mfaEnabledAt;
        this.mfaDisabledAt = mfaDisabledAt;
        this.externalAccounts = externalAccounts;
        this.samlAccounts = samlAccounts;
        this.lastSignInAt = lastSignInAt;
        this.banned = banned;
        this.locked = locked;
        this.lockoutExpiresInSeconds = lockoutExpiresInSeconds;
        this.verificationAttemptsRemaining = verificationAttemptsRemaining;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.deleteSelfEnabled = deleteSelfEnabled;
        this.createOrganizationEnabled = createOrganizationEnabled;
        this.createOrganizationsLimit = createOrganizationsLimit;
        this.lastActiveAt = lastActiveAt;
        this.legalAcceptedAt = legalAcceptedAt;
    }
    
    public User() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserObject> object() {
        return (Optional<UserObject>) object;
    }

    @JsonIgnore
    public JsonNullable<String> externalId() {
        return externalId;
    }

    @JsonIgnore
    public JsonNullable<String> primaryEmailAddressId() {
        return primaryEmailAddressId;
    }

    @JsonIgnore
    public JsonNullable<String> primaryPhoneNumberId() {
        return primaryPhoneNumberId;
    }

    @JsonIgnore
    public JsonNullable<String> primaryWeb3WalletId() {
        return primaryWeb3WalletId;
    }

    @JsonIgnore
    public JsonNullable<String> username() {
        return username;
    }

    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> profileImageUrl() {
        return profileImageUrl;
    }

    @JsonIgnore
    public Optional<String> imageUrl() {
        return imageUrl;
    }

    @JsonIgnore
    public Optional<Boolean> hasImage() {
        return hasImage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PublicMetadata> publicMetadata() {
        return (Optional<PublicMetadata>) publicMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PrivateMetadata> privateMetadata() {
        return (JsonNullable<PrivateMetadata>) privateMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UnsafeMetadata> unsafeMetadata() {
        return (Optional<UnsafeMetadata>) unsafeMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EmailAddress>> emailAddresses() {
        return (Optional<List<EmailAddress>>) emailAddresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Web3Wallet>> web3Wallets() {
        return (Optional<List<Web3Wallet>>) web3Wallets;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SchemasPasskey>> passkeys() {
        return (Optional<List<SchemasPasskey>>) passkeys;
    }

    @JsonIgnore
    public Optional<Boolean> passwordEnabled() {
        return passwordEnabled;
    }

    @JsonIgnore
    public Optional<Boolean> twoFactorEnabled() {
        return twoFactorEnabled;
    }

    @JsonIgnore
    public Optional<Boolean> totpEnabled() {
        return totpEnabled;
    }

    @JsonIgnore
    public Optional<Boolean> backupCodeEnabled() {
        return backupCodeEnabled;
    }

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     * 
     */
    @JsonIgnore
    public JsonNullable<Long> mfaEnabledAt() {
        return mfaEnabledAt;
    }

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     * 
     */
    @JsonIgnore
    public JsonNullable<Long> mfaDisabledAt() {
        return mfaDisabledAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ExternalAccounts>> externalAccounts() {
        return (Optional<List<ExternalAccounts>>) externalAccounts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SAMLAccount>> samlAccounts() {
        return (Optional<List<SAMLAccount>>) samlAccounts;
    }

    /**
     * Unix timestamp of last sign-in.
     * 
     */
    @JsonIgnore
    public JsonNullable<Long> lastSignInAt() {
        return lastSignInAt;
    }

    /**
     * Flag to denote whether user is banned or not.
     * 
     */
    @JsonIgnore
    public Optional<Boolean> banned() {
        return banned;
    }

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     * 
     */
    @JsonIgnore
    public Optional<Boolean> locked() {
        return locked;
    }

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     * 
     */
    @JsonIgnore
    public JsonNullable<Long> lockoutExpiresInSeconds() {
        return lockoutExpiresInSeconds;
    }

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     * 
     */
    @JsonIgnore
    public JsonNullable<Long> verificationAttemptsRemaining() {
        return verificationAttemptsRemaining;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return updatedAt;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonIgnore
    public Optional<Long> createdAt() {
        return createdAt;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    @JsonIgnore
    public Optional<Boolean> deleteSelfEnabled() {
        return deleteSelfEnabled;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    @JsonIgnore
    public Optional<Boolean> createOrganizationEnabled() {
        return createOrganizationEnabled;
    }

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     * 
     */
    @JsonIgnore
    public JsonNullable<Long> createOrganizationsLimit() {
        return createOrganizationsLimit;
    }

    /**
     * Unix timestamp of the latest session activity, with day precision.
     * 
     */
    @JsonIgnore
    public JsonNullable<Long> lastActiveAt() {
        return lastActiveAt;
    }

    /**
     * Unix timestamp of when the user accepted the legal requirements.
     * 
     */
    @JsonIgnore
    public JsonNullable<Long> legalAcceptedAt() {
        return legalAcceptedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public User withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public User withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public User withObject(UserObject object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public User withObject(Optional<? extends UserObject> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public User withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    public User withExternalId(JsonNullable<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public User withPrimaryEmailAddressId(String primaryEmailAddressId) {
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        this.primaryEmailAddressId = JsonNullable.of(primaryEmailAddressId);
        return this;
    }

    public User withPrimaryEmailAddressId(JsonNullable<String> primaryEmailAddressId) {
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        this.primaryEmailAddressId = primaryEmailAddressId;
        return this;
    }

    public User withPrimaryPhoneNumberId(String primaryPhoneNumberId) {
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        this.primaryPhoneNumberId = JsonNullable.of(primaryPhoneNumberId);
        return this;
    }

    public User withPrimaryPhoneNumberId(JsonNullable<String> primaryPhoneNumberId) {
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        this.primaryPhoneNumberId = primaryPhoneNumberId;
        return this;
    }

    public User withPrimaryWeb3WalletId(String primaryWeb3WalletId) {
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        this.primaryWeb3WalletId = JsonNullable.of(primaryWeb3WalletId);
        return this;
    }

    public User withPrimaryWeb3WalletId(JsonNullable<String> primaryWeb3WalletId) {
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        this.primaryWeb3WalletId = primaryWeb3WalletId;
        return this;
    }

    public User withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = JsonNullable.of(username);
        return this;
    }

    public User withUsername(JsonNullable<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public User withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    public User withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public User withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    public User withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public User withProfileImageUrl(String profileImageUrl) {
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        this.profileImageUrl = Optional.ofNullable(profileImageUrl);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public User withProfileImageUrl(Optional<String> profileImageUrl) {
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        this.profileImageUrl = profileImageUrl;
        return this;
    }

    public User withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }

    public User withImageUrl(Optional<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public User withHasImage(boolean hasImage) {
        Utils.checkNotNull(hasImage, "hasImage");
        this.hasImage = Optional.ofNullable(hasImage);
        return this;
    }

    public User withHasImage(Optional<Boolean> hasImage) {
        Utils.checkNotNull(hasImage, "hasImage");
        this.hasImage = hasImage;
        return this;
    }

    public User withPublicMetadata(PublicMetadata publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    public User withPublicMetadata(Optional<? extends PublicMetadata> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public User withPrivateMetadata(PrivateMetadata privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = JsonNullable.of(privateMetadata);
        return this;
    }

    public User withPrivateMetadata(JsonNullable<? extends PrivateMetadata> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    public User withUnsafeMetadata(UnsafeMetadata unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
        return this;
    }

    public User withUnsafeMetadata(Optional<? extends UnsafeMetadata> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = unsafeMetadata;
        return this;
    }

    public User withEmailAddresses(List<EmailAddress> emailAddresses) {
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        this.emailAddresses = Optional.ofNullable(emailAddresses);
        return this;
    }

    public User withEmailAddresses(Optional<? extends List<EmailAddress>> emailAddresses) {
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        this.emailAddresses = emailAddresses;
        return this;
    }

    public User withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public User withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public User withWeb3Wallets(List<Web3Wallet> web3Wallets) {
        Utils.checkNotNull(web3Wallets, "web3Wallets");
        this.web3Wallets = Optional.ofNullable(web3Wallets);
        return this;
    }

    public User withWeb3Wallets(Optional<? extends List<Web3Wallet>> web3Wallets) {
        Utils.checkNotNull(web3Wallets, "web3Wallets");
        this.web3Wallets = web3Wallets;
        return this;
    }

    public User withPasskeys(List<SchemasPasskey> passkeys) {
        Utils.checkNotNull(passkeys, "passkeys");
        this.passkeys = Optional.ofNullable(passkeys);
        return this;
    }

    public User withPasskeys(Optional<? extends List<SchemasPasskey>> passkeys) {
        Utils.checkNotNull(passkeys, "passkeys");
        this.passkeys = passkeys;
        return this;
    }

    public User withPasswordEnabled(boolean passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = Optional.ofNullable(passwordEnabled);
        return this;
    }

    public User withPasswordEnabled(Optional<Boolean> passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = passwordEnabled;
        return this;
    }

    public User withTwoFactorEnabled(boolean twoFactorEnabled) {
        Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
        this.twoFactorEnabled = Optional.ofNullable(twoFactorEnabled);
        return this;
    }

    public User withTwoFactorEnabled(Optional<Boolean> twoFactorEnabled) {
        Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
        this.twoFactorEnabled = twoFactorEnabled;
        return this;
    }

    public User withTotpEnabled(boolean totpEnabled) {
        Utils.checkNotNull(totpEnabled, "totpEnabled");
        this.totpEnabled = Optional.ofNullable(totpEnabled);
        return this;
    }

    public User withTotpEnabled(Optional<Boolean> totpEnabled) {
        Utils.checkNotNull(totpEnabled, "totpEnabled");
        this.totpEnabled = totpEnabled;
        return this;
    }

    public User withBackupCodeEnabled(boolean backupCodeEnabled) {
        Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
        this.backupCodeEnabled = Optional.ofNullable(backupCodeEnabled);
        return this;
    }

    public User withBackupCodeEnabled(Optional<Boolean> backupCodeEnabled) {
        Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
        this.backupCodeEnabled = backupCodeEnabled;
        return this;
    }

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     * 
     */
    public User withMfaEnabledAt(long mfaEnabledAt) {
        Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
        this.mfaEnabledAt = JsonNullable.of(mfaEnabledAt);
        return this;
    }

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     * 
     */
    public User withMfaEnabledAt(JsonNullable<Long> mfaEnabledAt) {
        Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
        this.mfaEnabledAt = mfaEnabledAt;
        return this;
    }

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     * 
     */
    public User withMfaDisabledAt(long mfaDisabledAt) {
        Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
        this.mfaDisabledAt = JsonNullable.of(mfaDisabledAt);
        return this;
    }

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     * 
     */
    public User withMfaDisabledAt(JsonNullable<Long> mfaDisabledAt) {
        Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
        this.mfaDisabledAt = mfaDisabledAt;
        return this;
    }

    public User withExternalAccounts(List<ExternalAccounts> externalAccounts) {
        Utils.checkNotNull(externalAccounts, "externalAccounts");
        this.externalAccounts = Optional.ofNullable(externalAccounts);
        return this;
    }

    public User withExternalAccounts(Optional<? extends List<ExternalAccounts>> externalAccounts) {
        Utils.checkNotNull(externalAccounts, "externalAccounts");
        this.externalAccounts = externalAccounts;
        return this;
    }

    public User withSamlAccounts(List<SAMLAccount> samlAccounts) {
        Utils.checkNotNull(samlAccounts, "samlAccounts");
        this.samlAccounts = Optional.ofNullable(samlAccounts);
        return this;
    }

    public User withSamlAccounts(Optional<? extends List<SAMLAccount>> samlAccounts) {
        Utils.checkNotNull(samlAccounts, "samlAccounts");
        this.samlAccounts = samlAccounts;
        return this;
    }

    /**
     * Unix timestamp of last sign-in.
     * 
     */
    public User withLastSignInAt(long lastSignInAt) {
        Utils.checkNotNull(lastSignInAt, "lastSignInAt");
        this.lastSignInAt = JsonNullable.of(lastSignInAt);
        return this;
    }

    /**
     * Unix timestamp of last sign-in.
     * 
     */
    public User withLastSignInAt(JsonNullable<Long> lastSignInAt) {
        Utils.checkNotNull(lastSignInAt, "lastSignInAt");
        this.lastSignInAt = lastSignInAt;
        return this;
    }

    /**
     * Flag to denote whether user is banned or not.
     * 
     */
    public User withBanned(boolean banned) {
        Utils.checkNotNull(banned, "banned");
        this.banned = Optional.ofNullable(banned);
        return this;
    }

    /**
     * Flag to denote whether user is banned or not.
     * 
     */
    public User withBanned(Optional<Boolean> banned) {
        Utils.checkNotNull(banned, "banned");
        this.banned = banned;
        return this;
    }

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     * 
     */
    public User withLocked(boolean locked) {
        Utils.checkNotNull(locked, "locked");
        this.locked = Optional.ofNullable(locked);
        return this;
    }

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     * 
     */
    public User withLocked(Optional<Boolean> locked) {
        Utils.checkNotNull(locked, "locked");
        this.locked = locked;
        return this;
    }

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     * 
     */
    public User withLockoutExpiresInSeconds(long lockoutExpiresInSeconds) {
        Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
        this.lockoutExpiresInSeconds = JsonNullable.of(lockoutExpiresInSeconds);
        return this;
    }

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     * 
     */
    public User withLockoutExpiresInSeconds(JsonNullable<Long> lockoutExpiresInSeconds) {
        Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
        this.lockoutExpiresInSeconds = lockoutExpiresInSeconds;
        return this;
    }

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     * 
     */
    public User withVerificationAttemptsRemaining(long verificationAttemptsRemaining) {
        Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
        this.verificationAttemptsRemaining = JsonNullable.of(verificationAttemptsRemaining);
        return this;
    }

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     * 
     */
    public User withVerificationAttemptsRemaining(JsonNullable<Long> verificationAttemptsRemaining) {
        Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
        this.verificationAttemptsRemaining = verificationAttemptsRemaining;
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public User withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public User withUpdatedAt(Optional<Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public User withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public User withCreatedAt(Optional<Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    public User withDeleteSelfEnabled(boolean deleteSelfEnabled) {
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        this.deleteSelfEnabled = Optional.ofNullable(deleteSelfEnabled);
        return this;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    public User withDeleteSelfEnabled(Optional<Boolean> deleteSelfEnabled) {
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        this.deleteSelfEnabled = deleteSelfEnabled;
        return this;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    public User withCreateOrganizationEnabled(boolean createOrganizationEnabled) {
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        this.createOrganizationEnabled = Optional.ofNullable(createOrganizationEnabled);
        return this;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    public User withCreateOrganizationEnabled(Optional<Boolean> createOrganizationEnabled) {
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        this.createOrganizationEnabled = createOrganizationEnabled;
        return this;
    }

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     * 
     */
    public User withCreateOrganizationsLimit(long createOrganizationsLimit) {
        Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
        this.createOrganizationsLimit = JsonNullable.of(createOrganizationsLimit);
        return this;
    }

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     * 
     */
    public User withCreateOrganizationsLimit(JsonNullable<Long> createOrganizationsLimit) {
        Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
        this.createOrganizationsLimit = createOrganizationsLimit;
        return this;
    }

    /**
     * Unix timestamp of the latest session activity, with day precision.
     * 
     */
    public User withLastActiveAt(long lastActiveAt) {
        Utils.checkNotNull(lastActiveAt, "lastActiveAt");
        this.lastActiveAt = JsonNullable.of(lastActiveAt);
        return this;
    }

    /**
     * Unix timestamp of the latest session activity, with day precision.
     * 
     */
    public User withLastActiveAt(JsonNullable<Long> lastActiveAt) {
        Utils.checkNotNull(lastActiveAt, "lastActiveAt");
        this.lastActiveAt = lastActiveAt;
        return this;
    }

    /**
     * Unix timestamp of when the user accepted the legal requirements.
     * 
     */
    public User withLegalAcceptedAt(long legalAcceptedAt) {
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.legalAcceptedAt = JsonNullable.of(legalAcceptedAt);
        return this;
    }

    /**
     * Unix timestamp of when the user accepted the legal requirements.
     * 
     */
    public User withLegalAcceptedAt(JsonNullable<Long> legalAcceptedAt) {
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.legalAcceptedAt = legalAcceptedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.primaryEmailAddressId, other.primaryEmailAddressId) &&
            Objects.deepEquals(this.primaryPhoneNumberId, other.primaryPhoneNumberId) &&
            Objects.deepEquals(this.primaryWeb3WalletId, other.primaryWeb3WalletId) &&
            Objects.deepEquals(this.username, other.username) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.profileImageUrl, other.profileImageUrl) &&
            Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            Objects.deepEquals(this.hasImage, other.hasImage) &&
            Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            Objects.deepEquals(this.privateMetadata, other.privateMetadata) &&
            Objects.deepEquals(this.unsafeMetadata, other.unsafeMetadata) &&
            Objects.deepEquals(this.emailAddresses, other.emailAddresses) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.web3Wallets, other.web3Wallets) &&
            Objects.deepEquals(this.passkeys, other.passkeys) &&
            Objects.deepEquals(this.passwordEnabled, other.passwordEnabled) &&
            Objects.deepEquals(this.twoFactorEnabled, other.twoFactorEnabled) &&
            Objects.deepEquals(this.totpEnabled, other.totpEnabled) &&
            Objects.deepEquals(this.backupCodeEnabled, other.backupCodeEnabled) &&
            Objects.deepEquals(this.mfaEnabledAt, other.mfaEnabledAt) &&
            Objects.deepEquals(this.mfaDisabledAt, other.mfaDisabledAt) &&
            Objects.deepEquals(this.externalAccounts, other.externalAccounts) &&
            Objects.deepEquals(this.samlAccounts, other.samlAccounts) &&
            Objects.deepEquals(this.lastSignInAt, other.lastSignInAt) &&
            Objects.deepEquals(this.banned, other.banned) &&
            Objects.deepEquals(this.locked, other.locked) &&
            Objects.deepEquals(this.lockoutExpiresInSeconds, other.lockoutExpiresInSeconds) &&
            Objects.deepEquals(this.verificationAttemptsRemaining, other.verificationAttemptsRemaining) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.deleteSelfEnabled, other.deleteSelfEnabled) &&
            Objects.deepEquals(this.createOrganizationEnabled, other.createOrganizationEnabled) &&
            Objects.deepEquals(this.createOrganizationsLimit, other.createOrganizationsLimit) &&
            Objects.deepEquals(this.lastActiveAt, other.lastActiveAt) &&
            Objects.deepEquals(this.legalAcceptedAt, other.legalAcceptedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            object,
            externalId,
            primaryEmailAddressId,
            primaryPhoneNumberId,
            primaryWeb3WalletId,
            username,
            firstName,
            lastName,
            profileImageUrl,
            imageUrl,
            hasImage,
            publicMetadata,
            privateMetadata,
            unsafeMetadata,
            emailAddresses,
            phoneNumbers,
            web3Wallets,
            passkeys,
            passwordEnabled,
            twoFactorEnabled,
            totpEnabled,
            backupCodeEnabled,
            mfaEnabledAt,
            mfaDisabledAt,
            externalAccounts,
            samlAccounts,
            lastSignInAt,
            banned,
            locked,
            lockoutExpiresInSeconds,
            verificationAttemptsRemaining,
            updatedAt,
            createdAt,
            deleteSelfEnabled,
            createOrganizationEnabled,
            createOrganizationsLimit,
            lastActiveAt,
            legalAcceptedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "id", id,
                "object", object,
                "externalId", externalId,
                "primaryEmailAddressId", primaryEmailAddressId,
                "primaryPhoneNumberId", primaryPhoneNumberId,
                "primaryWeb3WalletId", primaryWeb3WalletId,
                "username", username,
                "firstName", firstName,
                "lastName", lastName,
                "profileImageUrl", profileImageUrl,
                "imageUrl", imageUrl,
                "hasImage", hasImage,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "unsafeMetadata", unsafeMetadata,
                "emailAddresses", emailAddresses,
                "phoneNumbers", phoneNumbers,
                "web3Wallets", web3Wallets,
                "passkeys", passkeys,
                "passwordEnabled", passwordEnabled,
                "twoFactorEnabled", twoFactorEnabled,
                "totpEnabled", totpEnabled,
                "backupCodeEnabled", backupCodeEnabled,
                "mfaEnabledAt", mfaEnabledAt,
                "mfaDisabledAt", mfaDisabledAt,
                "externalAccounts", externalAccounts,
                "samlAccounts", samlAccounts,
                "lastSignInAt", lastSignInAt,
                "banned", banned,
                "locked", locked,
                "lockoutExpiresInSeconds", lockoutExpiresInSeconds,
                "verificationAttemptsRemaining", verificationAttemptsRemaining,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "deleteSelfEnabled", deleteSelfEnabled,
                "createOrganizationEnabled", createOrganizationEnabled,
                "createOrganizationsLimit", createOrganizationsLimit,
                "lastActiveAt", lastActiveAt,
                "legalAcceptedAt", legalAcceptedAt);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends UserObject> object = Optional.empty();
 
        private JsonNullable<String> externalId = JsonNullable.undefined();
 
        private JsonNullable<String> primaryEmailAddressId = JsonNullable.undefined();
 
        private JsonNullable<String> primaryPhoneNumberId = JsonNullable.undefined();
 
        private JsonNullable<String> primaryWeb3WalletId = JsonNullable.undefined();
 
        private JsonNullable<String> username = JsonNullable.undefined();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        @Deprecated
        private Optional<String> profileImageUrl = Optional.empty();
 
        private Optional<String> imageUrl = Optional.empty();
 
        private Optional<Boolean> hasImage = Optional.empty();
 
        private Optional<? extends PublicMetadata> publicMetadata = Optional.empty();
 
        private JsonNullable<? extends PrivateMetadata> privateMetadata = JsonNullable.undefined();
 
        private Optional<? extends UnsafeMetadata> unsafeMetadata = Optional.empty();
 
        private Optional<? extends List<EmailAddress>> emailAddresses = Optional.empty();
 
        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<? extends List<Web3Wallet>> web3Wallets = Optional.empty();
 
        private Optional<? extends List<SchemasPasskey>> passkeys = Optional.empty();
 
        private Optional<Boolean> passwordEnabled = Optional.empty();
 
        private Optional<Boolean> twoFactorEnabled = Optional.empty();
 
        private Optional<Boolean> totpEnabled = Optional.empty();
 
        private Optional<Boolean> backupCodeEnabled = Optional.empty();
 
        private JsonNullable<Long> mfaEnabledAt = JsonNullable.undefined();
 
        private JsonNullable<Long> mfaDisabledAt = JsonNullable.undefined();
 
        private Optional<? extends List<ExternalAccounts>> externalAccounts = Optional.empty();
 
        private Optional<? extends List<SAMLAccount>> samlAccounts = Optional.empty();
 
        private JsonNullable<Long> lastSignInAt = JsonNullable.undefined();
 
        private Optional<Boolean> banned = Optional.empty();
 
        private Optional<Boolean> locked = Optional.empty();
 
        private JsonNullable<Long> lockoutExpiresInSeconds = JsonNullable.undefined();
 
        private JsonNullable<Long> verificationAttemptsRemaining = JsonNullable.undefined();
 
        private Optional<Long> updatedAt = Optional.empty();
 
        private Optional<Long> createdAt = Optional.empty();
 
        private Optional<Boolean> deleteSelfEnabled = Optional.empty();
 
        private Optional<Boolean> createOrganizationEnabled = Optional.empty();
 
        private JsonNullable<Long> createOrganizationsLimit = JsonNullable.undefined();
 
        private JsonNullable<Long> lastActiveAt = JsonNullable.undefined();
 
        private JsonNullable<Long> legalAcceptedAt = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(UserObject object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(Optional<? extends UserObject> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        public Builder externalId(JsonNullable<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        public Builder primaryEmailAddressId(String primaryEmailAddressId) {
            Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
            this.primaryEmailAddressId = JsonNullable.of(primaryEmailAddressId);
            return this;
        }

        public Builder primaryEmailAddressId(JsonNullable<String> primaryEmailAddressId) {
            Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
            this.primaryEmailAddressId = primaryEmailAddressId;
            return this;
        }

        public Builder primaryPhoneNumberId(String primaryPhoneNumberId) {
            Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
            this.primaryPhoneNumberId = JsonNullable.of(primaryPhoneNumberId);
            return this;
        }

        public Builder primaryPhoneNumberId(JsonNullable<String> primaryPhoneNumberId) {
            Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
            this.primaryPhoneNumberId = primaryPhoneNumberId;
            return this;
        }

        public Builder primaryWeb3WalletId(String primaryWeb3WalletId) {
            Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
            this.primaryWeb3WalletId = JsonNullable.of(primaryWeb3WalletId);
            return this;
        }

        public Builder primaryWeb3WalletId(JsonNullable<String> primaryWeb3WalletId) {
            Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
            this.primaryWeb3WalletId = primaryWeb3WalletId;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = JsonNullable.of(username);
            return this;
        }

        public Builder username(JsonNullable<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder profileImageUrl(String profileImageUrl) {
            Utils.checkNotNull(profileImageUrl, "profileImageUrl");
            this.profileImageUrl = Optional.ofNullable(profileImageUrl);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder profileImageUrl(Optional<String> profileImageUrl) {
            Utils.checkNotNull(profileImageUrl, "profileImageUrl");
            this.profileImageUrl = profileImageUrl;
            return this;
        }

        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        public Builder imageUrl(Optional<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        public Builder hasImage(boolean hasImage) {
            Utils.checkNotNull(hasImage, "hasImage");
            this.hasImage = Optional.ofNullable(hasImage);
            return this;
        }

        public Builder hasImage(Optional<Boolean> hasImage) {
            Utils.checkNotNull(hasImage, "hasImage");
            this.hasImage = hasImage;
            return this;
        }

        public Builder publicMetadata(PublicMetadata publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        public Builder publicMetadata(Optional<? extends PublicMetadata> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        public Builder privateMetadata(PrivateMetadata privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = JsonNullable.of(privateMetadata);
            return this;
        }

        public Builder privateMetadata(JsonNullable<? extends PrivateMetadata> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }

        public Builder unsafeMetadata(UnsafeMetadata unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
            return this;
        }

        public Builder unsafeMetadata(Optional<? extends UnsafeMetadata> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = unsafeMetadata;
            return this;
        }

        public Builder emailAddresses(List<EmailAddress> emailAddresses) {
            Utils.checkNotNull(emailAddresses, "emailAddresses");
            this.emailAddresses = Optional.ofNullable(emailAddresses);
            return this;
        }

        public Builder emailAddresses(Optional<? extends List<EmailAddress>> emailAddresses) {
            Utils.checkNotNull(emailAddresses, "emailAddresses");
            this.emailAddresses = emailAddresses;
            return this;
        }

        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder web3Wallets(List<Web3Wallet> web3Wallets) {
            Utils.checkNotNull(web3Wallets, "web3Wallets");
            this.web3Wallets = Optional.ofNullable(web3Wallets);
            return this;
        }

        public Builder web3Wallets(Optional<? extends List<Web3Wallet>> web3Wallets) {
            Utils.checkNotNull(web3Wallets, "web3Wallets");
            this.web3Wallets = web3Wallets;
            return this;
        }

        public Builder passkeys(List<SchemasPasskey> passkeys) {
            Utils.checkNotNull(passkeys, "passkeys");
            this.passkeys = Optional.ofNullable(passkeys);
            return this;
        }

        public Builder passkeys(Optional<? extends List<SchemasPasskey>> passkeys) {
            Utils.checkNotNull(passkeys, "passkeys");
            this.passkeys = passkeys;
            return this;
        }

        public Builder passwordEnabled(boolean passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = Optional.ofNullable(passwordEnabled);
            return this;
        }

        public Builder passwordEnabled(Optional<Boolean> passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = passwordEnabled;
            return this;
        }

        public Builder twoFactorEnabled(boolean twoFactorEnabled) {
            Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
            this.twoFactorEnabled = Optional.ofNullable(twoFactorEnabled);
            return this;
        }

        public Builder twoFactorEnabled(Optional<Boolean> twoFactorEnabled) {
            Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
            this.twoFactorEnabled = twoFactorEnabled;
            return this;
        }

        public Builder totpEnabled(boolean totpEnabled) {
            Utils.checkNotNull(totpEnabled, "totpEnabled");
            this.totpEnabled = Optional.ofNullable(totpEnabled);
            return this;
        }

        public Builder totpEnabled(Optional<Boolean> totpEnabled) {
            Utils.checkNotNull(totpEnabled, "totpEnabled");
            this.totpEnabled = totpEnabled;
            return this;
        }

        public Builder backupCodeEnabled(boolean backupCodeEnabled) {
            Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
            this.backupCodeEnabled = Optional.ofNullable(backupCodeEnabled);
            return this;
        }

        public Builder backupCodeEnabled(Optional<Boolean> backupCodeEnabled) {
            Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
            this.backupCodeEnabled = backupCodeEnabled;
            return this;
        }

        /**
         * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
         * 
         */
        public Builder mfaEnabledAt(long mfaEnabledAt) {
            Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
            this.mfaEnabledAt = JsonNullable.of(mfaEnabledAt);
            return this;
        }

        /**
         * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
         * 
         */
        public Builder mfaEnabledAt(JsonNullable<Long> mfaEnabledAt) {
            Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
            this.mfaEnabledAt = mfaEnabledAt;
            return this;
        }

        /**
         * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
         * 
         */
        public Builder mfaDisabledAt(long mfaDisabledAt) {
            Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
            this.mfaDisabledAt = JsonNullable.of(mfaDisabledAt);
            return this;
        }

        /**
         * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
         * 
         */
        public Builder mfaDisabledAt(JsonNullable<Long> mfaDisabledAt) {
            Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
            this.mfaDisabledAt = mfaDisabledAt;
            return this;
        }

        public Builder externalAccounts(List<ExternalAccounts> externalAccounts) {
            Utils.checkNotNull(externalAccounts, "externalAccounts");
            this.externalAccounts = Optional.ofNullable(externalAccounts);
            return this;
        }

        public Builder externalAccounts(Optional<? extends List<ExternalAccounts>> externalAccounts) {
            Utils.checkNotNull(externalAccounts, "externalAccounts");
            this.externalAccounts = externalAccounts;
            return this;
        }

        public Builder samlAccounts(List<SAMLAccount> samlAccounts) {
            Utils.checkNotNull(samlAccounts, "samlAccounts");
            this.samlAccounts = Optional.ofNullable(samlAccounts);
            return this;
        }

        public Builder samlAccounts(Optional<? extends List<SAMLAccount>> samlAccounts) {
            Utils.checkNotNull(samlAccounts, "samlAccounts");
            this.samlAccounts = samlAccounts;
            return this;
        }

        /**
         * Unix timestamp of last sign-in.
         * 
         */
        public Builder lastSignInAt(long lastSignInAt) {
            Utils.checkNotNull(lastSignInAt, "lastSignInAt");
            this.lastSignInAt = JsonNullable.of(lastSignInAt);
            return this;
        }

        /**
         * Unix timestamp of last sign-in.
         * 
         */
        public Builder lastSignInAt(JsonNullable<Long> lastSignInAt) {
            Utils.checkNotNull(lastSignInAt, "lastSignInAt");
            this.lastSignInAt = lastSignInAt;
            return this;
        }

        /**
         * Flag to denote whether user is banned or not.
         * 
         */
        public Builder banned(boolean banned) {
            Utils.checkNotNull(banned, "banned");
            this.banned = Optional.ofNullable(banned);
            return this;
        }

        /**
         * Flag to denote whether user is banned or not.
         * 
         */
        public Builder banned(Optional<Boolean> banned) {
            Utils.checkNotNull(banned, "banned");
            this.banned = banned;
            return this;
        }

        /**
         * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
         * 
         */
        public Builder locked(boolean locked) {
            Utils.checkNotNull(locked, "locked");
            this.locked = Optional.ofNullable(locked);
            return this;
        }

        /**
         * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
         * 
         */
        public Builder locked(Optional<Boolean> locked) {
            Utils.checkNotNull(locked, "locked");
            this.locked = locked;
            return this;
        }

        /**
         * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
         * 
         */
        public Builder lockoutExpiresInSeconds(long lockoutExpiresInSeconds) {
            Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
            this.lockoutExpiresInSeconds = JsonNullable.of(lockoutExpiresInSeconds);
            return this;
        }

        /**
         * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
         * 
         */
        public Builder lockoutExpiresInSeconds(JsonNullable<Long> lockoutExpiresInSeconds) {
            Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
            this.lockoutExpiresInSeconds = lockoutExpiresInSeconds;
            return this;
        }

        /**
         * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
         * 
         */
        public Builder verificationAttemptsRemaining(long verificationAttemptsRemaining) {
            Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
            this.verificationAttemptsRemaining = JsonNullable.of(verificationAttemptsRemaining);
            return this;
        }

        /**
         * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
         * 
         */
        public Builder verificationAttemptsRemaining(JsonNullable<Long> verificationAttemptsRemaining) {
            Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
            this.verificationAttemptsRemaining = verificationAttemptsRemaining;
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(Optional<Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(Optional<Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * If enabled, user can delete themselves via FAPI.
         * 
         */
        public Builder deleteSelfEnabled(boolean deleteSelfEnabled) {
            Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
            this.deleteSelfEnabled = Optional.ofNullable(deleteSelfEnabled);
            return this;
        }

        /**
         * If enabled, user can delete themselves via FAPI.
         * 
         */
        public Builder deleteSelfEnabled(Optional<Boolean> deleteSelfEnabled) {
            Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
            this.deleteSelfEnabled = deleteSelfEnabled;
            return this;
        }

        /**
         * If enabled, user can create organizations via FAPI.
         * 
         */
        public Builder createOrganizationEnabled(boolean createOrganizationEnabled) {
            Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
            this.createOrganizationEnabled = Optional.ofNullable(createOrganizationEnabled);
            return this;
        }

        /**
         * If enabled, user can create organizations via FAPI.
         * 
         */
        public Builder createOrganizationEnabled(Optional<Boolean> createOrganizationEnabled) {
            Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
            this.createOrganizationEnabled = createOrganizationEnabled;
            return this;
        }

        /**
         * The maximum number of organizations the user can create. 0 means unlimited.
         * 
         */
        public Builder createOrganizationsLimit(long createOrganizationsLimit) {
            Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
            this.createOrganizationsLimit = JsonNullable.of(createOrganizationsLimit);
            return this;
        }

        /**
         * The maximum number of organizations the user can create. 0 means unlimited.
         * 
         */
        public Builder createOrganizationsLimit(JsonNullable<Long> createOrganizationsLimit) {
            Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
            this.createOrganizationsLimit = createOrganizationsLimit;
            return this;
        }

        /**
         * Unix timestamp of the latest session activity, with day precision.
         * 
         */
        public Builder lastActiveAt(long lastActiveAt) {
            Utils.checkNotNull(lastActiveAt, "lastActiveAt");
            this.lastActiveAt = JsonNullable.of(lastActiveAt);
            return this;
        }

        /**
         * Unix timestamp of the latest session activity, with day precision.
         * 
         */
        public Builder lastActiveAt(JsonNullable<Long> lastActiveAt) {
            Utils.checkNotNull(lastActiveAt, "lastActiveAt");
            this.lastActiveAt = lastActiveAt;
            return this;
        }

        /**
         * Unix timestamp of when the user accepted the legal requirements.
         * 
         */
        public Builder legalAcceptedAt(long legalAcceptedAt) {
            Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
            this.legalAcceptedAt = JsonNullable.of(legalAcceptedAt);
            return this;
        }

        /**
         * Unix timestamp of when the user accepted the legal requirements.
         * 
         */
        public Builder legalAcceptedAt(JsonNullable<Long> legalAcceptedAt) {
            Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
            this.legalAcceptedAt = legalAcceptedAt;
            return this;
        }
        
        public User build() {
            return new User(
                id,
                object,
                externalId,
                primaryEmailAddressId,
                primaryPhoneNumberId,
                primaryWeb3WalletId,
                username,
                firstName,
                lastName,
                profileImageUrl,
                imageUrl,
                hasImage,
                publicMetadata,
                privateMetadata,
                unsafeMetadata,
                emailAddresses,
                phoneNumbers,
                web3Wallets,
                passkeys,
                passwordEnabled,
                twoFactorEnabled,
                totpEnabled,
                backupCodeEnabled,
                mfaEnabledAt,
                mfaDisabledAt,
                externalAccounts,
                samlAccounts,
                lastSignInAt,
                banned,
                locked,
                lockoutExpiresInSeconds,
                verificationAttemptsRemaining,
                updatedAt,
                createdAt,
                deleteSelfEnabled,
                createOrganizationEnabled,
                createOrganizationsLimit,
                lastActiveAt,
                legalAcceptedAt);
        }
    }
}

