/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ExternalAccountWithVerification {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private ExternalAccountWithVerificationObject object;


    @JsonProperty("id")
    private String id;


    @JsonProperty("provider")
    private String provider;


    @JsonProperty("identification_id")
    private String identificationId;

    /**
     * The unique ID of the user in the external provider's system
     */
    @JsonProperty("provider_user_id")
    private String providerUserId;


    @JsonProperty("approved_scopes")
    private String approvedScopes;


    @JsonProperty("email_address")
    private String emailAddress;


    @JsonProperty("first_name")
    private String firstName;


    @JsonProperty("last_name")
    private String lastName;

    /**
     * Please use `image_url` instead
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar_url")
    @Deprecated
    private Optional<String> avatarUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    private JsonNullable<String> imageUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private JsonNullable<String> username;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private JsonNullable<String> phoneNumber;


    @JsonProperty("public_metadata")
    private Map<String, Object> publicMetadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private JsonNullable<String> label;

    /**
     * Unix timestamp of creation
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of creation
     */
    @JsonProperty("updated_at")
    private long updatedAt;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("verification")
    private Optional<? extends ExternalAccountWithVerificationVerification> verification;


    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonCreator
    public ExternalAccountWithVerification(
            @JsonProperty("object") ExternalAccountWithVerificationObject object,
            @JsonProperty("id") String id,
            @JsonProperty("provider") String provider,
            @JsonProperty("identification_id") String identificationId,
            @JsonProperty("provider_user_id") String providerUserId,
            @JsonProperty("approved_scopes") String approvedScopes,
            @JsonProperty("email_address") String emailAddress,
            @JsonProperty("first_name") String firstName,
            @JsonProperty("last_name") String lastName,
            @JsonProperty("avatar_url") Optional<String> avatarUrl,
            @JsonProperty("image_url") JsonNullable<String> imageUrl,
            @JsonProperty("username") JsonNullable<String> username,
            @JsonProperty("phone_number") JsonNullable<String> phoneNumber,
            @JsonProperty("public_metadata") Map<String, Object> publicMetadata,
            @JsonProperty("label") JsonNullable<String> label,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt,
            @JsonProperty("verification") Optional<? extends ExternalAccountWithVerificationVerification> verification) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(identificationId, "identificationId");
        Utils.checkNotNull(providerUserId, "providerUserId");
        Utils.checkNotNull(approvedScopes, "approvedScopes");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        publicMetadata = Utils.emptyMapIfNull(publicMetadata);
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(verification, "verification");
        this.object = object;
        this.id = id;
        this.provider = provider;
        this.identificationId = identificationId;
        this.providerUserId = providerUserId;
        this.approvedScopes = approvedScopes;
        this.emailAddress = emailAddress;
        this.firstName = firstName;
        this.lastName = lastName;
        this.avatarUrl = avatarUrl;
        this.imageUrl = imageUrl;
        this.username = username;
        this.phoneNumber = phoneNumber;
        this.publicMetadata = publicMetadata;
        this.label = label;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.verification = verification;
        this.additionalProperties = new HashMap<>();
    }
    
    public ExternalAccountWithVerification(
            ExternalAccountWithVerificationObject object,
            String id,
            String provider,
            String identificationId,
            String providerUserId,
            String approvedScopes,
            String emailAddress,
            String firstName,
            String lastName,
            Map<String, Object> publicMetadata,
            long createdAt,
            long updatedAt) {
        this(object, id, provider,
            identificationId, providerUserId, approvedScopes,
            emailAddress, firstName, lastName,
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), publicMetadata, JsonNullable.undefined(),
            createdAt, updatedAt, Optional.empty());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public ExternalAccountWithVerificationObject object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String provider() {
        return provider;
    }

    @JsonIgnore
    public String identificationId() {
        return identificationId;
    }

    /**
     * The unique ID of the user in the external provider's system
     */
    @JsonIgnore
    public String providerUserId() {
        return providerUserId;
    }

    @JsonIgnore
    public String approvedScopes() {
        return approvedScopes;
    }

    @JsonIgnore
    public String emailAddress() {
        return emailAddress;
    }

    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    /**
     * Please use `image_url` instead
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> avatarUrl() {
        return avatarUrl;
    }

    @JsonIgnore
    public JsonNullable<String> imageUrl() {
        return imageUrl;
    }

    @JsonIgnore
    public JsonNullable<String> username() {
        return username;
    }

    @JsonIgnore
    public JsonNullable<String> phoneNumber() {
        return phoneNumber;
    }

    @JsonIgnore
    public Map<String, Object> publicMetadata() {
        return publicMetadata;
    }

    @JsonIgnore
    public JsonNullable<String> label() {
        return label;
    }

    /**
     * Unix timestamp of creation
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of creation
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExternalAccountWithVerificationVerification> verification() {
        return (Optional<ExternalAccountWithVerificationVerification>) verification;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public ExternalAccountWithVerification withObject(ExternalAccountWithVerificationObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public ExternalAccountWithVerification withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ExternalAccountWithVerification withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public ExternalAccountWithVerification withIdentificationId(String identificationId) {
        Utils.checkNotNull(identificationId, "identificationId");
        this.identificationId = identificationId;
        return this;
    }

    /**
     * The unique ID of the user in the external provider's system
     */
    public ExternalAccountWithVerification withProviderUserId(String providerUserId) {
        Utils.checkNotNull(providerUserId, "providerUserId");
        this.providerUserId = providerUserId;
        return this;
    }

    public ExternalAccountWithVerification withApprovedScopes(String approvedScopes) {
        Utils.checkNotNull(approvedScopes, "approvedScopes");
        this.approvedScopes = approvedScopes;
        return this;
    }

    public ExternalAccountWithVerification withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    public ExternalAccountWithVerification withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public ExternalAccountWithVerification withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Please use `image_url` instead
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ExternalAccountWithVerification withAvatarUrl(String avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = Optional.ofNullable(avatarUrl);
        return this;
    }


    /**
     * Please use `image_url` instead
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ExternalAccountWithVerification withAvatarUrl(Optional<String> avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = avatarUrl;
        return this;
    }

    public ExternalAccountWithVerification withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = JsonNullable.of(imageUrl);
        return this;
    }

    public ExternalAccountWithVerification withImageUrl(JsonNullable<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public ExternalAccountWithVerification withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = JsonNullable.of(username);
        return this;
    }

    public ExternalAccountWithVerification withUsername(JsonNullable<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public ExternalAccountWithVerification withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = JsonNullable.of(phoneNumber);
        return this;
    }

    public ExternalAccountWithVerification withPhoneNumber(JsonNullable<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    public ExternalAccountWithVerification withPublicMetadata(Map<String, Object> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public ExternalAccountWithVerification withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = JsonNullable.of(label);
        return this;
    }

    public ExternalAccountWithVerification withLabel(JsonNullable<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    /**
     * Unix timestamp of creation
     */
    public ExternalAccountWithVerification withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of creation
     */
    public ExternalAccountWithVerification withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public ExternalAccountWithVerification withVerification(ExternalAccountWithVerificationVerification verification) {
        Utils.checkNotNull(verification, "verification");
        this.verification = Optional.ofNullable(verification);
        return this;
    }


    public ExternalAccountWithVerification withVerification(Optional<? extends ExternalAccountWithVerificationVerification> verification) {
        Utils.checkNotNull(verification, "verification");
        this.verification = verification;
        return this;
    }

    @JsonAnySetter
    public ExternalAccountWithVerification withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    public ExternalAccountWithVerification withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExternalAccountWithVerification other = (ExternalAccountWithVerification) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.identificationId, other.identificationId) &&
            Utils.enhancedDeepEquals(this.providerUserId, other.providerUserId) &&
            Utils.enhancedDeepEquals(this.approvedScopes, other.approvedScopes) &&
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.avatarUrl, other.avatarUrl) &&
            Utils.enhancedDeepEquals(this.imageUrl, other.imageUrl) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber) &&
            Utils.enhancedDeepEquals(this.publicMetadata, other.publicMetadata) &&
            Utils.enhancedDeepEquals(this.label, other.label) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.verification, other.verification) &&
            Utils.enhancedDeepEquals(this.additionalProperties, other.additionalProperties);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, provider,
            identificationId, providerUserId, approvedScopes,
            emailAddress, firstName, lastName,
            avatarUrl, imageUrl, username,
            phoneNumber, publicMetadata, label,
            createdAt, updatedAt, verification,
            additionalProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExternalAccountWithVerification.class,
                "object", object,
                "id", id,
                "provider", provider,
                "identificationId", identificationId,
                "providerUserId", providerUserId,
                "approvedScopes", approvedScopes,
                "emailAddress", emailAddress,
                "firstName", firstName,
                "lastName", lastName,
                "avatarUrl", avatarUrl,
                "imageUrl", imageUrl,
                "username", username,
                "phoneNumber", phoneNumber,
                "publicMetadata", publicMetadata,
                "label", label,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "verification", verification,
                "additionalProperties", additionalProperties);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ExternalAccountWithVerificationObject object;

        private String id;

        private String provider;

        private String identificationId;

        private String providerUserId;

        private String approvedScopes;

        private String emailAddress;

        private String firstName;

        private String lastName;

        @Deprecated
        private Optional<String> avatarUrl = Optional.empty();

        private JsonNullable<String> imageUrl = JsonNullable.undefined();

        private JsonNullable<String> username = JsonNullable.undefined();

        private JsonNullable<String> phoneNumber = JsonNullable.undefined();

        private Map<String, Object> publicMetadata;

        private JsonNullable<String> label = JsonNullable.undefined();

        private Long createdAt;

        private Long updatedAt;

        private Optional<? extends ExternalAccountWithVerificationVerification> verification = Optional.empty();

        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(ExternalAccountWithVerificationObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        public Builder identificationId(String identificationId) {
            Utils.checkNotNull(identificationId, "identificationId");
            this.identificationId = identificationId;
            return this;
        }


        /**
         * The unique ID of the user in the external provider's system
         */
        public Builder providerUserId(String providerUserId) {
            Utils.checkNotNull(providerUserId, "providerUserId");
            this.providerUserId = providerUserId;
            return this;
        }


        public Builder approvedScopes(String approvedScopes) {
            Utils.checkNotNull(approvedScopes, "approvedScopes");
            this.approvedScopes = approvedScopes;
            return this;
        }


        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }


        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * Please use `image_url` instead
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder avatarUrl(String avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = Optional.ofNullable(avatarUrl);
            return this;
        }

        /**
         * Please use `image_url` instead
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder avatarUrl(Optional<String> avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = avatarUrl;
            return this;
        }


        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = JsonNullable.of(imageUrl);
            return this;
        }

        public Builder imageUrl(JsonNullable<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }


        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = JsonNullable.of(username);
            return this;
        }

        public Builder username(JsonNullable<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }


        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = JsonNullable.of(phoneNumber);
            return this;
        }

        public Builder phoneNumber(JsonNullable<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }


        public Builder publicMetadata(Map<String, Object> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }


        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = JsonNullable.of(label);
            return this;
        }

        public Builder label(JsonNullable<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }


        /**
         * Unix timestamp of creation
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp of creation
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder verification(ExternalAccountWithVerificationVerification verification) {
            Utils.checkNotNull(verification, "verification");
            this.verification = Optional.ofNullable(verification);
            return this;
        }

        public Builder verification(Optional<? extends ExternalAccountWithVerificationVerification> verification) {
            Utils.checkNotNull(verification, "verification");
            this.verification = verification;
            return this;
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public ExternalAccountWithVerification build() {

            return new ExternalAccountWithVerification(
                object, id, provider,
                identificationId, providerUserId, approvedScopes,
                emailAddress, firstName, lastName,
                avatarUrl, imageUrl, username,
                phoneNumber, publicMetadata, label,
                createdAt, updatedAt, verification)
                .withAdditionalProperties(additionalProperties);
        }

    }
}
