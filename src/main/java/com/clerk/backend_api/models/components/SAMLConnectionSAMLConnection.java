/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class SAMLConnectionSAMLConnection {

    @JsonProperty("id")
    private String id;

    @JsonProperty("name")
    private String name;

    @JsonProperty("domain")
    private String domain;

    @JsonProperty("active")
    private boolean active;

    @JsonProperty("provider")
    private String provider;

    @JsonProperty("sync_user_attributes")
    private boolean syncUserAttributes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_subdomains")
    private Optional<Boolean> allowSubdomains;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_idp_initiated")
    private Optional<Boolean> allowIdpInitiated;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disable_additional_identifications")
    private Optional<Boolean> disableAdditionalIdentifications;

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    @JsonCreator
    public SAMLConnectionSAMLConnection(
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("domain") String domain,
            @JsonProperty("active") boolean active,
            @JsonProperty("provider") String provider,
            @JsonProperty("sync_user_attributes") boolean syncUserAttributes,
            @JsonProperty("allow_subdomains") Optional<Boolean> allowSubdomains,
            @JsonProperty("allow_idp_initiated") Optional<Boolean> allowIdpInitiated,
            @JsonProperty("disable_additional_identifications") Optional<Boolean> disableAdditionalIdentifications,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.name = name;
        this.domain = domain;
        this.active = active;
        this.provider = provider;
        this.syncUserAttributes = syncUserAttributes;
        this.allowSubdomains = allowSubdomains;
        this.allowIdpInitiated = allowIdpInitiated;
        this.disableAdditionalIdentifications = disableAdditionalIdentifications;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public SAMLConnectionSAMLConnection(
            String id,
            String name,
            String domain,
            boolean active,
            String provider,
            boolean syncUserAttributes,
            long createdAt,
            long updatedAt) {
        this(id, name, domain, active, provider, syncUserAttributes, Optional.empty(), Optional.empty(), Optional.empty(), createdAt, updatedAt);
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String domain() {
        return domain;
    }

    @JsonIgnore
    public boolean active() {
        return active;
    }

    @JsonIgnore
    public String provider() {
        return provider;
    }

    @JsonIgnore
    public boolean syncUserAttributes() {
        return syncUserAttributes;
    }

    @JsonIgnore
    public Optional<Boolean> allowSubdomains() {
        return allowSubdomains;
    }

    @JsonIgnore
    public Optional<Boolean> allowIdpInitiated() {
        return allowIdpInitiated;
    }

    @JsonIgnore
    public Optional<Boolean> disableAdditionalIdentifications() {
        return disableAdditionalIdentifications;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SAMLConnectionSAMLConnection withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public SAMLConnectionSAMLConnection withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public SAMLConnectionSAMLConnection withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    public SAMLConnectionSAMLConnection withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public SAMLConnectionSAMLConnection withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public SAMLConnectionSAMLConnection withSyncUserAttributes(boolean syncUserAttributes) {
        Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
        this.syncUserAttributes = syncUserAttributes;
        return this;
    }

    public SAMLConnectionSAMLConnection withAllowSubdomains(boolean allowSubdomains) {
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        this.allowSubdomains = Optional.ofNullable(allowSubdomains);
        return this;
    }

    public SAMLConnectionSAMLConnection withAllowSubdomains(Optional<Boolean> allowSubdomains) {
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        this.allowSubdomains = allowSubdomains;
        return this;
    }

    public SAMLConnectionSAMLConnection withAllowIdpInitiated(boolean allowIdpInitiated) {
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        this.allowIdpInitiated = Optional.ofNullable(allowIdpInitiated);
        return this;
    }

    public SAMLConnectionSAMLConnection withAllowIdpInitiated(Optional<Boolean> allowIdpInitiated) {
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        this.allowIdpInitiated = allowIdpInitiated;
        return this;
    }

    public SAMLConnectionSAMLConnection withDisableAdditionalIdentifications(boolean disableAdditionalIdentifications) {
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        this.disableAdditionalIdentifications = Optional.ofNullable(disableAdditionalIdentifications);
        return this;
    }

    public SAMLConnectionSAMLConnection withDisableAdditionalIdentifications(Optional<Boolean> disableAdditionalIdentifications) {
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        this.disableAdditionalIdentifications = disableAdditionalIdentifications;
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public SAMLConnectionSAMLConnection withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public SAMLConnectionSAMLConnection withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SAMLConnectionSAMLConnection other = (SAMLConnectionSAMLConnection) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.domain, other.domain) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.syncUserAttributes, other.syncUserAttributes) &&
            Objects.deepEquals(this.allowSubdomains, other.allowSubdomains) &&
            Objects.deepEquals(this.allowIdpInitiated, other.allowIdpInitiated) &&
            Objects.deepEquals(this.disableAdditionalIdentifications, other.disableAdditionalIdentifications) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            domain,
            active,
            provider,
            syncUserAttributes,
            allowSubdomains,
            allowIdpInitiated,
            disableAdditionalIdentifications,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SAMLConnectionSAMLConnection.class,
                "id", id,
                "name", name,
                "domain", domain,
                "active", active,
                "provider", provider,
                "syncUserAttributes", syncUserAttributes,
                "allowSubdomains", allowSubdomains,
                "allowIdpInitiated", allowIdpInitiated,
                "disableAdditionalIdentifications", disableAdditionalIdentifications,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String name;
 
        private String domain;
 
        private Boolean active;
 
        private String provider;
 
        private Boolean syncUserAttributes;
 
        private Optional<Boolean> allowSubdomains = Optional.empty();
 
        private Optional<Boolean> allowIdpInitiated = Optional.empty();
 
        private Optional<Boolean> disableAdditionalIdentifications = Optional.empty();
 
        private Long createdAt;
 
        private Long updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        public Builder syncUserAttributes(boolean syncUserAttributes) {
            Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
            this.syncUserAttributes = syncUserAttributes;
            return this;
        }

        public Builder allowSubdomains(boolean allowSubdomains) {
            Utils.checkNotNull(allowSubdomains, "allowSubdomains");
            this.allowSubdomains = Optional.ofNullable(allowSubdomains);
            return this;
        }

        public Builder allowSubdomains(Optional<Boolean> allowSubdomains) {
            Utils.checkNotNull(allowSubdomains, "allowSubdomains");
            this.allowSubdomains = allowSubdomains;
            return this;
        }

        public Builder allowIdpInitiated(boolean allowIdpInitiated) {
            Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
            this.allowIdpInitiated = Optional.ofNullable(allowIdpInitiated);
            return this;
        }

        public Builder allowIdpInitiated(Optional<Boolean> allowIdpInitiated) {
            Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
            this.allowIdpInitiated = allowIdpInitiated;
            return this;
        }

        public Builder disableAdditionalIdentifications(boolean disableAdditionalIdentifications) {
            Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
            this.disableAdditionalIdentifications = Optional.ofNullable(disableAdditionalIdentifications);
            return this;
        }

        public Builder disableAdditionalIdentifications(Optional<Boolean> disableAdditionalIdentifications) {
            Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
            this.disableAdditionalIdentifications = disableAdditionalIdentifications;
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public SAMLConnectionSAMLConnection build() {
            return new SAMLConnectionSAMLConnection(
                id,
                name,
                domain,
                active,
                provider,
                syncUserAttributes,
                allowSubdomains,
                allowIdpInitiated,
                disableAdditionalIdentifications,
                createdAt,
                updatedAt);
        }
    }
}

