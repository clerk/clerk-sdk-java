/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * EmailAddress
 * 
 * <p>Success
 */
public class EmailAddress {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private EmailAddressObject object;


    @JsonProperty("email_address")
    private String emailAddress;


    @JsonProperty("reserved")
    private boolean reserved;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("verification")
    private Optional<? extends Verification> verification;


    @JsonProperty("linked_to")
    private List<IdentificationLink> linkedTo;

    /**
     * Indicates whether this email address domain matches an active enterprise connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matches_sso_connection")
    private Optional<Boolean> matchesSsoConnection;

    /**
     * Unix timestamp of creation
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of creation
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    @JsonCreator
    public EmailAddress(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("object") EmailAddressObject object,
            @JsonProperty("email_address") String emailAddress,
            @JsonProperty("reserved") boolean reserved,
            @JsonProperty("verification") Optional<? extends Verification> verification,
            @JsonProperty("linked_to") List<IdentificationLink> linkedTo,
            @JsonProperty("matches_sso_connection") Optional<Boolean> matchesSsoConnection,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(reserved, "reserved");
        Utils.checkNotNull(verification, "verification");
        Utils.checkNotNull(linkedTo, "linkedTo");
        Utils.checkNotNull(matchesSsoConnection, "matchesSsoConnection");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.object = object;
        this.emailAddress = emailAddress;
        this.reserved = reserved;
        this.verification = verification;
        this.linkedTo = linkedTo;
        this.matchesSsoConnection = matchesSsoConnection;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public EmailAddress(
            EmailAddressObject object,
            String emailAddress,
            boolean reserved,
            List<IdentificationLink> linkedTo,
            long createdAt,
            long updatedAt) {
        this(Optional.empty(), object, emailAddress,
            reserved, Optional.empty(), linkedTo,
            Optional.empty(), createdAt, updatedAt);
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public EmailAddressObject object() {
        return object;
    }

    @JsonIgnore
    public String emailAddress() {
        return emailAddress;
    }

    @JsonIgnore
    public boolean reserved() {
        return reserved;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Verification> verification() {
        return (Optional<Verification>) verification;
    }

    @JsonIgnore
    public List<IdentificationLink> linkedTo() {
        return linkedTo;
    }

    /**
     * Indicates whether this email address domain matches an active enterprise connection.
     */
    @JsonIgnore
    public Optional<Boolean> matchesSsoConnection() {
        return matchesSsoConnection;
    }

    /**
     * Unix timestamp of creation
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of creation
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public EmailAddress withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public EmailAddress withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public EmailAddress withObject(EmailAddressObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public EmailAddress withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    public EmailAddress withReserved(boolean reserved) {
        Utils.checkNotNull(reserved, "reserved");
        this.reserved = reserved;
        return this;
    }

    public EmailAddress withVerification(Verification verification) {
        Utils.checkNotNull(verification, "verification");
        this.verification = Optional.ofNullable(verification);
        return this;
    }


    public EmailAddress withVerification(Optional<? extends Verification> verification) {
        Utils.checkNotNull(verification, "verification");
        this.verification = verification;
        return this;
    }

    public EmailAddress withLinkedTo(List<IdentificationLink> linkedTo) {
        Utils.checkNotNull(linkedTo, "linkedTo");
        this.linkedTo = linkedTo;
        return this;
    }

    /**
     * Indicates whether this email address domain matches an active enterprise connection.
     */
    public EmailAddress withMatchesSsoConnection(boolean matchesSsoConnection) {
        Utils.checkNotNull(matchesSsoConnection, "matchesSsoConnection");
        this.matchesSsoConnection = Optional.ofNullable(matchesSsoConnection);
        return this;
    }


    /**
     * Indicates whether this email address domain matches an active enterprise connection.
     */
    public EmailAddress withMatchesSsoConnection(Optional<Boolean> matchesSsoConnection) {
        Utils.checkNotNull(matchesSsoConnection, "matchesSsoConnection");
        this.matchesSsoConnection = matchesSsoConnection;
        return this;
    }

    /**
     * Unix timestamp of creation
     */
    public EmailAddress withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of creation
     */
    public EmailAddress withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmailAddress other = (EmailAddress) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress) &&
            Utils.enhancedDeepEquals(this.reserved, other.reserved) &&
            Utils.enhancedDeepEquals(this.verification, other.verification) &&
            Utils.enhancedDeepEquals(this.linkedTo, other.linkedTo) &&
            Utils.enhancedDeepEquals(this.matchesSsoConnection, other.matchesSsoConnection) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, object, emailAddress,
            reserved, verification, linkedTo,
            matchesSsoConnection, createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmailAddress.class,
                "id", id,
                "object", object,
                "emailAddress", emailAddress,
                "reserved", reserved,
                "verification", verification,
                "linkedTo", linkedTo,
                "matchesSsoConnection", matchesSsoConnection,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private EmailAddressObject object;

        private String emailAddress;

        private Boolean reserved;

        private Optional<? extends Verification> verification = Optional.empty();

        private List<IdentificationLink> linkedTo;

        private Optional<Boolean> matchesSsoConnection = Optional.empty();

        private Long createdAt;

        private Long updatedAt;

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(EmailAddressObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }


        public Builder reserved(boolean reserved) {
            Utils.checkNotNull(reserved, "reserved");
            this.reserved = reserved;
            return this;
        }


        public Builder verification(Verification verification) {
            Utils.checkNotNull(verification, "verification");
            this.verification = Optional.ofNullable(verification);
            return this;
        }

        public Builder verification(Optional<? extends Verification> verification) {
            Utils.checkNotNull(verification, "verification");
            this.verification = verification;
            return this;
        }


        public Builder linkedTo(List<IdentificationLink> linkedTo) {
            Utils.checkNotNull(linkedTo, "linkedTo");
            this.linkedTo = linkedTo;
            return this;
        }


        /**
         * Indicates whether this email address domain matches an active enterprise connection.
         */
        public Builder matchesSsoConnection(boolean matchesSsoConnection) {
            Utils.checkNotNull(matchesSsoConnection, "matchesSsoConnection");
            this.matchesSsoConnection = Optional.ofNullable(matchesSsoConnection);
            return this;
        }

        /**
         * Indicates whether this email address domain matches an active enterprise connection.
         */
        public Builder matchesSsoConnection(Optional<Boolean> matchesSsoConnection) {
            Utils.checkNotNull(matchesSsoConnection, "matchesSsoConnection");
            this.matchesSsoConnection = matchesSsoConnection;
            return this;
        }


        /**
         * Unix timestamp of creation
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp of creation
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public EmailAddress build() {

            return new EmailAddress(
                id, object, emailAddress,
                reserved, verification, linkedTo,
                matchesSsoConnection, createdAt, updatedAt);
        }

    }
}
