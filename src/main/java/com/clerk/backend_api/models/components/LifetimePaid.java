/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;

/**
 * LifetimePaid
 * 
 * <p>Total amount paid over the lifetime of this subscription.
 */
public class LifetimePaid {
    /**
     * The amount in cents.
     */
    @JsonProperty("amount")
    private long amount;

    /**
     * The formatted amount as a string (e.g., "$49.99").
     */
    @JsonProperty("amount_formatted")
    private String amountFormatted;

    /**
     * The currency code (e.g., "USD").
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The currency symbol (e.g., "$").
     */
    @JsonProperty("currency_symbol")
    private String currencySymbol;

    @JsonCreator
    public LifetimePaid(
            @JsonProperty("amount") long amount,
            @JsonProperty("amount_formatted") String amountFormatted,
            @JsonProperty("currency") String currency,
            @JsonProperty("currency_symbol") String currencySymbol) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(amountFormatted, "amountFormatted");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencySymbol, "currencySymbol");
        this.amount = amount;
        this.amountFormatted = amountFormatted;
        this.currency = currency;
        this.currencySymbol = currencySymbol;
    }

    /**
     * The amount in cents.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    /**
     * The formatted amount as a string (e.g., "$49.99").
     */
    @JsonIgnore
    public String amountFormatted() {
        return amountFormatted;
    }

    /**
     * The currency code (e.g., "USD").
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The currency symbol (e.g., "$").
     */
    @JsonIgnore
    public String currencySymbol() {
        return currencySymbol;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The amount in cents.
     */
    public LifetimePaid withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The formatted amount as a string (e.g., "$49.99").
     */
    public LifetimePaid withAmountFormatted(String amountFormatted) {
        Utils.checkNotNull(amountFormatted, "amountFormatted");
        this.amountFormatted = amountFormatted;
        return this;
    }

    /**
     * The currency code (e.g., "USD").
     */
    public LifetimePaid withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The currency symbol (e.g., "$").
     */
    public LifetimePaid withCurrencySymbol(String currencySymbol) {
        Utils.checkNotNull(currencySymbol, "currencySymbol");
        this.currencySymbol = currencySymbol;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LifetimePaid other = (LifetimePaid) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.amountFormatted, other.amountFormatted) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.currencySymbol, other.currencySymbol);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, amountFormatted, currency,
            currencySymbol);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LifetimePaid.class,
                "amount", amount,
                "amountFormatted", amountFormatted,
                "currency", currency,
                "currencySymbol", currencySymbol);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long amount;

        private String amountFormatted;

        private String currency;

        private String currencySymbol;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The amount in cents.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The formatted amount as a string (e.g., "$49.99").
         */
        public Builder amountFormatted(String amountFormatted) {
            Utils.checkNotNull(amountFormatted, "amountFormatted");
            this.amountFormatted = amountFormatted;
            return this;
        }


        /**
         * The currency code (e.g., "USD").
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The currency symbol (e.g., "$").
         */
        public Builder currencySymbol(String currencySymbol) {
            Utils.checkNotNull(currencySymbol, "currencySymbol");
            this.currencySymbol = currencySymbol;
            return this;
        }

        public LifetimePaid build() {

            return new LifetimePaid(
                amount, amountFormatted, currency,
                currencySymbol);
        }

    }
}
