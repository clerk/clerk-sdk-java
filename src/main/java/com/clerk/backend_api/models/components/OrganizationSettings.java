/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * OrganizationSettings
 * 
 * <p>Success
 */
public class OrganizationSettings {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private OrganizationSettingsObject object;


    @JsonProperty("enabled")
    private boolean enabled;


    @JsonProperty("max_allowed_memberships")
    private long maxAllowedMemberships;


    @JsonProperty("max_allowed_roles")
    private long maxAllowedRoles;

    /**
     * max_allowed_permissions is now a no-op, as permissions are now unlimited
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_allowed_permissions")
    @Deprecated
    private Optional<Long> maxAllowedPermissions;

    /**
     * The role key that a user will be assigned after creating an organization.
     */
    @JsonProperty("creator_role")
    private String creatorRole;

    /**
     * The default for whether an admin can delete an organization with the Frontend API.
     */
    @JsonProperty("admin_delete_enabled")
    private boolean adminDeleteEnabled;


    @JsonProperty("domains_enabled")
    private boolean domainsEnabled;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug_disabled")
    private Optional<Boolean> slugDisabled;


    @JsonProperty("domains_enrollment_modes")
    private List<DomainsEnrollmentModes> domainsEnrollmentModes;

    /**
     * The role key that it will be used in order to create an organization invitation or suggestion.
     */
    @JsonProperty("domains_default_role")
    private String domainsDefaultRole;

    /**
     * The role set key that it will be used to create new organizations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initial_role_set_key")
    private JsonNullable<String> initialRoleSetKey;

    @JsonCreator
    public OrganizationSettings(
            @JsonProperty("object") OrganizationSettingsObject object,
            @JsonProperty("enabled") boolean enabled,
            @JsonProperty("max_allowed_memberships") long maxAllowedMemberships,
            @JsonProperty("max_allowed_roles") long maxAllowedRoles,
            @JsonProperty("max_allowed_permissions") Optional<Long> maxAllowedPermissions,
            @JsonProperty("creator_role") String creatorRole,
            @JsonProperty("admin_delete_enabled") boolean adminDeleteEnabled,
            @JsonProperty("domains_enabled") boolean domainsEnabled,
            @JsonProperty("slug_disabled") Optional<Boolean> slugDisabled,
            @JsonProperty("domains_enrollment_modes") List<DomainsEnrollmentModes> domainsEnrollmentModes,
            @JsonProperty("domains_default_role") String domainsDefaultRole,
            @JsonProperty("initial_role_set_key") JsonNullable<String> initialRoleSetKey) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        Utils.checkNotNull(maxAllowedRoles, "maxAllowedRoles");
        Utils.checkNotNull(maxAllowedPermissions, "maxAllowedPermissions");
        Utils.checkNotNull(creatorRole, "creatorRole");
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        Utils.checkNotNull(domainsEnabled, "domainsEnabled");
        Utils.checkNotNull(slugDisabled, "slugDisabled");
        Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
        Utils.checkNotNull(domainsDefaultRole, "domainsDefaultRole");
        Utils.checkNotNull(initialRoleSetKey, "initialRoleSetKey");
        this.object = object;
        this.enabled = enabled;
        this.maxAllowedMemberships = maxAllowedMemberships;
        this.maxAllowedRoles = maxAllowedRoles;
        this.maxAllowedPermissions = maxAllowedPermissions;
        this.creatorRole = creatorRole;
        this.adminDeleteEnabled = adminDeleteEnabled;
        this.domainsEnabled = domainsEnabled;
        this.slugDisabled = slugDisabled;
        this.domainsEnrollmentModes = domainsEnrollmentModes;
        this.domainsDefaultRole = domainsDefaultRole;
        this.initialRoleSetKey = initialRoleSetKey;
    }
    
    public OrganizationSettings(
            OrganizationSettingsObject object,
            boolean enabled,
            long maxAllowedMemberships,
            long maxAllowedRoles,
            String creatorRole,
            boolean adminDeleteEnabled,
            boolean domainsEnabled,
            List<DomainsEnrollmentModes> domainsEnrollmentModes,
            String domainsDefaultRole) {
        this(object, enabled, maxAllowedMemberships,
            maxAllowedRoles, Optional.empty(), creatorRole,
            adminDeleteEnabled, domainsEnabled, Optional.empty(),
            domainsEnrollmentModes, domainsDefaultRole, JsonNullable.undefined());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public OrganizationSettingsObject object() {
        return object;
    }

    @JsonIgnore
    public boolean enabled() {
        return enabled;
    }

    @JsonIgnore
    public long maxAllowedMemberships() {
        return maxAllowedMemberships;
    }

    @JsonIgnore
    public long maxAllowedRoles() {
        return maxAllowedRoles;
    }

    /**
     * max_allowed_permissions is now a no-op, as permissions are now unlimited
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Long> maxAllowedPermissions() {
        return maxAllowedPermissions;
    }

    /**
     * The role key that a user will be assigned after creating an organization.
     */
    @JsonIgnore
    public String creatorRole() {
        return creatorRole;
    }

    /**
     * The default for whether an admin can delete an organization with the Frontend API.
     */
    @JsonIgnore
    public boolean adminDeleteEnabled() {
        return adminDeleteEnabled;
    }

    @JsonIgnore
    public boolean domainsEnabled() {
        return domainsEnabled;
    }

    @JsonIgnore
    public Optional<Boolean> slugDisabled() {
        return slugDisabled;
    }

    @JsonIgnore
    public List<DomainsEnrollmentModes> domainsEnrollmentModes() {
        return domainsEnrollmentModes;
    }

    /**
     * The role key that it will be used in order to create an organization invitation or suggestion.
     */
    @JsonIgnore
    public String domainsDefaultRole() {
        return domainsDefaultRole;
    }

    /**
     * The role set key that it will be used to create new organizations.
     */
    @JsonIgnore
    public JsonNullable<String> initialRoleSetKey() {
        return initialRoleSetKey;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public OrganizationSettings withObject(OrganizationSettingsObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public OrganizationSettings withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    public OrganizationSettings withMaxAllowedMemberships(long maxAllowedMemberships) {
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        this.maxAllowedMemberships = maxAllowedMemberships;
        return this;
    }

    public OrganizationSettings withMaxAllowedRoles(long maxAllowedRoles) {
        Utils.checkNotNull(maxAllowedRoles, "maxAllowedRoles");
        this.maxAllowedRoles = maxAllowedRoles;
        return this;
    }

    /**
     * max_allowed_permissions is now a no-op, as permissions are now unlimited
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public OrganizationSettings withMaxAllowedPermissions(long maxAllowedPermissions) {
        Utils.checkNotNull(maxAllowedPermissions, "maxAllowedPermissions");
        this.maxAllowedPermissions = Optional.ofNullable(maxAllowedPermissions);
        return this;
    }


    /**
     * max_allowed_permissions is now a no-op, as permissions are now unlimited
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public OrganizationSettings withMaxAllowedPermissions(Optional<Long> maxAllowedPermissions) {
        Utils.checkNotNull(maxAllowedPermissions, "maxAllowedPermissions");
        this.maxAllowedPermissions = maxAllowedPermissions;
        return this;
    }

    /**
     * The role key that a user will be assigned after creating an organization.
     */
    public OrganizationSettings withCreatorRole(String creatorRole) {
        Utils.checkNotNull(creatorRole, "creatorRole");
        this.creatorRole = creatorRole;
        return this;
    }

    /**
     * The default for whether an admin can delete an organization with the Frontend API.
     */
    public OrganizationSettings withAdminDeleteEnabled(boolean adminDeleteEnabled) {
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        this.adminDeleteEnabled = adminDeleteEnabled;
        return this;
    }

    public OrganizationSettings withDomainsEnabled(boolean domainsEnabled) {
        Utils.checkNotNull(domainsEnabled, "domainsEnabled");
        this.domainsEnabled = domainsEnabled;
        return this;
    }

    public OrganizationSettings withSlugDisabled(boolean slugDisabled) {
        Utils.checkNotNull(slugDisabled, "slugDisabled");
        this.slugDisabled = Optional.ofNullable(slugDisabled);
        return this;
    }


    public OrganizationSettings withSlugDisabled(Optional<Boolean> slugDisabled) {
        Utils.checkNotNull(slugDisabled, "slugDisabled");
        this.slugDisabled = slugDisabled;
        return this;
    }

    public OrganizationSettings withDomainsEnrollmentModes(List<DomainsEnrollmentModes> domainsEnrollmentModes) {
        Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
        this.domainsEnrollmentModes = domainsEnrollmentModes;
        return this;
    }

    /**
     * The role key that it will be used in order to create an organization invitation or suggestion.
     */
    public OrganizationSettings withDomainsDefaultRole(String domainsDefaultRole) {
        Utils.checkNotNull(domainsDefaultRole, "domainsDefaultRole");
        this.domainsDefaultRole = domainsDefaultRole;
        return this;
    }

    /**
     * The role set key that it will be used to create new organizations.
     */
    public OrganizationSettings withInitialRoleSetKey(String initialRoleSetKey) {
        Utils.checkNotNull(initialRoleSetKey, "initialRoleSetKey");
        this.initialRoleSetKey = JsonNullable.of(initialRoleSetKey);
        return this;
    }

    /**
     * The role set key that it will be used to create new organizations.
     */
    public OrganizationSettings withInitialRoleSetKey(JsonNullable<String> initialRoleSetKey) {
        Utils.checkNotNull(initialRoleSetKey, "initialRoleSetKey");
        this.initialRoleSetKey = initialRoleSetKey;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganizationSettings other = (OrganizationSettings) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.enabled, other.enabled) &&
            Utils.enhancedDeepEquals(this.maxAllowedMemberships, other.maxAllowedMemberships) &&
            Utils.enhancedDeepEquals(this.maxAllowedRoles, other.maxAllowedRoles) &&
            Utils.enhancedDeepEquals(this.maxAllowedPermissions, other.maxAllowedPermissions) &&
            Utils.enhancedDeepEquals(this.creatorRole, other.creatorRole) &&
            Utils.enhancedDeepEquals(this.adminDeleteEnabled, other.adminDeleteEnabled) &&
            Utils.enhancedDeepEquals(this.domainsEnabled, other.domainsEnabled) &&
            Utils.enhancedDeepEquals(this.slugDisabled, other.slugDisabled) &&
            Utils.enhancedDeepEquals(this.domainsEnrollmentModes, other.domainsEnrollmentModes) &&
            Utils.enhancedDeepEquals(this.domainsDefaultRole, other.domainsDefaultRole) &&
            Utils.enhancedDeepEquals(this.initialRoleSetKey, other.initialRoleSetKey);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, enabled, maxAllowedMemberships,
            maxAllowedRoles, maxAllowedPermissions, creatorRole,
            adminDeleteEnabled, domainsEnabled, slugDisabled,
            domainsEnrollmentModes, domainsDefaultRole, initialRoleSetKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrganizationSettings.class,
                "object", object,
                "enabled", enabled,
                "maxAllowedMemberships", maxAllowedMemberships,
                "maxAllowedRoles", maxAllowedRoles,
                "maxAllowedPermissions", maxAllowedPermissions,
                "creatorRole", creatorRole,
                "adminDeleteEnabled", adminDeleteEnabled,
                "domainsEnabled", domainsEnabled,
                "slugDisabled", slugDisabled,
                "domainsEnrollmentModes", domainsEnrollmentModes,
                "domainsDefaultRole", domainsDefaultRole,
                "initialRoleSetKey", initialRoleSetKey);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OrganizationSettingsObject object;

        private Boolean enabled;

        private Long maxAllowedMemberships;

        private Long maxAllowedRoles;

        @Deprecated
        private Optional<Long> maxAllowedPermissions = Optional.empty();

        private String creatorRole;

        private Boolean adminDeleteEnabled;

        private Boolean domainsEnabled;

        private Optional<Boolean> slugDisabled = Optional.empty();

        private List<DomainsEnrollmentModes> domainsEnrollmentModes;

        private String domainsDefaultRole;

        private JsonNullable<String> initialRoleSetKey = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(OrganizationSettingsObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }


        public Builder maxAllowedMemberships(long maxAllowedMemberships) {
            Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
            this.maxAllowedMemberships = maxAllowedMemberships;
            return this;
        }


        public Builder maxAllowedRoles(long maxAllowedRoles) {
            Utils.checkNotNull(maxAllowedRoles, "maxAllowedRoles");
            this.maxAllowedRoles = maxAllowedRoles;
            return this;
        }


        /**
         * max_allowed_permissions is now a no-op, as permissions are now unlimited
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder maxAllowedPermissions(long maxAllowedPermissions) {
            Utils.checkNotNull(maxAllowedPermissions, "maxAllowedPermissions");
            this.maxAllowedPermissions = Optional.ofNullable(maxAllowedPermissions);
            return this;
        }

        /**
         * max_allowed_permissions is now a no-op, as permissions are now unlimited
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder maxAllowedPermissions(Optional<Long> maxAllowedPermissions) {
            Utils.checkNotNull(maxAllowedPermissions, "maxAllowedPermissions");
            this.maxAllowedPermissions = maxAllowedPermissions;
            return this;
        }


        /**
         * The role key that a user will be assigned after creating an organization.
         */
        public Builder creatorRole(String creatorRole) {
            Utils.checkNotNull(creatorRole, "creatorRole");
            this.creatorRole = creatorRole;
            return this;
        }


        /**
         * The default for whether an admin can delete an organization with the Frontend API.
         */
        public Builder adminDeleteEnabled(boolean adminDeleteEnabled) {
            Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
            this.adminDeleteEnabled = adminDeleteEnabled;
            return this;
        }


        public Builder domainsEnabled(boolean domainsEnabled) {
            Utils.checkNotNull(domainsEnabled, "domainsEnabled");
            this.domainsEnabled = domainsEnabled;
            return this;
        }


        public Builder slugDisabled(boolean slugDisabled) {
            Utils.checkNotNull(slugDisabled, "slugDisabled");
            this.slugDisabled = Optional.ofNullable(slugDisabled);
            return this;
        }

        public Builder slugDisabled(Optional<Boolean> slugDisabled) {
            Utils.checkNotNull(slugDisabled, "slugDisabled");
            this.slugDisabled = slugDisabled;
            return this;
        }


        public Builder domainsEnrollmentModes(List<DomainsEnrollmentModes> domainsEnrollmentModes) {
            Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
            this.domainsEnrollmentModes = domainsEnrollmentModes;
            return this;
        }


        /**
         * The role key that it will be used in order to create an organization invitation or suggestion.
         */
        public Builder domainsDefaultRole(String domainsDefaultRole) {
            Utils.checkNotNull(domainsDefaultRole, "domainsDefaultRole");
            this.domainsDefaultRole = domainsDefaultRole;
            return this;
        }


        /**
         * The role set key that it will be used to create new organizations.
         */
        public Builder initialRoleSetKey(String initialRoleSetKey) {
            Utils.checkNotNull(initialRoleSetKey, "initialRoleSetKey");
            this.initialRoleSetKey = JsonNullable.of(initialRoleSetKey);
            return this;
        }

        /**
         * The role set key that it will be used to create new organizations.
         */
        public Builder initialRoleSetKey(JsonNullable<String> initialRoleSetKey) {
            Utils.checkNotNull(initialRoleSetKey, "initialRoleSetKey");
            this.initialRoleSetKey = initialRoleSetKey;
            return this;
        }

        public OrganizationSettings build() {

            return new OrganizationSettings(
                object, enabled, maxAllowedMemberships,
                maxAllowedRoles, maxAllowedPermissions, creatorRole,
                adminDeleteEnabled, domainsEnabled, slugDisabled,
                domainsEnrollmentModes, domainsDefaultRole, initialRoleSetKey);
        }

    }
}
