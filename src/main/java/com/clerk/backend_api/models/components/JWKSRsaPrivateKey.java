/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.clerk.backend_api.models.components;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class JWKSRsaPrivateKey {

    @JsonProperty("kid")
    private String kid;

    @JsonProperty("alg")
    private String alg;

    @JsonProperty("use")
    private String use;

    @JsonProperty("kty")
    private JWKSRsaPrivateKeyKty kty;

    @JsonProperty("n")
    private String n;

    @JsonProperty("e")
    private String e;

    @JsonProperty("d")
    private String d;

    @JsonProperty("p")
    private String p;

    @JsonProperty("q")
    private String q;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dp")
    private Optional<String> dp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dq")
    private Optional<String> dq;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("qi")
    private Optional<String> qi;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x5c")
    private Optional<? extends List<String>> x5c;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x5t")
    private Optional<String> x5t;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x5t#S256")
    private Optional<String> x5tNumberS256;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x5u")
    private Optional<String> x5u;

    @JsonCreator
    public JWKSRsaPrivateKey(
            @JsonProperty("kid") String kid,
            @JsonProperty("alg") String alg,
            @JsonProperty("use") String use,
            @JsonProperty("kty") JWKSRsaPrivateKeyKty kty,
            @JsonProperty("n") String n,
            @JsonProperty("e") String e,
            @JsonProperty("d") String d,
            @JsonProperty("p") String p,
            @JsonProperty("q") String q,
            @JsonProperty("dp") Optional<String> dp,
            @JsonProperty("dq") Optional<String> dq,
            @JsonProperty("qi") Optional<String> qi,
            @JsonProperty("x5c") Optional<? extends List<String>> x5c,
            @JsonProperty("x5t") Optional<String> x5t,
            @JsonProperty("x5t#S256") Optional<String> x5tNumberS256,
            @JsonProperty("x5u") Optional<String> x5u) {
        Utils.checkNotNull(kid, "kid");
        Utils.checkNotNull(alg, "alg");
        Utils.checkNotNull(use, "use");
        Utils.checkNotNull(kty, "kty");
        Utils.checkNotNull(n, "n");
        Utils.checkNotNull(e, "e");
        Utils.checkNotNull(d, "d");
        Utils.checkNotNull(p, "p");
        Utils.checkNotNull(q, "q");
        Utils.checkNotNull(dp, "dp");
        Utils.checkNotNull(dq, "dq");
        Utils.checkNotNull(qi, "qi");
        Utils.checkNotNull(x5c, "x5c");
        Utils.checkNotNull(x5t, "x5t");
        Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
        Utils.checkNotNull(x5u, "x5u");
        this.kid = kid;
        this.alg = alg;
        this.use = use;
        this.kty = kty;
        this.n = n;
        this.e = e;
        this.d = d;
        this.p = p;
        this.q = q;
        this.dp = dp;
        this.dq = dq;
        this.qi = qi;
        this.x5c = x5c;
        this.x5t = x5t;
        this.x5tNumberS256 = x5tNumberS256;
        this.x5u = x5u;
    }
    
    public JWKSRsaPrivateKey(
            String kid,
            String alg,
            String use,
            JWKSRsaPrivateKeyKty kty,
            String n,
            String e,
            String d,
            String p,
            String q) {
        this(kid, alg, use, kty, n, e, d, p, q, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String kid() {
        return kid;
    }

    @JsonIgnore
    public String alg() {
        return alg;
    }

    @JsonIgnore
    public String use() {
        return use;
    }

    @JsonIgnore
    public JWKSRsaPrivateKeyKty kty() {
        return kty;
    }

    @JsonIgnore
    public String n() {
        return n;
    }

    @JsonIgnore
    public String e() {
        return e;
    }

    @JsonIgnore
    public String d() {
        return d;
    }

    @JsonIgnore
    public String p() {
        return p;
    }

    @JsonIgnore
    public String q() {
        return q;
    }

    @JsonIgnore
    public Optional<String> dp() {
        return dp;
    }

    @JsonIgnore
    public Optional<String> dq() {
        return dq;
    }

    @JsonIgnore
    public Optional<String> qi() {
        return qi;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> x5c() {
        return (Optional<List<String>>) x5c;
    }

    @JsonIgnore
    public Optional<String> x5t() {
        return x5t;
    }

    @JsonIgnore
    public Optional<String> x5tNumberS256() {
        return x5tNumberS256;
    }

    @JsonIgnore
    public Optional<String> x5u() {
        return x5u;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public JWKSRsaPrivateKey withKid(String kid) {
        Utils.checkNotNull(kid, "kid");
        this.kid = kid;
        return this;
    }

    public JWKSRsaPrivateKey withAlg(String alg) {
        Utils.checkNotNull(alg, "alg");
        this.alg = alg;
        return this;
    }

    public JWKSRsaPrivateKey withUse(String use) {
        Utils.checkNotNull(use, "use");
        this.use = use;
        return this;
    }

    public JWKSRsaPrivateKey withKty(JWKSRsaPrivateKeyKty kty) {
        Utils.checkNotNull(kty, "kty");
        this.kty = kty;
        return this;
    }

    public JWKSRsaPrivateKey withN(String n) {
        Utils.checkNotNull(n, "n");
        this.n = n;
        return this;
    }

    public JWKSRsaPrivateKey withE(String e) {
        Utils.checkNotNull(e, "e");
        this.e = e;
        return this;
    }

    public JWKSRsaPrivateKey withD(String d) {
        Utils.checkNotNull(d, "d");
        this.d = d;
        return this;
    }

    public JWKSRsaPrivateKey withP(String p) {
        Utils.checkNotNull(p, "p");
        this.p = p;
        return this;
    }

    public JWKSRsaPrivateKey withQ(String q) {
        Utils.checkNotNull(q, "q");
        this.q = q;
        return this;
    }

    public JWKSRsaPrivateKey withDp(String dp) {
        Utils.checkNotNull(dp, "dp");
        this.dp = Optional.ofNullable(dp);
        return this;
    }

    public JWKSRsaPrivateKey withDp(Optional<String> dp) {
        Utils.checkNotNull(dp, "dp");
        this.dp = dp;
        return this;
    }

    public JWKSRsaPrivateKey withDq(String dq) {
        Utils.checkNotNull(dq, "dq");
        this.dq = Optional.ofNullable(dq);
        return this;
    }

    public JWKSRsaPrivateKey withDq(Optional<String> dq) {
        Utils.checkNotNull(dq, "dq");
        this.dq = dq;
        return this;
    }

    public JWKSRsaPrivateKey withQi(String qi) {
        Utils.checkNotNull(qi, "qi");
        this.qi = Optional.ofNullable(qi);
        return this;
    }

    public JWKSRsaPrivateKey withQi(Optional<String> qi) {
        Utils.checkNotNull(qi, "qi");
        this.qi = qi;
        return this;
    }

    public JWKSRsaPrivateKey withX5c(List<String> x5c) {
        Utils.checkNotNull(x5c, "x5c");
        this.x5c = Optional.ofNullable(x5c);
        return this;
    }

    public JWKSRsaPrivateKey withX5c(Optional<? extends List<String>> x5c) {
        Utils.checkNotNull(x5c, "x5c");
        this.x5c = x5c;
        return this;
    }

    public JWKSRsaPrivateKey withX5t(String x5t) {
        Utils.checkNotNull(x5t, "x5t");
        this.x5t = Optional.ofNullable(x5t);
        return this;
    }

    public JWKSRsaPrivateKey withX5t(Optional<String> x5t) {
        Utils.checkNotNull(x5t, "x5t");
        this.x5t = x5t;
        return this;
    }

    public JWKSRsaPrivateKey withX5tNumberS256(String x5tNumberS256) {
        Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
        this.x5tNumberS256 = Optional.ofNullable(x5tNumberS256);
        return this;
    }

    public JWKSRsaPrivateKey withX5tNumberS256(Optional<String> x5tNumberS256) {
        Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
        this.x5tNumberS256 = x5tNumberS256;
        return this;
    }

    public JWKSRsaPrivateKey withX5u(String x5u) {
        Utils.checkNotNull(x5u, "x5u");
        this.x5u = Optional.ofNullable(x5u);
        return this;
    }

    public JWKSRsaPrivateKey withX5u(Optional<String> x5u) {
        Utils.checkNotNull(x5u, "x5u");
        this.x5u = x5u;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JWKSRsaPrivateKey other = (JWKSRsaPrivateKey) o;
        return 
            Objects.deepEquals(this.kid, other.kid) &&
            Objects.deepEquals(this.alg, other.alg) &&
            Objects.deepEquals(this.use, other.use) &&
            Objects.deepEquals(this.kty, other.kty) &&
            Objects.deepEquals(this.n, other.n) &&
            Objects.deepEquals(this.e, other.e) &&
            Objects.deepEquals(this.d, other.d) &&
            Objects.deepEquals(this.p, other.p) &&
            Objects.deepEquals(this.q, other.q) &&
            Objects.deepEquals(this.dp, other.dp) &&
            Objects.deepEquals(this.dq, other.dq) &&
            Objects.deepEquals(this.qi, other.qi) &&
            Objects.deepEquals(this.x5c, other.x5c) &&
            Objects.deepEquals(this.x5t, other.x5t) &&
            Objects.deepEquals(this.x5tNumberS256, other.x5tNumberS256) &&
            Objects.deepEquals(this.x5u, other.x5u);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            kid,
            alg,
            use,
            kty,
            n,
            e,
            d,
            p,
            q,
            dp,
            dq,
            qi,
            x5c,
            x5t,
            x5tNumberS256,
            x5u);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JWKSRsaPrivateKey.class,
                "kid", kid,
                "alg", alg,
                "use", use,
                "kty", kty,
                "n", n,
                "e", e,
                "d", d,
                "p", p,
                "q", q,
                "dp", dp,
                "dq", dq,
                "qi", qi,
                "x5c", x5c,
                "x5t", x5t,
                "x5tNumberS256", x5tNumberS256,
                "x5u", x5u);
    }
    
    public final static class Builder {
 
        private String kid;
 
        private String alg;
 
        private String use;
 
        private JWKSRsaPrivateKeyKty kty;
 
        private String n;
 
        private String e;
 
        private String d;
 
        private String p;
 
        private String q;
 
        private Optional<String> dp = Optional.empty();
 
        private Optional<String> dq = Optional.empty();
 
        private Optional<String> qi = Optional.empty();
 
        private Optional<? extends List<String>> x5c = Optional.empty();
 
        private Optional<String> x5t = Optional.empty();
 
        private Optional<String> x5tNumberS256 = Optional.empty();
 
        private Optional<String> x5u = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder kid(String kid) {
            Utils.checkNotNull(kid, "kid");
            this.kid = kid;
            return this;
        }

        public Builder alg(String alg) {
            Utils.checkNotNull(alg, "alg");
            this.alg = alg;
            return this;
        }

        public Builder use(String use) {
            Utils.checkNotNull(use, "use");
            this.use = use;
            return this;
        }

        public Builder kty(JWKSRsaPrivateKeyKty kty) {
            Utils.checkNotNull(kty, "kty");
            this.kty = kty;
            return this;
        }

        public Builder n(String n) {
            Utils.checkNotNull(n, "n");
            this.n = n;
            return this;
        }

        public Builder e(String e) {
            Utils.checkNotNull(e, "e");
            this.e = e;
            return this;
        }

        public Builder d(String d) {
            Utils.checkNotNull(d, "d");
            this.d = d;
            return this;
        }

        public Builder p(String p) {
            Utils.checkNotNull(p, "p");
            this.p = p;
            return this;
        }

        public Builder q(String q) {
            Utils.checkNotNull(q, "q");
            this.q = q;
            return this;
        }

        public Builder dp(String dp) {
            Utils.checkNotNull(dp, "dp");
            this.dp = Optional.ofNullable(dp);
            return this;
        }

        public Builder dp(Optional<String> dp) {
            Utils.checkNotNull(dp, "dp");
            this.dp = dp;
            return this;
        }

        public Builder dq(String dq) {
            Utils.checkNotNull(dq, "dq");
            this.dq = Optional.ofNullable(dq);
            return this;
        }

        public Builder dq(Optional<String> dq) {
            Utils.checkNotNull(dq, "dq");
            this.dq = dq;
            return this;
        }

        public Builder qi(String qi) {
            Utils.checkNotNull(qi, "qi");
            this.qi = Optional.ofNullable(qi);
            return this;
        }

        public Builder qi(Optional<String> qi) {
            Utils.checkNotNull(qi, "qi");
            this.qi = qi;
            return this;
        }

        public Builder x5c(List<String> x5c) {
            Utils.checkNotNull(x5c, "x5c");
            this.x5c = Optional.ofNullable(x5c);
            return this;
        }

        public Builder x5c(Optional<? extends List<String>> x5c) {
            Utils.checkNotNull(x5c, "x5c");
            this.x5c = x5c;
            return this;
        }

        public Builder x5t(String x5t) {
            Utils.checkNotNull(x5t, "x5t");
            this.x5t = Optional.ofNullable(x5t);
            return this;
        }

        public Builder x5t(Optional<String> x5t) {
            Utils.checkNotNull(x5t, "x5t");
            this.x5t = x5t;
            return this;
        }

        public Builder x5tNumberS256(String x5tNumberS256) {
            Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
            this.x5tNumberS256 = Optional.ofNullable(x5tNumberS256);
            return this;
        }

        public Builder x5tNumberS256(Optional<String> x5tNumberS256) {
            Utils.checkNotNull(x5tNumberS256, "x5tNumberS256");
            this.x5tNumberS256 = x5tNumberS256;
            return this;
        }

        public Builder x5u(String x5u) {
            Utils.checkNotNull(x5u, "x5u");
            this.x5u = Optional.ofNullable(x5u);
            return this;
        }

        public Builder x5u(Optional<String> x5u) {
            Utils.checkNotNull(x5u, "x5u");
            this.x5u = x5u;
            return this;
        }
        
        public JWKSRsaPrivateKey build() {
            return new JWKSRsaPrivateKey(
                kid,
                alg,
                use,
                kty,
                n,
                e,
                d,
                p,
                q,
                dp,
                dq,
                qi,
                x5c,
                x5t,
                x5tNumberS256,
                x5u);
        }
    }
}

