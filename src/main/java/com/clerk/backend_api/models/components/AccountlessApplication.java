/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * AccountlessApplication
 * 
 * <p>Success
 */
public class AccountlessApplication {

    @JsonProperty("object")
    private AccountlessApplicationObject object;


    @JsonProperty("publishable_key")
    private String publishableKey;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret_key")
    private Optional<String> secretKey;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claim_url")
    private Optional<String> claimUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_keys_url")
    private Optional<String> apiKeysUrl;

    @JsonCreator
    public AccountlessApplication(
            @JsonProperty("object") AccountlessApplicationObject object,
            @JsonProperty("publishable_key") String publishableKey,
            @JsonProperty("secret_key") Optional<String> secretKey,
            @JsonProperty("claim_url") Optional<String> claimUrl,
            @JsonProperty("api_keys_url") Optional<String> apiKeysUrl) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(publishableKey, "publishableKey");
        Utils.checkNotNull(secretKey, "secretKey");
        Utils.checkNotNull(claimUrl, "claimUrl");
        Utils.checkNotNull(apiKeysUrl, "apiKeysUrl");
        this.object = object;
        this.publishableKey = publishableKey;
        this.secretKey = secretKey;
        this.claimUrl = claimUrl;
        this.apiKeysUrl = apiKeysUrl;
    }
    
    public AccountlessApplication(
            AccountlessApplicationObject object,
            String publishableKey) {
        this(object, publishableKey, Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public AccountlessApplicationObject object() {
        return object;
    }

    @JsonIgnore
    public String publishableKey() {
        return publishableKey;
    }

    @JsonIgnore
    public Optional<String> secretKey() {
        return secretKey;
    }

    @JsonIgnore
    public Optional<String> claimUrl() {
        return claimUrl;
    }

    @JsonIgnore
    public Optional<String> apiKeysUrl() {
        return apiKeysUrl;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AccountlessApplication withObject(AccountlessApplicationObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public AccountlessApplication withPublishableKey(String publishableKey) {
        Utils.checkNotNull(publishableKey, "publishableKey");
        this.publishableKey = publishableKey;
        return this;
    }

    public AccountlessApplication withSecretKey(String secretKey) {
        Utils.checkNotNull(secretKey, "secretKey");
        this.secretKey = Optional.ofNullable(secretKey);
        return this;
    }


    public AccountlessApplication withSecretKey(Optional<String> secretKey) {
        Utils.checkNotNull(secretKey, "secretKey");
        this.secretKey = secretKey;
        return this;
    }

    public AccountlessApplication withClaimUrl(String claimUrl) {
        Utils.checkNotNull(claimUrl, "claimUrl");
        this.claimUrl = Optional.ofNullable(claimUrl);
        return this;
    }


    public AccountlessApplication withClaimUrl(Optional<String> claimUrl) {
        Utils.checkNotNull(claimUrl, "claimUrl");
        this.claimUrl = claimUrl;
        return this;
    }

    public AccountlessApplication withApiKeysUrl(String apiKeysUrl) {
        Utils.checkNotNull(apiKeysUrl, "apiKeysUrl");
        this.apiKeysUrl = Optional.ofNullable(apiKeysUrl);
        return this;
    }


    public AccountlessApplication withApiKeysUrl(Optional<String> apiKeysUrl) {
        Utils.checkNotNull(apiKeysUrl, "apiKeysUrl");
        this.apiKeysUrl = apiKeysUrl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountlessApplication other = (AccountlessApplication) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.publishableKey, other.publishableKey) &&
            Utils.enhancedDeepEquals(this.secretKey, other.secretKey) &&
            Utils.enhancedDeepEquals(this.claimUrl, other.claimUrl) &&
            Utils.enhancedDeepEquals(this.apiKeysUrl, other.apiKeysUrl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, publishableKey, secretKey,
            claimUrl, apiKeysUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountlessApplication.class,
                "object", object,
                "publishableKey", publishableKey,
                "secretKey", secretKey,
                "claimUrl", claimUrl,
                "apiKeysUrl", apiKeysUrl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AccountlessApplicationObject object;

        private String publishableKey;

        private Optional<String> secretKey = Optional.empty();

        private Optional<String> claimUrl = Optional.empty();

        private Optional<String> apiKeysUrl = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder object(AccountlessApplicationObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder publishableKey(String publishableKey) {
            Utils.checkNotNull(publishableKey, "publishableKey");
            this.publishableKey = publishableKey;
            return this;
        }


        public Builder secretKey(String secretKey) {
            Utils.checkNotNull(secretKey, "secretKey");
            this.secretKey = Optional.ofNullable(secretKey);
            return this;
        }

        public Builder secretKey(Optional<String> secretKey) {
            Utils.checkNotNull(secretKey, "secretKey");
            this.secretKey = secretKey;
            return this;
        }


        public Builder claimUrl(String claimUrl) {
            Utils.checkNotNull(claimUrl, "claimUrl");
            this.claimUrl = Optional.ofNullable(claimUrl);
            return this;
        }

        public Builder claimUrl(Optional<String> claimUrl) {
            Utils.checkNotNull(claimUrl, "claimUrl");
            this.claimUrl = claimUrl;
            return this;
        }


        public Builder apiKeysUrl(String apiKeysUrl) {
            Utils.checkNotNull(apiKeysUrl, "apiKeysUrl");
            this.apiKeysUrl = Optional.ofNullable(apiKeysUrl);
            return this;
        }

        public Builder apiKeysUrl(Optional<String> apiKeysUrl) {
            Utils.checkNotNull(apiKeysUrl, "apiKeysUrl");
            this.apiKeysUrl = apiKeysUrl;
            return this;
        }

        public AccountlessApplication build() {

            return new AccountlessApplication(
                object, publishableKey, secretKey,
                claimUrl, apiKeysUrl);
        }

    }
}
