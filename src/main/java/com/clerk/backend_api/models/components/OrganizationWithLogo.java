/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;


public class OrganizationWithLogo {

    @JsonProperty("object")
    private OrganizationWithLogoObject object;


    @JsonProperty("id")
    private String id;


    @JsonProperty("name")
    private String name;


    @JsonProperty("slug")
    private String slug;


    @JsonProperty("image_url")
    private String imageUrl;


    @JsonProperty("has_image")
    private boolean hasImage;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_count")
    private Optional<Long> membersCount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("missing_member_with_elevated_permissions")
    private Optional<Boolean> missingMemberWithElevatedPermissions;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending_invitations_count")
    private Optional<Long> pendingInvitationsCount;


    @JsonProperty("max_allowed_memberships")
    private long maxAllowedMemberships;


    @JsonProperty("admin_delete_enabled")
    private boolean adminDeleteEnabled;


    @JsonProperty("public_metadata")
    private Map<String, Object> publicMetadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends Map<String, Object>> privateMetadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private Optional<String> createdBy;

    /**
     * Unix timestamp of creation.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of last update.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo_url")
    @Deprecated
    private Optional<String> logoUrl;

    @JsonCreator
    public OrganizationWithLogo(
            @JsonProperty("object") OrganizationWithLogoObject object,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("slug") String slug,
            @JsonProperty("image_url") String imageUrl,
            @JsonProperty("has_image") boolean hasImage,
            @JsonProperty("members_count") Optional<Long> membersCount,
            @JsonProperty("missing_member_with_elevated_permissions") Optional<Boolean> missingMemberWithElevatedPermissions,
            @JsonProperty("pending_invitations_count") Optional<Long> pendingInvitationsCount,
            @JsonProperty("max_allowed_memberships") long maxAllowedMemberships,
            @JsonProperty("admin_delete_enabled") boolean adminDeleteEnabled,
            @JsonProperty("public_metadata") Map<String, Object> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends Map<String, Object>> privateMetadata,
            @JsonProperty("created_by") Optional<String> createdBy,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt,
            @JsonProperty("logo_url") Optional<String> logoUrl) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(hasImage, "hasImage");
        Utils.checkNotNull(membersCount, "membersCount");
        Utils.checkNotNull(missingMemberWithElevatedPermissions, "missingMemberWithElevatedPermissions");
        Utils.checkNotNull(pendingInvitationsCount, "pendingInvitationsCount");
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        publicMetadata = Utils.emptyMapIfNull(publicMetadata);
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.object = object;
        this.id = id;
        this.name = name;
        this.slug = slug;
        this.imageUrl = imageUrl;
        this.hasImage = hasImage;
        this.membersCount = membersCount;
        this.missingMemberWithElevatedPermissions = missingMemberWithElevatedPermissions;
        this.pendingInvitationsCount = pendingInvitationsCount;
        this.maxAllowedMemberships = maxAllowedMemberships;
        this.adminDeleteEnabled = adminDeleteEnabled;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.logoUrl = logoUrl;
    }
    
    public OrganizationWithLogo(
            OrganizationWithLogoObject object,
            String id,
            String name,
            String slug,
            String imageUrl,
            boolean hasImage,
            long maxAllowedMemberships,
            boolean adminDeleteEnabled,
            Map<String, Object> publicMetadata,
            long createdAt,
            long updatedAt) {
        this(object, id, name,
            slug, imageUrl, hasImage,
            Optional.empty(), Optional.empty(), Optional.empty(),
            maxAllowedMemberships, adminDeleteEnabled, publicMetadata,
            Optional.empty(), Optional.empty(), createdAt,
            updatedAt, Optional.empty());
    }

    @JsonIgnore
    public OrganizationWithLogoObject object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String slug() {
        return slug;
    }

    @JsonIgnore
    public String imageUrl() {
        return imageUrl;
    }

    @JsonIgnore
    public boolean hasImage() {
        return hasImage;
    }

    @JsonIgnore
    public Optional<Long> membersCount() {
        return membersCount;
    }

    @JsonIgnore
    public Optional<Boolean> missingMemberWithElevatedPermissions() {
        return missingMemberWithElevatedPermissions;
    }

    @JsonIgnore
    public Optional<Long> pendingInvitationsCount() {
        return pendingInvitationsCount;
    }

    @JsonIgnore
    public long maxAllowedMemberships() {
        return maxAllowedMemberships;
    }

    @JsonIgnore
    public boolean adminDeleteEnabled() {
        return adminDeleteEnabled;
    }

    @JsonIgnore
    public Map<String, Object> publicMetadata() {
        return publicMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> privateMetadata() {
        return (Optional<Map<String, Object>>) privateMetadata;
    }

    @JsonIgnore
    public Optional<String> createdBy() {
        return createdBy;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> logoUrl() {
        return logoUrl;
    }

    public static Builder builder() {
        return new Builder();
    }


    public OrganizationWithLogo withObject(OrganizationWithLogoObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public OrganizationWithLogo withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public OrganizationWithLogo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public OrganizationWithLogo withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    public OrganizationWithLogo withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public OrganizationWithLogo withHasImage(boolean hasImage) {
        Utils.checkNotNull(hasImage, "hasImage");
        this.hasImage = hasImage;
        return this;
    }

    public OrganizationWithLogo withMembersCount(long membersCount) {
        Utils.checkNotNull(membersCount, "membersCount");
        this.membersCount = Optional.ofNullable(membersCount);
        return this;
    }


    public OrganizationWithLogo withMembersCount(Optional<Long> membersCount) {
        Utils.checkNotNull(membersCount, "membersCount");
        this.membersCount = membersCount;
        return this;
    }

    public OrganizationWithLogo withMissingMemberWithElevatedPermissions(boolean missingMemberWithElevatedPermissions) {
        Utils.checkNotNull(missingMemberWithElevatedPermissions, "missingMemberWithElevatedPermissions");
        this.missingMemberWithElevatedPermissions = Optional.ofNullable(missingMemberWithElevatedPermissions);
        return this;
    }


    public OrganizationWithLogo withMissingMemberWithElevatedPermissions(Optional<Boolean> missingMemberWithElevatedPermissions) {
        Utils.checkNotNull(missingMemberWithElevatedPermissions, "missingMemberWithElevatedPermissions");
        this.missingMemberWithElevatedPermissions = missingMemberWithElevatedPermissions;
        return this;
    }

    public OrganizationWithLogo withPendingInvitationsCount(long pendingInvitationsCount) {
        Utils.checkNotNull(pendingInvitationsCount, "pendingInvitationsCount");
        this.pendingInvitationsCount = Optional.ofNullable(pendingInvitationsCount);
        return this;
    }


    public OrganizationWithLogo withPendingInvitationsCount(Optional<Long> pendingInvitationsCount) {
        Utils.checkNotNull(pendingInvitationsCount, "pendingInvitationsCount");
        this.pendingInvitationsCount = pendingInvitationsCount;
        return this;
    }

    public OrganizationWithLogo withMaxAllowedMemberships(long maxAllowedMemberships) {
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        this.maxAllowedMemberships = maxAllowedMemberships;
        return this;
    }

    public OrganizationWithLogo withAdminDeleteEnabled(boolean adminDeleteEnabled) {
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        this.adminDeleteEnabled = adminDeleteEnabled;
        return this;
    }

    public OrganizationWithLogo withPublicMetadata(Map<String, Object> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public OrganizationWithLogo withPrivateMetadata(Map<String, Object> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }


    public OrganizationWithLogo withPrivateMetadata(Optional<? extends Map<String, Object>> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    public OrganizationWithLogo withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = Optional.ofNullable(createdBy);
        return this;
    }


    public OrganizationWithLogo withCreatedBy(Optional<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public OrganizationWithLogo withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public OrganizationWithLogo withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public OrganizationWithLogo withLogoUrl(String logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = Optional.ofNullable(logoUrl);
        return this;
    }


    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public OrganizationWithLogo withLogoUrl(Optional<String> logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = logoUrl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganizationWithLogo other = (OrganizationWithLogo) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.slug, other.slug) &&
            Utils.enhancedDeepEquals(this.imageUrl, other.imageUrl) &&
            Utils.enhancedDeepEquals(this.hasImage, other.hasImage) &&
            Utils.enhancedDeepEquals(this.membersCount, other.membersCount) &&
            Utils.enhancedDeepEquals(this.missingMemberWithElevatedPermissions, other.missingMemberWithElevatedPermissions) &&
            Utils.enhancedDeepEquals(this.pendingInvitationsCount, other.pendingInvitationsCount) &&
            Utils.enhancedDeepEquals(this.maxAllowedMemberships, other.maxAllowedMemberships) &&
            Utils.enhancedDeepEquals(this.adminDeleteEnabled, other.adminDeleteEnabled) &&
            Utils.enhancedDeepEquals(this.publicMetadata, other.publicMetadata) &&
            Utils.enhancedDeepEquals(this.privateMetadata, other.privateMetadata) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.logoUrl, other.logoUrl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, name,
            slug, imageUrl, hasImage,
            membersCount, missingMemberWithElevatedPermissions, pendingInvitationsCount,
            maxAllowedMemberships, adminDeleteEnabled, publicMetadata,
            privateMetadata, createdBy, createdAt,
            updatedAt, logoUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrganizationWithLogo.class,
                "object", object,
                "id", id,
                "name", name,
                "slug", slug,
                "imageUrl", imageUrl,
                "hasImage", hasImage,
                "membersCount", membersCount,
                "missingMemberWithElevatedPermissions", missingMemberWithElevatedPermissions,
                "pendingInvitationsCount", pendingInvitationsCount,
                "maxAllowedMemberships", maxAllowedMemberships,
                "adminDeleteEnabled", adminDeleteEnabled,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "createdBy", createdBy,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "logoUrl", logoUrl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OrganizationWithLogoObject object;

        private String id;

        private String name;

        private String slug;

        private String imageUrl;

        private Boolean hasImage;

        private Optional<Long> membersCount = Optional.empty();

        private Optional<Boolean> missingMemberWithElevatedPermissions = Optional.empty();

        private Optional<Long> pendingInvitationsCount = Optional.empty();

        private Long maxAllowedMemberships;

        private Boolean adminDeleteEnabled;

        private Map<String, Object> publicMetadata;

        private Optional<? extends Map<String, Object>> privateMetadata = Optional.empty();

        private Optional<String> createdBy = Optional.empty();

        private Long createdAt;

        private Long updatedAt;

        @Deprecated
        private Optional<String> logoUrl = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder object(OrganizationWithLogoObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }


        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }


        public Builder hasImage(boolean hasImage) {
            Utils.checkNotNull(hasImage, "hasImage");
            this.hasImage = hasImage;
            return this;
        }


        public Builder membersCount(long membersCount) {
            Utils.checkNotNull(membersCount, "membersCount");
            this.membersCount = Optional.ofNullable(membersCount);
            return this;
        }

        public Builder membersCount(Optional<Long> membersCount) {
            Utils.checkNotNull(membersCount, "membersCount");
            this.membersCount = membersCount;
            return this;
        }


        public Builder missingMemberWithElevatedPermissions(boolean missingMemberWithElevatedPermissions) {
            Utils.checkNotNull(missingMemberWithElevatedPermissions, "missingMemberWithElevatedPermissions");
            this.missingMemberWithElevatedPermissions = Optional.ofNullable(missingMemberWithElevatedPermissions);
            return this;
        }

        public Builder missingMemberWithElevatedPermissions(Optional<Boolean> missingMemberWithElevatedPermissions) {
            Utils.checkNotNull(missingMemberWithElevatedPermissions, "missingMemberWithElevatedPermissions");
            this.missingMemberWithElevatedPermissions = missingMemberWithElevatedPermissions;
            return this;
        }


        public Builder pendingInvitationsCount(long pendingInvitationsCount) {
            Utils.checkNotNull(pendingInvitationsCount, "pendingInvitationsCount");
            this.pendingInvitationsCount = Optional.ofNullable(pendingInvitationsCount);
            return this;
        }

        public Builder pendingInvitationsCount(Optional<Long> pendingInvitationsCount) {
            Utils.checkNotNull(pendingInvitationsCount, "pendingInvitationsCount");
            this.pendingInvitationsCount = pendingInvitationsCount;
            return this;
        }


        public Builder maxAllowedMemberships(long maxAllowedMemberships) {
            Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
            this.maxAllowedMemberships = maxAllowedMemberships;
            return this;
        }


        public Builder adminDeleteEnabled(boolean adminDeleteEnabled) {
            Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
            this.adminDeleteEnabled = adminDeleteEnabled;
            return this;
        }


        public Builder publicMetadata(Map<String, Object> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }


        public Builder privateMetadata(Map<String, Object> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        public Builder privateMetadata(Optional<? extends Map<String, Object>> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }


        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        public Builder createdBy(Optional<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }


        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder logoUrl(String logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = Optional.ofNullable(logoUrl);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder logoUrl(Optional<String> logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = logoUrl;
            return this;
        }

        public OrganizationWithLogo build() {

            return new OrganizationWithLogo(
                object, id, name,
                slug, imageUrl, hasImage,
                membersCount, missingMemberWithElevatedPermissions, pendingInvitationsCount,
                maxAllowedMemberships, adminDeleteEnabled, publicMetadata,
                privateMetadata, createdBy, createdAt,
                updatedAt, logoUrl);
        }

    }
}
