/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * Instance
 * 
 * <p>Success
 */
public class Instance {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private InstanceObject object;


    @JsonProperty("id")
    private String id;


    @JsonProperty("environment_type")
    private String environmentType;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("allowed_origins")
    private Optional<? extends List<String>> allowedOrigins;

    @JsonCreator
    public Instance(
            @JsonProperty("object") InstanceObject object,
            @JsonProperty("id") String id,
            @JsonProperty("environment_type") String environmentType,
            @JsonProperty("allowed_origins") Optional<? extends List<String>> allowedOrigins) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(environmentType, "environmentType");
        Utils.checkNotNull(allowedOrigins, "allowedOrigins");
        this.object = object;
        this.id = id;
        this.environmentType = environmentType;
        this.allowedOrigins = allowedOrigins;
    }
    
    public Instance(
            InstanceObject object,
            String id,
            String environmentType) {
        this(object, id, environmentType,
            Optional.empty());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public InstanceObject object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String environmentType() {
        return environmentType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> allowedOrigins() {
        return (Optional<List<String>>) allowedOrigins;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public Instance withObject(InstanceObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public Instance withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Instance withEnvironmentType(String environmentType) {
        Utils.checkNotNull(environmentType, "environmentType");
        this.environmentType = environmentType;
        return this;
    }

    public Instance withAllowedOrigins(List<String> allowedOrigins) {
        Utils.checkNotNull(allowedOrigins, "allowedOrigins");
        this.allowedOrigins = Optional.ofNullable(allowedOrigins);
        return this;
    }


    public Instance withAllowedOrigins(Optional<? extends List<String>> allowedOrigins) {
        Utils.checkNotNull(allowedOrigins, "allowedOrigins");
        this.allowedOrigins = allowedOrigins;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Instance other = (Instance) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.environmentType, other.environmentType) &&
            Utils.enhancedDeepEquals(this.allowedOrigins, other.allowedOrigins);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, environmentType,
            allowedOrigins);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Instance.class,
                "object", object,
                "id", id,
                "environmentType", environmentType,
                "allowedOrigins", allowedOrigins);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private InstanceObject object;

        private String id;

        private String environmentType;

        private Optional<? extends List<String>> allowedOrigins = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(InstanceObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder environmentType(String environmentType) {
            Utils.checkNotNull(environmentType, "environmentType");
            this.environmentType = environmentType;
            return this;
        }


        public Builder allowedOrigins(List<String> allowedOrigins) {
            Utils.checkNotNull(allowedOrigins, "allowedOrigins");
            this.allowedOrigins = Optional.ofNullable(allowedOrigins);
            return this;
        }

        public Builder allowedOrigins(Optional<? extends List<String>> allowedOrigins) {
            Utils.checkNotNull(allowedOrigins, "allowedOrigins");
            this.allowedOrigins = allowedOrigins;
            return this;
        }

        public Instance build() {

            return new Instance(
                object, id, environmentType,
                allowedOrigins);
        }

    }
}
