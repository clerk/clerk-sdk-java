/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Instance - Success
 */

public class Instance {

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends InstanceObject> object;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment_type")
    private Optional<String> environmentType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_origins")
    private JsonNullable<? extends List<String>> allowedOrigins;

    @JsonCreator
    public Instance(
            @JsonProperty("object") Optional<? extends InstanceObject> object,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("environment_type") Optional<String> environmentType,
            @JsonProperty("allowed_origins") JsonNullable<? extends List<String>> allowedOrigins) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(environmentType, "environmentType");
        Utils.checkNotNull(allowedOrigins, "allowedOrigins");
        this.object = object;
        this.id = id;
        this.environmentType = environmentType;
        this.allowedOrigins = allowedOrigins;
    }
    
    public Instance() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InstanceObject> object() {
        return (Optional<InstanceObject>) object;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> environmentType() {
        return environmentType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> allowedOrigins() {
        return (JsonNullable<List<String>>) allowedOrigins;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public Instance withObject(InstanceObject object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public Instance withObject(Optional<? extends InstanceObject> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public Instance withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Instance withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Instance withEnvironmentType(String environmentType) {
        Utils.checkNotNull(environmentType, "environmentType");
        this.environmentType = Optional.ofNullable(environmentType);
        return this;
    }

    public Instance withEnvironmentType(Optional<String> environmentType) {
        Utils.checkNotNull(environmentType, "environmentType");
        this.environmentType = environmentType;
        return this;
    }

    public Instance withAllowedOrigins(List<String> allowedOrigins) {
        Utils.checkNotNull(allowedOrigins, "allowedOrigins");
        this.allowedOrigins = JsonNullable.of(allowedOrigins);
        return this;
    }

    public Instance withAllowedOrigins(JsonNullable<? extends List<String>> allowedOrigins) {
        Utils.checkNotNull(allowedOrigins, "allowedOrigins");
        this.allowedOrigins = allowedOrigins;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Instance other = (Instance) o;
        return 
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.environmentType, other.environmentType) &&
            Objects.deepEquals(this.allowedOrigins, other.allowedOrigins);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            object,
            id,
            environmentType,
            allowedOrigins);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Instance.class,
                "object", object,
                "id", id,
                "environmentType", environmentType,
                "allowedOrigins", allowedOrigins);
    }
    
    public final static class Builder {
 
        private Optional<? extends InstanceObject> object = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> environmentType = Optional.empty();
 
        private JsonNullable<? extends List<String>> allowedOrigins = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(InstanceObject object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(Optional<? extends InstanceObject> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder environmentType(String environmentType) {
            Utils.checkNotNull(environmentType, "environmentType");
            this.environmentType = Optional.ofNullable(environmentType);
            return this;
        }

        public Builder environmentType(Optional<String> environmentType) {
            Utils.checkNotNull(environmentType, "environmentType");
            this.environmentType = environmentType;
            return this;
        }

        public Builder allowedOrigins(List<String> allowedOrigins) {
            Utils.checkNotNull(allowedOrigins, "allowedOrigins");
            this.allowedOrigins = JsonNullable.of(allowedOrigins);
            return this;
        }

        public Builder allowedOrigins(JsonNullable<? extends List<String>> allowedOrigins) {
            Utils.checkNotNull(allowedOrigins, "allowedOrigins");
            this.allowedOrigins = allowedOrigins;
            return this;
        }
        
        public Instance build() {
            return new Instance(
                object,
                id,
                environmentType,
                allowedOrigins);
        }
    }
}

