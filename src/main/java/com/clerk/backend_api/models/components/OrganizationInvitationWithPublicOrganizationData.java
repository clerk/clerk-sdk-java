/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;

/**
 * OrganizationInvitationWithPublicOrganizationData
 * 
 * <p>An organization invitation with public organization data populated
 */
public class OrganizationInvitationWithPublicOrganizationData {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private OrganizationInvitationWithPublicOrganizationDataObject object;


    @JsonProperty("id")
    private String id;


    @JsonProperty("email_address")
    private String emailAddress;


    @JsonProperty("role")
    private String role;


    @JsonProperty("role_name")
    private String roleName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_id")
    private Optional<String> organizationId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;


    @JsonProperty("public_metadata")
    private Map<String, Object> publicMetadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends Map<String, Object>> privateMetadata;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * Unix timestamp of expiration.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("expires_at")
    private Optional<Long> expiresAt;

    /**
     * Unix timestamp of creation.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of last update.
     */
    @JsonProperty("updated_at")
    private long updatedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_organization_data")
    private Optional<? extends OrganizationInvitationPublicOrganizationData> publicOrganizationData;

    @JsonCreator
    public OrganizationInvitationWithPublicOrganizationData(
            @JsonProperty("object") OrganizationInvitationWithPublicOrganizationDataObject object,
            @JsonProperty("id") String id,
            @JsonProperty("email_address") String emailAddress,
            @JsonProperty("role") String role,
            @JsonProperty("role_name") String roleName,
            @JsonProperty("organization_id") Optional<String> organizationId,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("public_metadata") Map<String, Object> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends Map<String, Object>> privateMetadata,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("expires_at") Optional<Long> expiresAt,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt,
            @JsonProperty("public_organization_data") Optional<? extends OrganizationInvitationPublicOrganizationData> publicOrganizationData) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(roleName, "roleName");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(status, "status");
        publicMetadata = Utils.emptyMapIfNull(publicMetadata);
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(publicOrganizationData, "publicOrganizationData");
        this.object = object;
        this.id = id;
        this.emailAddress = emailAddress;
        this.role = role;
        this.roleName = roleName;
        this.organizationId = organizationId;
        this.status = status;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.url = url;
        this.expiresAt = expiresAt;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.publicOrganizationData = publicOrganizationData;
    }
    
    public OrganizationInvitationWithPublicOrganizationData(
            OrganizationInvitationWithPublicOrganizationDataObject object,
            String id,
            String emailAddress,
            String role,
            String roleName,
            Map<String, Object> publicMetadata,
            long createdAt,
            long updatedAt) {
        this(object, id, emailAddress,
            role, roleName, Optional.empty(),
            Optional.empty(), publicMetadata, Optional.empty(),
            Optional.empty(), Optional.empty(), createdAt,
            updatedAt, Optional.empty());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public OrganizationInvitationWithPublicOrganizationDataObject object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String emailAddress() {
        return emailAddress;
    }

    @JsonIgnore
    public String role() {
        return role;
    }

    @JsonIgnore
    public String roleName() {
        return roleName;
    }

    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    @JsonIgnore
    public Map<String, Object> publicMetadata() {
        return publicMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> privateMetadata() {
        return (Optional<Map<String, Object>>) privateMetadata;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * Unix timestamp of expiration.
     */
    @JsonIgnore
    public Optional<Long> expiresAt() {
        return expiresAt;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrganizationInvitationPublicOrganizationData> publicOrganizationData() {
        return (Optional<OrganizationInvitationPublicOrganizationData>) publicOrganizationData;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public OrganizationInvitationWithPublicOrganizationData withObject(OrganizationInvitationWithPublicOrganizationDataObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withRole(String role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withRoleName(String roleName) {
        Utils.checkNotNull(roleName, "roleName");
        this.roleName = roleName;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }


    public OrganizationInvitationWithPublicOrganizationData withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public OrganizationInvitationWithPublicOrganizationData withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withPublicMetadata(Map<String, Object> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withPrivateMetadata(Map<String, Object> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }


    public OrganizationInvitationWithPublicOrganizationData withPrivateMetadata(Optional<? extends Map<String, Object>> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }


    public OrganizationInvitationWithPublicOrganizationData withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Unix timestamp of expiration.
     */
    public OrganizationInvitationWithPublicOrganizationData withExpiresAt(long expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = Optional.ofNullable(expiresAt);
        return this;
    }


    /**
     * Unix timestamp of expiration.
     */
    public OrganizationInvitationWithPublicOrganizationData withExpiresAt(Optional<Long> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public OrganizationInvitationWithPublicOrganizationData withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public OrganizationInvitationWithPublicOrganizationData withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public OrganizationInvitationWithPublicOrganizationData withPublicOrganizationData(OrganizationInvitationPublicOrganizationData publicOrganizationData) {
        Utils.checkNotNull(publicOrganizationData, "publicOrganizationData");
        this.publicOrganizationData = Optional.ofNullable(publicOrganizationData);
        return this;
    }


    public OrganizationInvitationWithPublicOrganizationData withPublicOrganizationData(Optional<? extends OrganizationInvitationPublicOrganizationData> publicOrganizationData) {
        Utils.checkNotNull(publicOrganizationData, "publicOrganizationData");
        this.publicOrganizationData = publicOrganizationData;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganizationInvitationWithPublicOrganizationData other = (OrganizationInvitationWithPublicOrganizationData) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress) &&
            Utils.enhancedDeepEquals(this.role, other.role) &&
            Utils.enhancedDeepEquals(this.roleName, other.roleName) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.publicMetadata, other.publicMetadata) &&
            Utils.enhancedDeepEquals(this.privateMetadata, other.privateMetadata) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.publicOrganizationData, other.publicOrganizationData);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, emailAddress,
            role, roleName, organizationId,
            status, publicMetadata, privateMetadata,
            url, expiresAt, createdAt,
            updatedAt, publicOrganizationData);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrganizationInvitationWithPublicOrganizationData.class,
                "object", object,
                "id", id,
                "emailAddress", emailAddress,
                "role", role,
                "roleName", roleName,
                "organizationId", organizationId,
                "status", status,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "url", url,
                "expiresAt", expiresAt,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "publicOrganizationData", publicOrganizationData);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OrganizationInvitationWithPublicOrganizationDataObject object;

        private String id;

        private String emailAddress;

        private String role;

        private String roleName;

        private Optional<String> organizationId = Optional.empty();

        private Optional<String> status = Optional.empty();

        private Map<String, Object> publicMetadata;

        private Optional<? extends Map<String, Object>> privateMetadata = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<Long> expiresAt = Optional.empty();

        private Long createdAt;

        private Long updatedAt;

        private Optional<? extends OrganizationInvitationPublicOrganizationData> publicOrganizationData = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(OrganizationInvitationWithPublicOrganizationDataObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }


        public Builder role(String role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }


        public Builder roleName(String roleName) {
            Utils.checkNotNull(roleName, "roleName");
            this.roleName = roleName;
            return this;
        }


        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder publicMetadata(Map<String, Object> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }


        public Builder privateMetadata(Map<String, Object> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        public Builder privateMetadata(Optional<? extends Map<String, Object>> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }


        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * Unix timestamp of expiration.
         */
        public Builder expiresAt(long expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        /**
         * Unix timestamp of expiration.
         */
        public Builder expiresAt(Optional<Long> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }


        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder publicOrganizationData(OrganizationInvitationPublicOrganizationData publicOrganizationData) {
            Utils.checkNotNull(publicOrganizationData, "publicOrganizationData");
            this.publicOrganizationData = Optional.ofNullable(publicOrganizationData);
            return this;
        }

        public Builder publicOrganizationData(Optional<? extends OrganizationInvitationPublicOrganizationData> publicOrganizationData) {
            Utils.checkNotNull(publicOrganizationData, "publicOrganizationData");
            this.publicOrganizationData = publicOrganizationData;
            return this;
        }

        public OrganizationInvitationWithPublicOrganizationData build() {

            return new OrganizationInvitationWithPublicOrganizationData(
                object, id, emailAddress,
                role, roleName, organizationId,
                status, publicMetadata, privateMetadata,
                url, expiresAt, createdAt,
                updatedAt, publicOrganizationData);
        }

    }
}
