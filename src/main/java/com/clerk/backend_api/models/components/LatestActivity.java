/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class LatestActivity {

    @JsonProperty("object")
    private String object;

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_type")
    private Optional<String> deviceType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_mobile")
    private Optional<Boolean> isMobile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("browser_name")
    private Optional<String> browserName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("browser_version")
    private Optional<String> browserVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_address")
    private Optional<String> ipAddress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    @JsonCreator
    public LatestActivity(
            @JsonProperty("object") String object,
            @JsonProperty("id") String id,
            @JsonProperty("device_type") Optional<String> deviceType,
            @JsonProperty("is_mobile") Optional<Boolean> isMobile,
            @JsonProperty("browser_name") Optional<String> browserName,
            @JsonProperty("browser_version") Optional<String> browserVersion,
            @JsonProperty("ip_address") Optional<String> ipAddress,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("country") Optional<String> country) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(deviceType, "deviceType");
        Utils.checkNotNull(isMobile, "isMobile");
        Utils.checkNotNull(browserName, "browserName");
        Utils.checkNotNull(browserVersion, "browserVersion");
        Utils.checkNotNull(ipAddress, "ipAddress");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(country, "country");
        this.object = object;
        this.id = id;
        this.deviceType = deviceType;
        this.isMobile = isMobile;
        this.browserName = browserName;
        this.browserVersion = browserVersion;
        this.ipAddress = ipAddress;
        this.city = city;
        this.country = country;
    }
    
    public LatestActivity(
            String object,
            String id) {
        this(object, id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> deviceType() {
        return deviceType;
    }

    @JsonIgnore
    public Optional<Boolean> isMobile() {
        return isMobile;
    }

    @JsonIgnore
    public Optional<String> browserName() {
        return browserName;
    }

    @JsonIgnore
    public Optional<String> browserVersion() {
        return browserVersion;
    }

    @JsonIgnore
    public Optional<String> ipAddress() {
        return ipAddress;
    }

    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public LatestActivity withObject(String object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public LatestActivity withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public LatestActivity withDeviceType(String deviceType) {
        Utils.checkNotNull(deviceType, "deviceType");
        this.deviceType = Optional.ofNullable(deviceType);
        return this;
    }

    public LatestActivity withDeviceType(Optional<String> deviceType) {
        Utils.checkNotNull(deviceType, "deviceType");
        this.deviceType = deviceType;
        return this;
    }

    public LatestActivity withIsMobile(boolean isMobile) {
        Utils.checkNotNull(isMobile, "isMobile");
        this.isMobile = Optional.ofNullable(isMobile);
        return this;
    }

    public LatestActivity withIsMobile(Optional<Boolean> isMobile) {
        Utils.checkNotNull(isMobile, "isMobile");
        this.isMobile = isMobile;
        return this;
    }

    public LatestActivity withBrowserName(String browserName) {
        Utils.checkNotNull(browserName, "browserName");
        this.browserName = Optional.ofNullable(browserName);
        return this;
    }

    public LatestActivity withBrowserName(Optional<String> browserName) {
        Utils.checkNotNull(browserName, "browserName");
        this.browserName = browserName;
        return this;
    }

    public LatestActivity withBrowserVersion(String browserVersion) {
        Utils.checkNotNull(browserVersion, "browserVersion");
        this.browserVersion = Optional.ofNullable(browserVersion);
        return this;
    }

    public LatestActivity withBrowserVersion(Optional<String> browserVersion) {
        Utils.checkNotNull(browserVersion, "browserVersion");
        this.browserVersion = browserVersion;
        return this;
    }

    public LatestActivity withIpAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = Optional.ofNullable(ipAddress);
        return this;
    }

    public LatestActivity withIpAddress(Optional<String> ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }

    public LatestActivity withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    public LatestActivity withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    public LatestActivity withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    public LatestActivity withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LatestActivity other = (LatestActivity) o;
        return 
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.deviceType, other.deviceType) &&
            Objects.deepEquals(this.isMobile, other.isMobile) &&
            Objects.deepEquals(this.browserName, other.browserName) &&
            Objects.deepEquals(this.browserVersion, other.browserVersion) &&
            Objects.deepEquals(this.ipAddress, other.ipAddress) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            object,
            id,
            deviceType,
            isMobile,
            browserName,
            browserVersion,
            ipAddress,
            city,
            country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LatestActivity.class,
                "object", object,
                "id", id,
                "deviceType", deviceType,
                "isMobile", isMobile,
                "browserName", browserName,
                "browserVersion", browserVersion,
                "ipAddress", ipAddress,
                "city", city,
                "country", country);
    }
    
    public final static class Builder {
 
        private String object;
 
        private String id;
 
        private Optional<String> deviceType = Optional.empty();
 
        private Optional<Boolean> isMobile = Optional.empty();
 
        private Optional<String> browserName = Optional.empty();
 
        private Optional<String> browserVersion = Optional.empty();
 
        private Optional<String> ipAddress = Optional.empty();
 
        private Optional<String> city = Optional.empty();
 
        private Optional<String> country = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder object(String object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder deviceType(String deviceType) {
            Utils.checkNotNull(deviceType, "deviceType");
            this.deviceType = Optional.ofNullable(deviceType);
            return this;
        }

        public Builder deviceType(Optional<String> deviceType) {
            Utils.checkNotNull(deviceType, "deviceType");
            this.deviceType = deviceType;
            return this;
        }

        public Builder isMobile(boolean isMobile) {
            Utils.checkNotNull(isMobile, "isMobile");
            this.isMobile = Optional.ofNullable(isMobile);
            return this;
        }

        public Builder isMobile(Optional<Boolean> isMobile) {
            Utils.checkNotNull(isMobile, "isMobile");
            this.isMobile = isMobile;
            return this;
        }

        public Builder browserName(String browserName) {
            Utils.checkNotNull(browserName, "browserName");
            this.browserName = Optional.ofNullable(browserName);
            return this;
        }

        public Builder browserName(Optional<String> browserName) {
            Utils.checkNotNull(browserName, "browserName");
            this.browserName = browserName;
            return this;
        }

        public Builder browserVersion(String browserVersion) {
            Utils.checkNotNull(browserVersion, "browserVersion");
            this.browserVersion = Optional.ofNullable(browserVersion);
            return this;
        }

        public Builder browserVersion(Optional<String> browserVersion) {
            Utils.checkNotNull(browserVersion, "browserVersion");
            this.browserVersion = browserVersion;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        public Builder ipAddress(Optional<String> ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }
        
        public LatestActivity build() {
            return new LatestActivity(
                object,
                id,
                deviceType,
                isMobile,
                browserName,
                browserVersion,
                ipAddress,
                city,
                country);
        }
    }
}

