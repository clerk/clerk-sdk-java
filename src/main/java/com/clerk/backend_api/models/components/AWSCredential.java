/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;

/**
 * AWSCredential
 * 
 * <p>Success
 */
public class AWSCredential {

    @JsonProperty("id")
    private String id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private Object object;


    @JsonProperty("access_key_id")
    private String accessKeyId;


    @JsonProperty("user_pool_ids")
    private List<String> userPoolIds;

    /**
     * Unix timestamp of creation
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp of creation
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    @JsonCreator
    public AWSCredential(
            @JsonProperty("id") String id,
            @JsonProperty("object") Object object,
            @JsonProperty("access_key_id") String accessKeyId,
            @JsonProperty("user_pool_ids") List<String> userPoolIds,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        Utils.checkNotNull(userPoolIds, "userPoolIds");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.object = object;
        this.accessKeyId = accessKeyId;
        this.userPoolIds = userPoolIds;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public Object object() {
        return object;
    }

    @JsonIgnore
    public String accessKeyId() {
        return accessKeyId;
    }

    @JsonIgnore
    public List<String> userPoolIds() {
        return userPoolIds;
    }

    /**
     * Unix timestamp of creation
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of creation
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AWSCredential withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public AWSCredential withObject(Object object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public AWSCredential withAccessKeyId(String accessKeyId) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        this.accessKeyId = accessKeyId;
        return this;
    }

    public AWSCredential withUserPoolIds(List<String> userPoolIds) {
        Utils.checkNotNull(userPoolIds, "userPoolIds");
        this.userPoolIds = userPoolIds;
        return this;
    }

    /**
     * Unix timestamp of creation
     */
    public AWSCredential withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of creation
     */
    public AWSCredential withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AWSCredential other = (AWSCredential) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.accessKeyId, other.accessKeyId) &&
            Utils.enhancedDeepEquals(this.userPoolIds, other.userPoolIds) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, object, accessKeyId,
            userPoolIds, createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AWSCredential.class,
                "id", id,
                "object", object,
                "accessKeyId", accessKeyId,
                "userPoolIds", userPoolIds,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Object object;

        private String accessKeyId;

        private List<String> userPoolIds;

        private Long createdAt;

        private Long updatedAt;

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(Object object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        public Builder accessKeyId(String accessKeyId) {
            Utils.checkNotNull(accessKeyId, "accessKeyId");
            this.accessKeyId = accessKeyId;
            return this;
        }


        public Builder userPoolIds(List<String> userPoolIds) {
            Utils.checkNotNull(userPoolIds, "userPoolIds");
            this.userPoolIds = userPoolIds;
            return this;
        }


        /**
         * Unix timestamp of creation
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp of creation
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public AWSCredential build() {

            return new AWSCredential(
                id, object, accessKeyId,
                userPoolIds, createdAt, updatedAt);
        }

    }
}
