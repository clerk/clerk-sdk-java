/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;


public class FeatureResponse {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private FeatureResponseObject object;

    /**
     * Unique identifier for the feature.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The name of the feature.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The description of the feature.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The URL-friendly slug for the feature.
     */
    @JsonProperty("slug")
    private String slug;

    /**
     * The URL of the feature's avatar image.
     */
    @JsonProperty("avatar_url")
    private String avatarUrl;

    @JsonCreator
    public FeatureResponse(
            @JsonProperty("object") FeatureResponseObject object,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("description") String description,
            @JsonProperty("slug") String slug,
            @JsonProperty("avatar_url") String avatarUrl) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.object = object;
        this.id = id;
        this.name = name;
        this.description = description;
        this.slug = slug;
        this.avatarUrl = avatarUrl;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public FeatureResponseObject object() {
        return object;
    }

    /**
     * Unique identifier for the feature.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The name of the feature.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The description of the feature.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The URL-friendly slug for the feature.
     */
    @JsonIgnore
    public String slug() {
        return slug;
    }

    /**
     * The URL of the feature's avatar image.
     */
    @JsonIgnore
    public String avatarUrl() {
        return avatarUrl;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public FeatureResponse withObject(FeatureResponseObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * Unique identifier for the feature.
     */
    public FeatureResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the feature.
     */
    public FeatureResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of the feature.
     */
    public FeatureResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The URL-friendly slug for the feature.
     */
    public FeatureResponse withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * The URL of the feature's avatar image.
     */
    public FeatureResponse withAvatarUrl(String avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = avatarUrl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeatureResponse other = (FeatureResponse) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.slug, other.slug) &&
            Utils.enhancedDeepEquals(this.avatarUrl, other.avatarUrl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, name,
            description, slug, avatarUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeatureResponse.class,
                "object", object,
                "id", id,
                "name", name,
                "description", description,
                "slug", slug,
                "avatarUrl", avatarUrl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private FeatureResponseObject object;

        private String id;

        private String name;

        private String description;

        private String slug;

        private String avatarUrl;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(FeatureResponseObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * Unique identifier for the feature.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The name of the feature.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The description of the feature.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The URL-friendly slug for the feature.
         */
        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }


        /**
         * The URL of the feature's avatar image.
         */
        public Builder avatarUrl(String avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = avatarUrl;
            return this;
        }

        public FeatureResponse build() {

            return new FeatureResponse(
                object, id, name,
                description, slug, avatarUrl);
        }

    }
}
