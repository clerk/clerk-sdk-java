/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * Payer
 * 
 * <p>The payer associated with this subscription.
 */
public class Payer {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private CommerceSubscriptionItemPayerObject object;

    /**
     * Unique identifier for the payer.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Unique identifier for the Clerk instance.
     */
    @JsonProperty("instance_id")
    private String instanceId;

    /**
     * User ID for user-type payers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    /**
     * First name of the payer.
     */
    @JsonProperty("first_name")
    private String firstName;

    /**
     * Last name of the payer.
     */
    @JsonProperty("last_name")
    private String lastName;

    /**
     * Email address of the payer.
     */
    @JsonProperty("email")
    private String email;

    /**
     * Organization ID for org-type payers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_id")
    private Optional<String> organizationId;

    /**
     * Organization name for org-type payers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_name")
    private Optional<String> organizationName;

    /**
     * URL of the payer's image/avatar.
     */
    @JsonProperty("image_url")
    private String imageUrl;

    /**
     * Unix timestamp (in milliseconds) when the payer was created.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp (in milliseconds) when the payer was last updated.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    @JsonCreator
    public Payer(
            @JsonProperty("object") CommerceSubscriptionItemPayerObject object,
            @JsonProperty("id") String id,
            @JsonProperty("instance_id") String instanceId,
            @JsonProperty("user_id") Optional<String> userId,
            @JsonProperty("first_name") String firstName,
            @JsonProperty("last_name") String lastName,
            @JsonProperty("email") String email,
            @JsonProperty("organization_id") Optional<String> organizationId,
            @JsonProperty("organization_name") Optional<String> organizationName,
            @JsonProperty("image_url") String imageUrl,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(instanceId, "instanceId");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(organizationName, "organizationName");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.object = object;
        this.id = id;
        this.instanceId = instanceId;
        this.userId = userId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.organizationId = organizationId;
        this.organizationName = organizationName;
        this.imageUrl = imageUrl;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public Payer(
            CommerceSubscriptionItemPayerObject object,
            String id,
            String instanceId,
            String firstName,
            String lastName,
            String email,
            String imageUrl,
            long createdAt,
            long updatedAt) {
        this(object, id, instanceId,
            Optional.empty(), firstName, lastName,
            email, Optional.empty(), Optional.empty(),
            imageUrl, createdAt, updatedAt);
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public CommerceSubscriptionItemPayerObject object() {
        return object;
    }

    /**
     * Unique identifier for the payer.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Unique identifier for the Clerk instance.
     */
    @JsonIgnore
    public String instanceId() {
        return instanceId;
    }

    /**
     * User ID for user-type payers.
     */
    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    /**
     * First name of the payer.
     */
    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    /**
     * Last name of the payer.
     */
    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    /**
     * Email address of the payer.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * Organization ID for org-type payers.
     */
    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    /**
     * Organization name for org-type payers.
     */
    @JsonIgnore
    public Optional<String> organizationName() {
        return organizationName;
    }

    /**
     * URL of the payer's image/avatar.
     */
    @JsonIgnore
    public String imageUrl() {
        return imageUrl;
    }

    /**
     * Unix timestamp (in milliseconds) when the payer was created.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp (in milliseconds) when the payer was last updated.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public Payer withObject(CommerceSubscriptionItemPayerObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * Unique identifier for the payer.
     */
    public Payer withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Unique identifier for the Clerk instance.
     */
    public Payer withInstanceId(String instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = instanceId;
        return this;
    }

    /**
     * User ID for user-type payers.
     */
    public Payer withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }


    /**
     * User ID for user-type payers.
     */
    public Payer withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * First name of the payer.
     */
    public Payer withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * Last name of the payer.
     */
    public Payer withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Email address of the payer.
     */
    public Payer withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Organization ID for org-type payers.
     */
    public Payer withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }


    /**
     * Organization ID for org-type payers.
     */
    public Payer withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Organization name for org-type payers.
     */
    public Payer withOrganizationName(String organizationName) {
        Utils.checkNotNull(organizationName, "organizationName");
        this.organizationName = Optional.ofNullable(organizationName);
        return this;
    }


    /**
     * Organization name for org-type payers.
     */
    public Payer withOrganizationName(Optional<String> organizationName) {
        Utils.checkNotNull(organizationName, "organizationName");
        this.organizationName = organizationName;
        return this;
    }

    /**
     * URL of the payer's image/avatar.
     */
    public Payer withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the payer was created.
     */
    public Payer withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the payer was last updated.
     */
    public Payer withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Payer other = (Payer) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.instanceId, other.instanceId) &&
            Utils.enhancedDeepEquals(this.userId, other.userId) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.organizationName, other.organizationName) &&
            Utils.enhancedDeepEquals(this.imageUrl, other.imageUrl) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, instanceId,
            userId, firstName, lastName,
            email, organizationId, organizationName,
            imageUrl, createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Payer.class,
                "object", object,
                "id", id,
                "instanceId", instanceId,
                "userId", userId,
                "firstName", firstName,
                "lastName", lastName,
                "email", email,
                "organizationId", organizationId,
                "organizationName", organizationName,
                "imageUrl", imageUrl,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CommerceSubscriptionItemPayerObject object;

        private String id;

        private String instanceId;

        private Optional<String> userId = Optional.empty();

        private String firstName;

        private String lastName;

        private String email;

        private Optional<String> organizationId = Optional.empty();

        private Optional<String> organizationName = Optional.empty();

        private String imageUrl;

        private Long createdAt;

        private Long updatedAt;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(CommerceSubscriptionItemPayerObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * Unique identifier for the payer.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Unique identifier for the Clerk instance.
         */
        public Builder instanceId(String instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = instanceId;
            return this;
        }


        /**
         * User ID for user-type payers.
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * User ID for user-type payers.
         */
        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }


        /**
         * First name of the payer.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        /**
         * Last name of the payer.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * Email address of the payer.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * Organization ID for org-type payers.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        /**
         * Organization ID for org-type payers.
         */
        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * Organization name for org-type payers.
         */
        public Builder organizationName(String organizationName) {
            Utils.checkNotNull(organizationName, "organizationName");
            this.organizationName = Optional.ofNullable(organizationName);
            return this;
        }

        /**
         * Organization name for org-type payers.
         */
        public Builder organizationName(Optional<String> organizationName) {
            Utils.checkNotNull(organizationName, "organizationName");
            this.organizationName = organizationName;
            return this;
        }


        /**
         * URL of the payer's image/avatar.
         */
        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the payer was created.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the payer was last updated.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Payer build() {

            return new Payer(
                object, id, instanceId,
                userId, firstName, lastName,
                email, organizationId, organizationName,
                imageUrl, createdAt, updatedAt);
        }

    }
}
