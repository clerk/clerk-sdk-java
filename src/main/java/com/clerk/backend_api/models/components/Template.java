/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Template {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends TemplateObject> object;

    /**
     * the id of the instance the template belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance_id")
    private JsonNullable<String> instanceId;

    /**
     * whether this is a system (default) or user overridden) template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_type")
    private Optional<String> resourceType;

    /**
     * whether this is an email or SMS template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_type")
    private Optional<String> templateType;

    /**
     * user-friendly name of the template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * machine-friendly name of the template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private Optional<String> slug;

    /**
     * position with the listing of templates
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    private Optional<Long> position;

    /**
     * whether this template can be reverted to the corresponding system default
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_revert")
    private Optional<Boolean> canRevert;

    /**
     * whether this template can be deleted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_delete")
    private Optional<Boolean> canDelete;

    /**
     * whether this template can be enabled or disabled, true only for notification SMS templates
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_toggle")
    private Optional<Boolean> canToggle;

    /**
     * email subject
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private JsonNullable<String> subject;

    /**
     * the editor markup used to generate the body of the template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("markup")
    private Optional<String> markup;

    /**
     * the template body before variable interpolation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private Optional<String> body;

    /**
     * list of variables that are available for use in the template body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_variables")
    private Optional<? extends List<String>> availableVariables;

    /**
     * list of variables that must be contained in the template body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required_variables")
    private Optional<? extends List<String>> requiredVariables;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_email_name")
    private Optional<String> fromEmailName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reply_to_email_name")
    private Optional<String> replyToEmailName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivered_by_clerk")
    private Optional<Boolean> deliveredByClerk;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<Boolean> enabled;

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<Long> updatedAt;

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<Long> createdAt;

    @JsonCreator
    public Template(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("object") Optional<? extends TemplateObject> object,
            @JsonProperty("instance_id") JsonNullable<String> instanceId,
            @JsonProperty("resource_type") Optional<String> resourceType,
            @JsonProperty("template_type") Optional<String> templateType,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("slug") Optional<String> slug,
            @JsonProperty("position") Optional<Long> position,
            @JsonProperty("can_revert") Optional<Boolean> canRevert,
            @JsonProperty("can_delete") Optional<Boolean> canDelete,
            @JsonProperty("can_toggle") Optional<Boolean> canToggle,
            @JsonProperty("subject") JsonNullable<String> subject,
            @JsonProperty("markup") Optional<String> markup,
            @JsonProperty("body") Optional<String> body,
            @JsonProperty("available_variables") Optional<? extends List<String>> availableVariables,
            @JsonProperty("required_variables") Optional<? extends List<String>> requiredVariables,
            @JsonProperty("from_email_name") Optional<String> fromEmailName,
            @JsonProperty("reply_to_email_name") Optional<String> replyToEmailName,
            @JsonProperty("delivered_by_clerk") Optional<Boolean> deliveredByClerk,
            @JsonProperty("enabled") Optional<Boolean> enabled,
            @JsonProperty("updated_at") Optional<Long> updatedAt,
            @JsonProperty("created_at") Optional<Long> createdAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(instanceId, "instanceId");
        Utils.checkNotNull(resourceType, "resourceType");
        Utils.checkNotNull(templateType, "templateType");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(position, "position");
        Utils.checkNotNull(canRevert, "canRevert");
        Utils.checkNotNull(canDelete, "canDelete");
        Utils.checkNotNull(canToggle, "canToggle");
        Utils.checkNotNull(subject, "subject");
        Utils.checkNotNull(markup, "markup");
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(availableVariables, "availableVariables");
        Utils.checkNotNull(requiredVariables, "requiredVariables");
        Utils.checkNotNull(fromEmailName, "fromEmailName");
        Utils.checkNotNull(replyToEmailName, "replyToEmailName");
        Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        this.id = id;
        this.object = object;
        this.instanceId = instanceId;
        this.resourceType = resourceType;
        this.templateType = templateType;
        this.name = name;
        this.slug = slug;
        this.position = position;
        this.canRevert = canRevert;
        this.canDelete = canDelete;
        this.canToggle = canToggle;
        this.subject = subject;
        this.markup = markup;
        this.body = body;
        this.availableVariables = availableVariables;
        this.requiredVariables = requiredVariables;
        this.fromEmailName = fromEmailName;
        this.replyToEmailName = replyToEmailName;
        this.deliveredByClerk = deliveredByClerk;
        this.enabled = enabled;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
    }
    
    public Template() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TemplateObject> object() {
        return (Optional<TemplateObject>) object;
    }

    /**
     * the id of the instance the template belongs to
     */
    @JsonIgnore
    public JsonNullable<String> instanceId() {
        return instanceId;
    }

    /**
     * whether this is a system (default) or user overridden) template
     */
    @JsonIgnore
    public Optional<String> resourceType() {
        return resourceType;
    }

    /**
     * whether this is an email or SMS template
     */
    @JsonIgnore
    public Optional<String> templateType() {
        return templateType;
    }

    /**
     * user-friendly name of the template
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * machine-friendly name of the template
     */
    @JsonIgnore
    public Optional<String> slug() {
        return slug;
    }

    /**
     * position with the listing of templates
     */
    @JsonIgnore
    public Optional<Long> position() {
        return position;
    }

    /**
     * whether this template can be reverted to the corresponding system default
     */
    @JsonIgnore
    public Optional<Boolean> canRevert() {
        return canRevert;
    }

    /**
     * whether this template can be deleted
     */
    @JsonIgnore
    public Optional<Boolean> canDelete() {
        return canDelete;
    }

    /**
     * whether this template can be enabled or disabled, true only for notification SMS templates
     */
    @JsonIgnore
    public Optional<Boolean> canToggle() {
        return canToggle;
    }

    /**
     * email subject
     */
    @JsonIgnore
    public JsonNullable<String> subject() {
        return subject;
    }

    /**
     * the editor markup used to generate the body of the template
     */
    @JsonIgnore
    public Optional<String> markup() {
        return markup;
    }

    /**
     * the template body before variable interpolation
     */
    @JsonIgnore
    public Optional<String> body() {
        return body;
    }

    /**
     * list of variables that are available for use in the template body
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> availableVariables() {
        return (Optional<List<String>>) availableVariables;
    }

    /**
     * list of variables that must be contained in the template body
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> requiredVariables() {
        return (Optional<List<String>>) requiredVariables;
    }

    @JsonIgnore
    public Optional<String> fromEmailName() {
        return fromEmailName;
    }

    @JsonIgnore
    public Optional<String> replyToEmailName() {
        return replyToEmailName;
    }

    @JsonIgnore
    public Optional<Boolean> deliveredByClerk() {
        return deliveredByClerk;
    }

    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return updatedAt;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonIgnore
    public Optional<Long> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Template withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Template withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public Template withObject(TemplateObject object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public Template withObject(Optional<? extends TemplateObject> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * the id of the instance the template belongs to
     */
    public Template withInstanceId(String instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = JsonNullable.of(instanceId);
        return this;
    }

    /**
     * the id of the instance the template belongs to
     */
    public Template withInstanceId(JsonNullable<String> instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = instanceId;
        return this;
    }

    /**
     * whether this is a system (default) or user overridden) template
     */
    public Template withResourceType(String resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = Optional.ofNullable(resourceType);
        return this;
    }

    /**
     * whether this is a system (default) or user overridden) template
     */
    public Template withResourceType(Optional<String> resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = resourceType;
        return this;
    }

    /**
     * whether this is an email or SMS template
     */
    public Template withTemplateType(String templateType) {
        Utils.checkNotNull(templateType, "templateType");
        this.templateType = Optional.ofNullable(templateType);
        return this;
    }

    /**
     * whether this is an email or SMS template
     */
    public Template withTemplateType(Optional<String> templateType) {
        Utils.checkNotNull(templateType, "templateType");
        this.templateType = templateType;
        return this;
    }

    /**
     * user-friendly name of the template
     */
    public Template withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * user-friendly name of the template
     */
    public Template withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * machine-friendly name of the template
     */
    public Template withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = Optional.ofNullable(slug);
        return this;
    }

    /**
     * machine-friendly name of the template
     */
    public Template withSlug(Optional<String> slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * position with the listing of templates
     */
    public Template withPosition(long position) {
        Utils.checkNotNull(position, "position");
        this.position = Optional.ofNullable(position);
        return this;
    }

    /**
     * position with the listing of templates
     */
    public Template withPosition(Optional<Long> position) {
        Utils.checkNotNull(position, "position");
        this.position = position;
        return this;
    }

    /**
     * whether this template can be reverted to the corresponding system default
     */
    public Template withCanRevert(boolean canRevert) {
        Utils.checkNotNull(canRevert, "canRevert");
        this.canRevert = Optional.ofNullable(canRevert);
        return this;
    }

    /**
     * whether this template can be reverted to the corresponding system default
     */
    public Template withCanRevert(Optional<Boolean> canRevert) {
        Utils.checkNotNull(canRevert, "canRevert");
        this.canRevert = canRevert;
        return this;
    }

    /**
     * whether this template can be deleted
     */
    public Template withCanDelete(boolean canDelete) {
        Utils.checkNotNull(canDelete, "canDelete");
        this.canDelete = Optional.ofNullable(canDelete);
        return this;
    }

    /**
     * whether this template can be deleted
     */
    public Template withCanDelete(Optional<Boolean> canDelete) {
        Utils.checkNotNull(canDelete, "canDelete");
        this.canDelete = canDelete;
        return this;
    }

    /**
     * whether this template can be enabled or disabled, true only for notification SMS templates
     */
    public Template withCanToggle(boolean canToggle) {
        Utils.checkNotNull(canToggle, "canToggle");
        this.canToggle = Optional.ofNullable(canToggle);
        return this;
    }

    /**
     * whether this template can be enabled or disabled, true only for notification SMS templates
     */
    public Template withCanToggle(Optional<Boolean> canToggle) {
        Utils.checkNotNull(canToggle, "canToggle");
        this.canToggle = canToggle;
        return this;
    }

    /**
     * email subject
     */
    public Template withSubject(String subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = JsonNullable.of(subject);
        return this;
    }

    /**
     * email subject
     */
    public Template withSubject(JsonNullable<String> subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = subject;
        return this;
    }

    /**
     * the editor markup used to generate the body of the template
     */
    public Template withMarkup(String markup) {
        Utils.checkNotNull(markup, "markup");
        this.markup = Optional.ofNullable(markup);
        return this;
    }

    /**
     * the editor markup used to generate the body of the template
     */
    public Template withMarkup(Optional<String> markup) {
        Utils.checkNotNull(markup, "markup");
        this.markup = markup;
        return this;
    }

    /**
     * the template body before variable interpolation
     */
    public Template withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    /**
     * the template body before variable interpolation
     */
    public Template withBody(Optional<String> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    /**
     * list of variables that are available for use in the template body
     */
    public Template withAvailableVariables(List<String> availableVariables) {
        Utils.checkNotNull(availableVariables, "availableVariables");
        this.availableVariables = Optional.ofNullable(availableVariables);
        return this;
    }

    /**
     * list of variables that are available for use in the template body
     */
    public Template withAvailableVariables(Optional<? extends List<String>> availableVariables) {
        Utils.checkNotNull(availableVariables, "availableVariables");
        this.availableVariables = availableVariables;
        return this;
    }

    /**
     * list of variables that must be contained in the template body
     */
    public Template withRequiredVariables(List<String> requiredVariables) {
        Utils.checkNotNull(requiredVariables, "requiredVariables");
        this.requiredVariables = Optional.ofNullable(requiredVariables);
        return this;
    }

    /**
     * list of variables that must be contained in the template body
     */
    public Template withRequiredVariables(Optional<? extends List<String>> requiredVariables) {
        Utils.checkNotNull(requiredVariables, "requiredVariables");
        this.requiredVariables = requiredVariables;
        return this;
    }

    public Template withFromEmailName(String fromEmailName) {
        Utils.checkNotNull(fromEmailName, "fromEmailName");
        this.fromEmailName = Optional.ofNullable(fromEmailName);
        return this;
    }

    public Template withFromEmailName(Optional<String> fromEmailName) {
        Utils.checkNotNull(fromEmailName, "fromEmailName");
        this.fromEmailName = fromEmailName;
        return this;
    }

    public Template withReplyToEmailName(String replyToEmailName) {
        Utils.checkNotNull(replyToEmailName, "replyToEmailName");
        this.replyToEmailName = Optional.ofNullable(replyToEmailName);
        return this;
    }

    public Template withReplyToEmailName(Optional<String> replyToEmailName) {
        Utils.checkNotNull(replyToEmailName, "replyToEmailName");
        this.replyToEmailName = replyToEmailName;
        return this;
    }

    public Template withDeliveredByClerk(boolean deliveredByClerk) {
        Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
        this.deliveredByClerk = Optional.ofNullable(deliveredByClerk);
        return this;
    }

    public Template withDeliveredByClerk(Optional<Boolean> deliveredByClerk) {
        Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
        this.deliveredByClerk = deliveredByClerk;
        return this;
    }

    public Template withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    public Template withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public Template withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public Template withUpdatedAt(Optional<Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public Template withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public Template withCreatedAt(Optional<Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Template other = (Template) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.instanceId, other.instanceId) &&
            Objects.deepEquals(this.resourceType, other.resourceType) &&
            Objects.deepEquals(this.templateType, other.templateType) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.slug, other.slug) &&
            Objects.deepEquals(this.position, other.position) &&
            Objects.deepEquals(this.canRevert, other.canRevert) &&
            Objects.deepEquals(this.canDelete, other.canDelete) &&
            Objects.deepEquals(this.canToggle, other.canToggle) &&
            Objects.deepEquals(this.subject, other.subject) &&
            Objects.deepEquals(this.markup, other.markup) &&
            Objects.deepEquals(this.body, other.body) &&
            Objects.deepEquals(this.availableVariables, other.availableVariables) &&
            Objects.deepEquals(this.requiredVariables, other.requiredVariables) &&
            Objects.deepEquals(this.fromEmailName, other.fromEmailName) &&
            Objects.deepEquals(this.replyToEmailName, other.replyToEmailName) &&
            Objects.deepEquals(this.deliveredByClerk, other.deliveredByClerk) &&
            Objects.deepEquals(this.enabled, other.enabled) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            object,
            instanceId,
            resourceType,
            templateType,
            name,
            slug,
            position,
            canRevert,
            canDelete,
            canToggle,
            subject,
            markup,
            body,
            availableVariables,
            requiredVariables,
            fromEmailName,
            replyToEmailName,
            deliveredByClerk,
            enabled,
            updatedAt,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Template.class,
                "id", id,
                "object", object,
                "instanceId", instanceId,
                "resourceType", resourceType,
                "templateType", templateType,
                "name", name,
                "slug", slug,
                "position", position,
                "canRevert", canRevert,
                "canDelete", canDelete,
                "canToggle", canToggle,
                "subject", subject,
                "markup", markup,
                "body", body,
                "availableVariables", availableVariables,
                "requiredVariables", requiredVariables,
                "fromEmailName", fromEmailName,
                "replyToEmailName", replyToEmailName,
                "deliveredByClerk", deliveredByClerk,
                "enabled", enabled,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends TemplateObject> object = Optional.empty();
 
        private JsonNullable<String> instanceId = JsonNullable.undefined();
 
        private Optional<String> resourceType = Optional.empty();
 
        private Optional<String> templateType = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> slug = Optional.empty();
 
        private Optional<Long> position = Optional.empty();
 
        private Optional<Boolean> canRevert = Optional.empty();
 
        private Optional<Boolean> canDelete = Optional.empty();
 
        private Optional<Boolean> canToggle = Optional.empty();
 
        private JsonNullable<String> subject = JsonNullable.undefined();
 
        private Optional<String> markup = Optional.empty();
 
        private Optional<String> body = Optional.empty();
 
        private Optional<? extends List<String>> availableVariables = Optional.empty();
 
        private Optional<? extends List<String>> requiredVariables = Optional.empty();
 
        private Optional<String> fromEmailName = Optional.empty();
 
        private Optional<String> replyToEmailName = Optional.empty();
 
        private Optional<Boolean> deliveredByClerk = Optional.empty();
 
        private Optional<Boolean> enabled = Optional.empty();
 
        private Optional<Long> updatedAt = Optional.empty();
 
        private Optional<Long> createdAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(TemplateObject object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(Optional<? extends TemplateObject> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        /**
         * the id of the instance the template belongs to
         */
        public Builder instanceId(String instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = JsonNullable.of(instanceId);
            return this;
        }

        /**
         * the id of the instance the template belongs to
         */
        public Builder instanceId(JsonNullable<String> instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = instanceId;
            return this;
        }

        /**
         * whether this is a system (default) or user overridden) template
         */
        public Builder resourceType(String resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = Optional.ofNullable(resourceType);
            return this;
        }

        /**
         * whether this is a system (default) or user overridden) template
         */
        public Builder resourceType(Optional<String> resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = resourceType;
            return this;
        }

        /**
         * whether this is an email or SMS template
         */
        public Builder templateType(String templateType) {
            Utils.checkNotNull(templateType, "templateType");
            this.templateType = Optional.ofNullable(templateType);
            return this;
        }

        /**
         * whether this is an email or SMS template
         */
        public Builder templateType(Optional<String> templateType) {
            Utils.checkNotNull(templateType, "templateType");
            this.templateType = templateType;
            return this;
        }

        /**
         * user-friendly name of the template
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * user-friendly name of the template
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * machine-friendly name of the template
         */
        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = Optional.ofNullable(slug);
            return this;
        }

        /**
         * machine-friendly name of the template
         */
        public Builder slug(Optional<String> slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        /**
         * position with the listing of templates
         */
        public Builder position(long position) {
            Utils.checkNotNull(position, "position");
            this.position = Optional.ofNullable(position);
            return this;
        }

        /**
         * position with the listing of templates
         */
        public Builder position(Optional<Long> position) {
            Utils.checkNotNull(position, "position");
            this.position = position;
            return this;
        }

        /**
         * whether this template can be reverted to the corresponding system default
         */
        public Builder canRevert(boolean canRevert) {
            Utils.checkNotNull(canRevert, "canRevert");
            this.canRevert = Optional.ofNullable(canRevert);
            return this;
        }

        /**
         * whether this template can be reverted to the corresponding system default
         */
        public Builder canRevert(Optional<Boolean> canRevert) {
            Utils.checkNotNull(canRevert, "canRevert");
            this.canRevert = canRevert;
            return this;
        }

        /**
         * whether this template can be deleted
         */
        public Builder canDelete(boolean canDelete) {
            Utils.checkNotNull(canDelete, "canDelete");
            this.canDelete = Optional.ofNullable(canDelete);
            return this;
        }

        /**
         * whether this template can be deleted
         */
        public Builder canDelete(Optional<Boolean> canDelete) {
            Utils.checkNotNull(canDelete, "canDelete");
            this.canDelete = canDelete;
            return this;
        }

        /**
         * whether this template can be enabled or disabled, true only for notification SMS templates
         */
        public Builder canToggle(boolean canToggle) {
            Utils.checkNotNull(canToggle, "canToggle");
            this.canToggle = Optional.ofNullable(canToggle);
            return this;
        }

        /**
         * whether this template can be enabled or disabled, true only for notification SMS templates
         */
        public Builder canToggle(Optional<Boolean> canToggle) {
            Utils.checkNotNull(canToggle, "canToggle");
            this.canToggle = canToggle;
            return this;
        }

        /**
         * email subject
         */
        public Builder subject(String subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = JsonNullable.of(subject);
            return this;
        }

        /**
         * email subject
         */
        public Builder subject(JsonNullable<String> subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = subject;
            return this;
        }

        /**
         * the editor markup used to generate the body of the template
         */
        public Builder markup(String markup) {
            Utils.checkNotNull(markup, "markup");
            this.markup = Optional.ofNullable(markup);
            return this;
        }

        /**
         * the editor markup used to generate the body of the template
         */
        public Builder markup(Optional<String> markup) {
            Utils.checkNotNull(markup, "markup");
            this.markup = markup;
            return this;
        }

        /**
         * the template body before variable interpolation
         */
        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        /**
         * the template body before variable interpolation
         */
        public Builder body(Optional<String> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        /**
         * list of variables that are available for use in the template body
         */
        public Builder availableVariables(List<String> availableVariables) {
            Utils.checkNotNull(availableVariables, "availableVariables");
            this.availableVariables = Optional.ofNullable(availableVariables);
            return this;
        }

        /**
         * list of variables that are available for use in the template body
         */
        public Builder availableVariables(Optional<? extends List<String>> availableVariables) {
            Utils.checkNotNull(availableVariables, "availableVariables");
            this.availableVariables = availableVariables;
            return this;
        }

        /**
         * list of variables that must be contained in the template body
         */
        public Builder requiredVariables(List<String> requiredVariables) {
            Utils.checkNotNull(requiredVariables, "requiredVariables");
            this.requiredVariables = Optional.ofNullable(requiredVariables);
            return this;
        }

        /**
         * list of variables that must be contained in the template body
         */
        public Builder requiredVariables(Optional<? extends List<String>> requiredVariables) {
            Utils.checkNotNull(requiredVariables, "requiredVariables");
            this.requiredVariables = requiredVariables;
            return this;
        }

        public Builder fromEmailName(String fromEmailName) {
            Utils.checkNotNull(fromEmailName, "fromEmailName");
            this.fromEmailName = Optional.ofNullable(fromEmailName);
            return this;
        }

        public Builder fromEmailName(Optional<String> fromEmailName) {
            Utils.checkNotNull(fromEmailName, "fromEmailName");
            this.fromEmailName = fromEmailName;
            return this;
        }

        public Builder replyToEmailName(String replyToEmailName) {
            Utils.checkNotNull(replyToEmailName, "replyToEmailName");
            this.replyToEmailName = Optional.ofNullable(replyToEmailName);
            return this;
        }

        public Builder replyToEmailName(Optional<String> replyToEmailName) {
            Utils.checkNotNull(replyToEmailName, "replyToEmailName");
            this.replyToEmailName = replyToEmailName;
            return this;
        }

        public Builder deliveredByClerk(boolean deliveredByClerk) {
            Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
            this.deliveredByClerk = Optional.ofNullable(deliveredByClerk);
            return this;
        }

        public Builder deliveredByClerk(Optional<Boolean> deliveredByClerk) {
            Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
            this.deliveredByClerk = deliveredByClerk;
            return this;
        }

        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(Optional<Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(Optional<Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public Template build() {
            return new Template(
                id,
                object,
                instanceId,
                resourceType,
                templateType,
                name,
                slug,
                position,
                canRevert,
                canDelete,
                canToggle,
                subject,
                markup,
                body,
                availableVariables,
                requiredVariables,
                fromEmailName,
                replyToEmailName,
                deliveredByClerk,
                enabled,
                updatedAt,
                createdAt);
        }
    }
}

