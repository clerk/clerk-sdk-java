/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CommercePlan {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private CommercePlanObject object;

    /**
     * Unique identifier for the commerce plan.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The name of the commerce plan.
     */
    @JsonProperty("name")
    private String name;


    @JsonProperty("fee")
    private CommerceMoneyResponse fee;


    @JsonProperty("annual_monthly_fee")
    private CommerceMoneyResponse annualMonthlyFee;


    @JsonProperty("annual_fee")
    private CommerceMoneyResponse annualFee;

    /**
     * The amount in cents for the plan.
     */
    @JsonProperty("amount")
    private long amount;

    /**
     * The formatted amount as a string (e.g., "$49.99").
     */
    @JsonProperty("amount_formatted")
    private String amountFormatted;

    /**
     * The monthly amount in cents when billed annually.
     */
    @JsonProperty("annual_monthly_amount")
    private long annualMonthlyAmount;

    /**
     * The formatted annual monthly amount as a string.
     */
    @JsonProperty("annual_monthly_amount_formatted")
    private String annualMonthlyAmountFormatted;

    /**
     * The total annual amount in cents.
     */
    @JsonProperty("annual_amount")
    private long annualAmount;

    /**
     * The formatted annual amount as a string.
     */
    @JsonProperty("annual_amount_formatted")
    private String annualAmountFormatted;

    /**
     * The currency symbol (e.g., "$").
     */
    @JsonProperty("currency_symbol")
    private String currencySymbol;

    /**
     * The currency code (e.g., "USD").
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The description of the commerce plan.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The ID of the product this plan belongs to.
     */
    @JsonProperty("product_id")
    private String productId;

    /**
     * Whether this is the default plan.
     */
    @JsonProperty("is_default")
    private boolean isDefault;

    /**
     * Whether this is a recurring plan.
     */
    @JsonProperty("is_recurring")
    private boolean isRecurring;

    /**
     * Whether this plan is publicly visible.
     */
    @JsonProperty("publicly_visible")
    private boolean publiclyVisible;

    /**
     * Whether this plan has a base fee.
     */
    @JsonProperty("has_base_fee")
    private boolean hasBaseFee;

    /**
     * The types of payers that can use this plan.
     */
    @JsonProperty("payer_type")
    private List<String> payerType;

    /**
     * The payer type this plan is designed for.
     */
    @JsonProperty("for_payer_type")
    private String forPayerType;

    /**
     * The URL-friendly slug for the plan.
     */
    @JsonProperty("slug")
    private String slug;

    /**
     * The URL of the plan's avatar image.
     */
    @JsonProperty("avatar_url")
    private String avatarUrl;

    /**
     * The billing period for the plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period")
    private Optional<String> period;

    /**
     * The billing interval.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    private Optional<Long> interval;

    /**
     * The features included in this plan.
     */
    @JsonProperty("features")
    private List<FeatureResponse> features;

    /**
     * Whether free trial is enabled for this plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_trial_enabled")
    private Optional<Boolean> freeTrialEnabled;

    /**
     * Number of free trial days for this plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_trial_days")
    private JsonNullable<Long> freeTrialDays;

    @JsonCreator
    public CommercePlan(
            @JsonProperty("object") CommercePlanObject object,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("fee") CommerceMoneyResponse fee,
            @JsonProperty("annual_monthly_fee") CommerceMoneyResponse annualMonthlyFee,
            @JsonProperty("annual_fee") CommerceMoneyResponse annualFee,
            @JsonProperty("amount") long amount,
            @JsonProperty("amount_formatted") String amountFormatted,
            @JsonProperty("annual_monthly_amount") long annualMonthlyAmount,
            @JsonProperty("annual_monthly_amount_formatted") String annualMonthlyAmountFormatted,
            @JsonProperty("annual_amount") long annualAmount,
            @JsonProperty("annual_amount_formatted") String annualAmountFormatted,
            @JsonProperty("currency_symbol") String currencySymbol,
            @JsonProperty("currency") String currency,
            @JsonProperty("description") String description,
            @JsonProperty("product_id") String productId,
            @JsonProperty("is_default") boolean isDefault,
            @JsonProperty("is_recurring") boolean isRecurring,
            @JsonProperty("publicly_visible") boolean publiclyVisible,
            @JsonProperty("has_base_fee") boolean hasBaseFee,
            @JsonProperty("payer_type") List<String> payerType,
            @JsonProperty("for_payer_type") String forPayerType,
            @JsonProperty("slug") String slug,
            @JsonProperty("avatar_url") String avatarUrl,
            @JsonProperty("period") Optional<String> period,
            @JsonProperty("interval") Optional<Long> interval,
            @JsonProperty("features") List<FeatureResponse> features,
            @JsonProperty("free_trial_enabled") Optional<Boolean> freeTrialEnabled,
            @JsonProperty("free_trial_days") JsonNullable<Long> freeTrialDays) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(fee, "fee");
        Utils.checkNotNull(annualMonthlyFee, "annualMonthlyFee");
        Utils.checkNotNull(annualFee, "annualFee");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(amountFormatted, "amountFormatted");
        Utils.checkNotNull(annualMonthlyAmount, "annualMonthlyAmount");
        Utils.checkNotNull(annualMonthlyAmountFormatted, "annualMonthlyAmountFormatted");
        Utils.checkNotNull(annualAmount, "annualAmount");
        Utils.checkNotNull(annualAmountFormatted, "annualAmountFormatted");
        Utils.checkNotNull(currencySymbol, "currencySymbol");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(productId, "productId");
        Utils.checkNotNull(isDefault, "isDefault");
        Utils.checkNotNull(isRecurring, "isRecurring");
        Utils.checkNotNull(publiclyVisible, "publiclyVisible");
        Utils.checkNotNull(hasBaseFee, "hasBaseFee");
        Utils.checkNotNull(payerType, "payerType");
        Utils.checkNotNull(forPayerType, "forPayerType");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        Utils.checkNotNull(period, "period");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(features, "features");
        Utils.checkNotNull(freeTrialEnabled, "freeTrialEnabled");
        Utils.checkNotNull(freeTrialDays, "freeTrialDays");
        this.object = object;
        this.id = id;
        this.name = name;
        this.fee = fee;
        this.annualMonthlyFee = annualMonthlyFee;
        this.annualFee = annualFee;
        this.amount = amount;
        this.amountFormatted = amountFormatted;
        this.annualMonthlyAmount = annualMonthlyAmount;
        this.annualMonthlyAmountFormatted = annualMonthlyAmountFormatted;
        this.annualAmount = annualAmount;
        this.annualAmountFormatted = annualAmountFormatted;
        this.currencySymbol = currencySymbol;
        this.currency = currency;
        this.description = description;
        this.productId = productId;
        this.isDefault = isDefault;
        this.isRecurring = isRecurring;
        this.publiclyVisible = publiclyVisible;
        this.hasBaseFee = hasBaseFee;
        this.payerType = payerType;
        this.forPayerType = forPayerType;
        this.slug = slug;
        this.avatarUrl = avatarUrl;
        this.period = period;
        this.interval = interval;
        this.features = features;
        this.freeTrialEnabled = freeTrialEnabled;
        this.freeTrialDays = freeTrialDays;
    }
    
    public CommercePlan(
            CommercePlanObject object,
            String id,
            String name,
            CommerceMoneyResponse fee,
            CommerceMoneyResponse annualMonthlyFee,
            CommerceMoneyResponse annualFee,
            long amount,
            String amountFormatted,
            long annualMonthlyAmount,
            String annualMonthlyAmountFormatted,
            long annualAmount,
            String annualAmountFormatted,
            String currencySymbol,
            String currency,
            String description,
            String productId,
            boolean isDefault,
            boolean isRecurring,
            boolean publiclyVisible,
            boolean hasBaseFee,
            List<String> payerType,
            String forPayerType,
            String slug,
            String avatarUrl,
            List<FeatureResponse> features) {
        this(object, id, name,
            fee, annualMonthlyFee, annualFee,
            amount, amountFormatted, annualMonthlyAmount,
            annualMonthlyAmountFormatted, annualAmount, annualAmountFormatted,
            currencySymbol, currency, description,
            productId, isDefault, isRecurring,
            publiclyVisible, hasBaseFee, payerType,
            forPayerType, slug, avatarUrl,
            Optional.empty(), Optional.empty(), features,
            Optional.empty(), JsonNullable.undefined());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public CommercePlanObject object() {
        return object;
    }

    /**
     * Unique identifier for the commerce plan.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The name of the commerce plan.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public CommerceMoneyResponse fee() {
        return fee;
    }

    @JsonIgnore
    public CommerceMoneyResponse annualMonthlyFee() {
        return annualMonthlyFee;
    }

    @JsonIgnore
    public CommerceMoneyResponse annualFee() {
        return annualFee;
    }

    /**
     * The amount in cents for the plan.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    /**
     * The formatted amount as a string (e.g., "$49.99").
     */
    @JsonIgnore
    public String amountFormatted() {
        return amountFormatted;
    }

    /**
     * The monthly amount in cents when billed annually.
     */
    @JsonIgnore
    public long annualMonthlyAmount() {
        return annualMonthlyAmount;
    }

    /**
     * The formatted annual monthly amount as a string.
     */
    @JsonIgnore
    public String annualMonthlyAmountFormatted() {
        return annualMonthlyAmountFormatted;
    }

    /**
     * The total annual amount in cents.
     */
    @JsonIgnore
    public long annualAmount() {
        return annualAmount;
    }

    /**
     * The formatted annual amount as a string.
     */
    @JsonIgnore
    public String annualAmountFormatted() {
        return annualAmountFormatted;
    }

    /**
     * The currency symbol (e.g., "$").
     */
    @JsonIgnore
    public String currencySymbol() {
        return currencySymbol;
    }

    /**
     * The currency code (e.g., "USD").
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The description of the commerce plan.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The ID of the product this plan belongs to.
     */
    @JsonIgnore
    public String productId() {
        return productId;
    }

    /**
     * Whether this is the default plan.
     */
    @JsonIgnore
    public boolean isDefault() {
        return isDefault;
    }

    /**
     * Whether this is a recurring plan.
     */
    @JsonIgnore
    public boolean isRecurring() {
        return isRecurring;
    }

    /**
     * Whether this plan is publicly visible.
     */
    @JsonIgnore
    public boolean publiclyVisible() {
        return publiclyVisible;
    }

    /**
     * Whether this plan has a base fee.
     */
    @JsonIgnore
    public boolean hasBaseFee() {
        return hasBaseFee;
    }

    /**
     * The types of payers that can use this plan.
     */
    @JsonIgnore
    public List<String> payerType() {
        return payerType;
    }

    /**
     * The payer type this plan is designed for.
     */
    @JsonIgnore
    public String forPayerType() {
        return forPayerType;
    }

    /**
     * The URL-friendly slug for the plan.
     */
    @JsonIgnore
    public String slug() {
        return slug;
    }

    /**
     * The URL of the plan's avatar image.
     */
    @JsonIgnore
    public String avatarUrl() {
        return avatarUrl;
    }

    /**
     * The billing period for the plan.
     */
    @JsonIgnore
    public Optional<String> period() {
        return period;
    }

    /**
     * The billing interval.
     */
    @JsonIgnore
    public Optional<Long> interval() {
        return interval;
    }

    /**
     * The features included in this plan.
     */
    @JsonIgnore
    public List<FeatureResponse> features() {
        return features;
    }

    /**
     * Whether free trial is enabled for this plan.
     */
    @JsonIgnore
    public Optional<Boolean> freeTrialEnabled() {
        return freeTrialEnabled;
    }

    /**
     * Number of free trial days for this plan.
     */
    @JsonIgnore
    public JsonNullable<Long> freeTrialDays() {
        return freeTrialDays;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public CommercePlan withObject(CommercePlanObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * Unique identifier for the commerce plan.
     */
    public CommercePlan withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the commerce plan.
     */
    public CommercePlan withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CommercePlan withFee(CommerceMoneyResponse fee) {
        Utils.checkNotNull(fee, "fee");
        this.fee = fee;
        return this;
    }

    public CommercePlan withAnnualMonthlyFee(CommerceMoneyResponse annualMonthlyFee) {
        Utils.checkNotNull(annualMonthlyFee, "annualMonthlyFee");
        this.annualMonthlyFee = annualMonthlyFee;
        return this;
    }

    public CommercePlan withAnnualFee(CommerceMoneyResponse annualFee) {
        Utils.checkNotNull(annualFee, "annualFee");
        this.annualFee = annualFee;
        return this;
    }

    /**
     * The amount in cents for the plan.
     */
    public CommercePlan withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The formatted amount as a string (e.g., "$49.99").
     */
    public CommercePlan withAmountFormatted(String amountFormatted) {
        Utils.checkNotNull(amountFormatted, "amountFormatted");
        this.amountFormatted = amountFormatted;
        return this;
    }

    /**
     * The monthly amount in cents when billed annually.
     */
    public CommercePlan withAnnualMonthlyAmount(long annualMonthlyAmount) {
        Utils.checkNotNull(annualMonthlyAmount, "annualMonthlyAmount");
        this.annualMonthlyAmount = annualMonthlyAmount;
        return this;
    }

    /**
     * The formatted annual monthly amount as a string.
     */
    public CommercePlan withAnnualMonthlyAmountFormatted(String annualMonthlyAmountFormatted) {
        Utils.checkNotNull(annualMonthlyAmountFormatted, "annualMonthlyAmountFormatted");
        this.annualMonthlyAmountFormatted = annualMonthlyAmountFormatted;
        return this;
    }

    /**
     * The total annual amount in cents.
     */
    public CommercePlan withAnnualAmount(long annualAmount) {
        Utils.checkNotNull(annualAmount, "annualAmount");
        this.annualAmount = annualAmount;
        return this;
    }

    /**
     * The formatted annual amount as a string.
     */
    public CommercePlan withAnnualAmountFormatted(String annualAmountFormatted) {
        Utils.checkNotNull(annualAmountFormatted, "annualAmountFormatted");
        this.annualAmountFormatted = annualAmountFormatted;
        return this;
    }

    /**
     * The currency symbol (e.g., "$").
     */
    public CommercePlan withCurrencySymbol(String currencySymbol) {
        Utils.checkNotNull(currencySymbol, "currencySymbol");
        this.currencySymbol = currencySymbol;
        return this;
    }

    /**
     * The currency code (e.g., "USD").
     */
    public CommercePlan withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The description of the commerce plan.
     */
    public CommercePlan withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The ID of the product this plan belongs to.
     */
    public CommercePlan withProductId(String productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = productId;
        return this;
    }

    /**
     * Whether this is the default plan.
     */
    public CommercePlan withIsDefault(boolean isDefault) {
        Utils.checkNotNull(isDefault, "isDefault");
        this.isDefault = isDefault;
        return this;
    }

    /**
     * Whether this is a recurring plan.
     */
    public CommercePlan withIsRecurring(boolean isRecurring) {
        Utils.checkNotNull(isRecurring, "isRecurring");
        this.isRecurring = isRecurring;
        return this;
    }

    /**
     * Whether this plan is publicly visible.
     */
    public CommercePlan withPubliclyVisible(boolean publiclyVisible) {
        Utils.checkNotNull(publiclyVisible, "publiclyVisible");
        this.publiclyVisible = publiclyVisible;
        return this;
    }

    /**
     * Whether this plan has a base fee.
     */
    public CommercePlan withHasBaseFee(boolean hasBaseFee) {
        Utils.checkNotNull(hasBaseFee, "hasBaseFee");
        this.hasBaseFee = hasBaseFee;
        return this;
    }

    /**
     * The types of payers that can use this plan.
     */
    public CommercePlan withPayerType(List<String> payerType) {
        Utils.checkNotNull(payerType, "payerType");
        this.payerType = payerType;
        return this;
    }

    /**
     * The payer type this plan is designed for.
     */
    public CommercePlan withForPayerType(String forPayerType) {
        Utils.checkNotNull(forPayerType, "forPayerType");
        this.forPayerType = forPayerType;
        return this;
    }

    /**
     * The URL-friendly slug for the plan.
     */
    public CommercePlan withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * The URL of the plan's avatar image.
     */
    public CommercePlan withAvatarUrl(String avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = avatarUrl;
        return this;
    }

    /**
     * The billing period for the plan.
     */
    public CommercePlan withPeriod(String period) {
        Utils.checkNotNull(period, "period");
        this.period = Optional.ofNullable(period);
        return this;
    }


    /**
     * The billing period for the plan.
     */
    public CommercePlan withPeriod(Optional<String> period) {
        Utils.checkNotNull(period, "period");
        this.period = period;
        return this;
    }

    /**
     * The billing interval.
     */
    public CommercePlan withInterval(long interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = Optional.ofNullable(interval);
        return this;
    }


    /**
     * The billing interval.
     */
    public CommercePlan withInterval(Optional<Long> interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * The features included in this plan.
     */
    public CommercePlan withFeatures(List<FeatureResponse> features) {
        Utils.checkNotNull(features, "features");
        this.features = features;
        return this;
    }

    /**
     * Whether free trial is enabled for this plan.
     */
    public CommercePlan withFreeTrialEnabled(boolean freeTrialEnabled) {
        Utils.checkNotNull(freeTrialEnabled, "freeTrialEnabled");
        this.freeTrialEnabled = Optional.ofNullable(freeTrialEnabled);
        return this;
    }


    /**
     * Whether free trial is enabled for this plan.
     */
    public CommercePlan withFreeTrialEnabled(Optional<Boolean> freeTrialEnabled) {
        Utils.checkNotNull(freeTrialEnabled, "freeTrialEnabled");
        this.freeTrialEnabled = freeTrialEnabled;
        return this;
    }

    /**
     * Number of free trial days for this plan.
     */
    public CommercePlan withFreeTrialDays(long freeTrialDays) {
        Utils.checkNotNull(freeTrialDays, "freeTrialDays");
        this.freeTrialDays = JsonNullable.of(freeTrialDays);
        return this;
    }

    /**
     * Number of free trial days for this plan.
     */
    public CommercePlan withFreeTrialDays(JsonNullable<Long> freeTrialDays) {
        Utils.checkNotNull(freeTrialDays, "freeTrialDays");
        this.freeTrialDays = freeTrialDays;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommercePlan other = (CommercePlan) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.fee, other.fee) &&
            Utils.enhancedDeepEquals(this.annualMonthlyFee, other.annualMonthlyFee) &&
            Utils.enhancedDeepEquals(this.annualFee, other.annualFee) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.amountFormatted, other.amountFormatted) &&
            Utils.enhancedDeepEquals(this.annualMonthlyAmount, other.annualMonthlyAmount) &&
            Utils.enhancedDeepEquals(this.annualMonthlyAmountFormatted, other.annualMonthlyAmountFormatted) &&
            Utils.enhancedDeepEquals(this.annualAmount, other.annualAmount) &&
            Utils.enhancedDeepEquals(this.annualAmountFormatted, other.annualAmountFormatted) &&
            Utils.enhancedDeepEquals(this.currencySymbol, other.currencySymbol) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.productId, other.productId) &&
            Utils.enhancedDeepEquals(this.isDefault, other.isDefault) &&
            Utils.enhancedDeepEquals(this.isRecurring, other.isRecurring) &&
            Utils.enhancedDeepEquals(this.publiclyVisible, other.publiclyVisible) &&
            Utils.enhancedDeepEquals(this.hasBaseFee, other.hasBaseFee) &&
            Utils.enhancedDeepEquals(this.payerType, other.payerType) &&
            Utils.enhancedDeepEquals(this.forPayerType, other.forPayerType) &&
            Utils.enhancedDeepEquals(this.slug, other.slug) &&
            Utils.enhancedDeepEquals(this.avatarUrl, other.avatarUrl) &&
            Utils.enhancedDeepEquals(this.period, other.period) &&
            Utils.enhancedDeepEquals(this.interval, other.interval) &&
            Utils.enhancedDeepEquals(this.features, other.features) &&
            Utils.enhancedDeepEquals(this.freeTrialEnabled, other.freeTrialEnabled) &&
            Utils.enhancedDeepEquals(this.freeTrialDays, other.freeTrialDays);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, name,
            fee, annualMonthlyFee, annualFee,
            amount, amountFormatted, annualMonthlyAmount,
            annualMonthlyAmountFormatted, annualAmount, annualAmountFormatted,
            currencySymbol, currency, description,
            productId, isDefault, isRecurring,
            publiclyVisible, hasBaseFee, payerType,
            forPayerType, slug, avatarUrl,
            period, interval, features,
            freeTrialEnabled, freeTrialDays);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommercePlan.class,
                "object", object,
                "id", id,
                "name", name,
                "fee", fee,
                "annualMonthlyFee", annualMonthlyFee,
                "annualFee", annualFee,
                "amount", amount,
                "amountFormatted", amountFormatted,
                "annualMonthlyAmount", annualMonthlyAmount,
                "annualMonthlyAmountFormatted", annualMonthlyAmountFormatted,
                "annualAmount", annualAmount,
                "annualAmountFormatted", annualAmountFormatted,
                "currencySymbol", currencySymbol,
                "currency", currency,
                "description", description,
                "productId", productId,
                "isDefault", isDefault,
                "isRecurring", isRecurring,
                "publiclyVisible", publiclyVisible,
                "hasBaseFee", hasBaseFee,
                "payerType", payerType,
                "forPayerType", forPayerType,
                "slug", slug,
                "avatarUrl", avatarUrl,
                "period", period,
                "interval", interval,
                "features", features,
                "freeTrialEnabled", freeTrialEnabled,
                "freeTrialDays", freeTrialDays);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CommercePlanObject object;

        private String id;

        private String name;

        private CommerceMoneyResponse fee;

        private CommerceMoneyResponse annualMonthlyFee;

        private CommerceMoneyResponse annualFee;

        private Long amount;

        private String amountFormatted;

        private Long annualMonthlyAmount;

        private String annualMonthlyAmountFormatted;

        private Long annualAmount;

        private String annualAmountFormatted;

        private String currencySymbol;

        private String currency;

        private String description;

        private String productId;

        private Boolean isDefault;

        private Boolean isRecurring;

        private Boolean publiclyVisible;

        private Boolean hasBaseFee;

        private List<String> payerType;

        private String forPayerType;

        private String slug;

        private String avatarUrl;

        private Optional<String> period = Optional.empty();

        private Optional<Long> interval = Optional.empty();

        private List<FeatureResponse> features;

        private Optional<Boolean> freeTrialEnabled = Optional.empty();

        private JsonNullable<Long> freeTrialDays = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(CommercePlanObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * Unique identifier for the commerce plan.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The name of the commerce plan.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder fee(CommerceMoneyResponse fee) {
            Utils.checkNotNull(fee, "fee");
            this.fee = fee;
            return this;
        }


        public Builder annualMonthlyFee(CommerceMoneyResponse annualMonthlyFee) {
            Utils.checkNotNull(annualMonthlyFee, "annualMonthlyFee");
            this.annualMonthlyFee = annualMonthlyFee;
            return this;
        }


        public Builder annualFee(CommerceMoneyResponse annualFee) {
            Utils.checkNotNull(annualFee, "annualFee");
            this.annualFee = annualFee;
            return this;
        }


        /**
         * The amount in cents for the plan.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The formatted amount as a string (e.g., "$49.99").
         */
        public Builder amountFormatted(String amountFormatted) {
            Utils.checkNotNull(amountFormatted, "amountFormatted");
            this.amountFormatted = amountFormatted;
            return this;
        }


        /**
         * The monthly amount in cents when billed annually.
         */
        public Builder annualMonthlyAmount(long annualMonthlyAmount) {
            Utils.checkNotNull(annualMonthlyAmount, "annualMonthlyAmount");
            this.annualMonthlyAmount = annualMonthlyAmount;
            return this;
        }


        /**
         * The formatted annual monthly amount as a string.
         */
        public Builder annualMonthlyAmountFormatted(String annualMonthlyAmountFormatted) {
            Utils.checkNotNull(annualMonthlyAmountFormatted, "annualMonthlyAmountFormatted");
            this.annualMonthlyAmountFormatted = annualMonthlyAmountFormatted;
            return this;
        }


        /**
         * The total annual amount in cents.
         */
        public Builder annualAmount(long annualAmount) {
            Utils.checkNotNull(annualAmount, "annualAmount");
            this.annualAmount = annualAmount;
            return this;
        }


        /**
         * The formatted annual amount as a string.
         */
        public Builder annualAmountFormatted(String annualAmountFormatted) {
            Utils.checkNotNull(annualAmountFormatted, "annualAmountFormatted");
            this.annualAmountFormatted = annualAmountFormatted;
            return this;
        }


        /**
         * The currency symbol (e.g., "$").
         */
        public Builder currencySymbol(String currencySymbol) {
            Utils.checkNotNull(currencySymbol, "currencySymbol");
            this.currencySymbol = currencySymbol;
            return this;
        }


        /**
         * The currency code (e.g., "USD").
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The description of the commerce plan.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The ID of the product this plan belongs to.
         */
        public Builder productId(String productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = productId;
            return this;
        }


        /**
         * Whether this is the default plan.
         */
        public Builder isDefault(boolean isDefault) {
            Utils.checkNotNull(isDefault, "isDefault");
            this.isDefault = isDefault;
            return this;
        }


        /**
         * Whether this is a recurring plan.
         */
        public Builder isRecurring(boolean isRecurring) {
            Utils.checkNotNull(isRecurring, "isRecurring");
            this.isRecurring = isRecurring;
            return this;
        }


        /**
         * Whether this plan is publicly visible.
         */
        public Builder publiclyVisible(boolean publiclyVisible) {
            Utils.checkNotNull(publiclyVisible, "publiclyVisible");
            this.publiclyVisible = publiclyVisible;
            return this;
        }


        /**
         * Whether this plan has a base fee.
         */
        public Builder hasBaseFee(boolean hasBaseFee) {
            Utils.checkNotNull(hasBaseFee, "hasBaseFee");
            this.hasBaseFee = hasBaseFee;
            return this;
        }


        /**
         * The types of payers that can use this plan.
         */
        public Builder payerType(List<String> payerType) {
            Utils.checkNotNull(payerType, "payerType");
            this.payerType = payerType;
            return this;
        }


        /**
         * The payer type this plan is designed for.
         */
        public Builder forPayerType(String forPayerType) {
            Utils.checkNotNull(forPayerType, "forPayerType");
            this.forPayerType = forPayerType;
            return this;
        }


        /**
         * The URL-friendly slug for the plan.
         */
        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }


        /**
         * The URL of the plan's avatar image.
         */
        public Builder avatarUrl(String avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = avatarUrl;
            return this;
        }


        /**
         * The billing period for the plan.
         */
        public Builder period(String period) {
            Utils.checkNotNull(period, "period");
            this.period = Optional.ofNullable(period);
            return this;
        }

        /**
         * The billing period for the plan.
         */
        public Builder period(Optional<String> period) {
            Utils.checkNotNull(period, "period");
            this.period = period;
            return this;
        }


        /**
         * The billing interval.
         */
        public Builder interval(long interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = Optional.ofNullable(interval);
            return this;
        }

        /**
         * The billing interval.
         */
        public Builder interval(Optional<Long> interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }


        /**
         * The features included in this plan.
         */
        public Builder features(List<FeatureResponse> features) {
            Utils.checkNotNull(features, "features");
            this.features = features;
            return this;
        }


        /**
         * Whether free trial is enabled for this plan.
         */
        public Builder freeTrialEnabled(boolean freeTrialEnabled) {
            Utils.checkNotNull(freeTrialEnabled, "freeTrialEnabled");
            this.freeTrialEnabled = Optional.ofNullable(freeTrialEnabled);
            return this;
        }

        /**
         * Whether free trial is enabled for this plan.
         */
        public Builder freeTrialEnabled(Optional<Boolean> freeTrialEnabled) {
            Utils.checkNotNull(freeTrialEnabled, "freeTrialEnabled");
            this.freeTrialEnabled = freeTrialEnabled;
            return this;
        }


        /**
         * Number of free trial days for this plan.
         */
        public Builder freeTrialDays(long freeTrialDays) {
            Utils.checkNotNull(freeTrialDays, "freeTrialDays");
            this.freeTrialDays = JsonNullable.of(freeTrialDays);
            return this;
        }

        /**
         * Number of free trial days for this plan.
         */
        public Builder freeTrialDays(JsonNullable<Long> freeTrialDays) {
            Utils.checkNotNull(freeTrialDays, "freeTrialDays");
            this.freeTrialDays = freeTrialDays;
            return this;
        }

        public CommercePlan build() {

            return new CommercePlan(
                object, id, name,
                fee, annualMonthlyFee, annualFee,
                amount, amountFormatted, annualMonthlyAmount,
                annualMonthlyAmountFormatted, annualAmount, annualAmountFormatted,
                currencySymbol, currency, description,
                productId, isDefault, isRecurring,
                publiclyVisible, hasBaseFee, payerType,
                forPayerType, slug, avatarUrl,
                period, interval, features,
                freeTrialEnabled, freeTrialDays);
        }

    }
}
