/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * OrganizationInvitation - An organization invitation
 */

public class OrganizationInvitation {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends OrganizationInvitationObject> object;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    private Optional<String> emailAddress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    private Optional<String> role;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_name")
    private Optional<String> roleName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_id")
    private Optional<String> organizationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends OrganizationInvitationPublicMetadata> publicMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends OrganizationInvitationPrivateMetadata> privateMetadata;

    /**
     * Unix timestamp of creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<Long> createdAt;

    /**
     * Unix timestamp of last update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<Long> updatedAt;

    @JsonCreator
    public OrganizationInvitation(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("object") Optional<? extends OrganizationInvitationObject> object,
            @JsonProperty("email_address") Optional<String> emailAddress,
            @JsonProperty("role") Optional<String> role,
            @JsonProperty("role_name") Optional<String> roleName,
            @JsonProperty("organization_id") Optional<String> organizationId,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("public_metadata") Optional<? extends OrganizationInvitationPublicMetadata> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends OrganizationInvitationPrivateMetadata> privateMetadata,
            @JsonProperty("created_at") Optional<Long> createdAt,
            @JsonProperty("updated_at") Optional<Long> updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(roleName, "roleName");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.object = object;
        this.emailAddress = emailAddress;
        this.role = role;
        this.roleName = roleName;
        this.organizationId = organizationId;
        this.status = status;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public OrganizationInvitation() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrganizationInvitationObject> object() {
        return (Optional<OrganizationInvitationObject>) object;
    }

    @JsonIgnore
    public Optional<String> emailAddress() {
        return emailAddress;
    }

    @JsonIgnore
    public Optional<String> role() {
        return role;
    }

    @JsonIgnore
    public Optional<String> roleName() {
        return roleName;
    }

    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrganizationInvitationPublicMetadata> publicMetadata() {
        return (Optional<OrganizationInvitationPublicMetadata>) publicMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrganizationInvitationPrivateMetadata> privateMetadata() {
        return (Optional<OrganizationInvitationPrivateMetadata>) privateMetadata;
    }

    /**
     * Unix timestamp of creation.
     */
    @JsonIgnore
    public Optional<Long> createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp of last update.
     */
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OrganizationInvitation withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public OrganizationInvitation withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public OrganizationInvitation withObject(OrganizationInvitationObject object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public OrganizationInvitation withObject(Optional<? extends OrganizationInvitationObject> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public OrganizationInvitation withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }

    public OrganizationInvitation withEmailAddress(Optional<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    public OrganizationInvitation withRole(String role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    public OrganizationInvitation withRole(Optional<String> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    public OrganizationInvitation withRoleName(String roleName) {
        Utils.checkNotNull(roleName, "roleName");
        this.roleName = Optional.ofNullable(roleName);
        return this;
    }

    public OrganizationInvitation withRoleName(Optional<String> roleName) {
        Utils.checkNotNull(roleName, "roleName");
        this.roleName = roleName;
        return this;
    }

    public OrganizationInvitation withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }

    public OrganizationInvitation withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public OrganizationInvitation withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public OrganizationInvitation withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public OrganizationInvitation withPublicMetadata(OrganizationInvitationPublicMetadata publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    public OrganizationInvitation withPublicMetadata(Optional<? extends OrganizationInvitationPublicMetadata> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public OrganizationInvitation withPrivateMetadata(OrganizationInvitationPrivateMetadata privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }

    public OrganizationInvitation withPrivateMetadata(Optional<? extends OrganizationInvitationPrivateMetadata> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public OrganizationInvitation withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Unix timestamp of creation.
     */
    public OrganizationInvitation withCreatedAt(Optional<Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public OrganizationInvitation withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Unix timestamp of last update.
     */
    public OrganizationInvitation withUpdatedAt(Optional<Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganizationInvitation other = (OrganizationInvitation) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.role, other.role) &&
            Objects.deepEquals(this.roleName, other.roleName) &&
            Objects.deepEquals(this.organizationId, other.organizationId) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            Objects.deepEquals(this.privateMetadata, other.privateMetadata) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            object,
            emailAddress,
            role,
            roleName,
            organizationId,
            status,
            publicMetadata,
            privateMetadata,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrganizationInvitation.class,
                "id", id,
                "object", object,
                "emailAddress", emailAddress,
                "role", role,
                "roleName", roleName,
                "organizationId", organizationId,
                "status", status,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends OrganizationInvitationObject> object = Optional.empty();
 
        private Optional<String> emailAddress = Optional.empty();
 
        private Optional<String> role = Optional.empty();
 
        private Optional<String> roleName = Optional.empty();
 
        private Optional<String> organizationId = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<? extends OrganizationInvitationPublicMetadata> publicMetadata = Optional.empty();
 
        private Optional<? extends OrganizationInvitationPrivateMetadata> privateMetadata = Optional.empty();
 
        private Optional<Long> createdAt = Optional.empty();
 
        private Optional<Long> updatedAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(OrganizationInvitationObject object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(Optional<? extends OrganizationInvitationObject> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        public Builder emailAddress(Optional<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder role(String role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Builder role(Optional<String> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        public Builder roleName(String roleName) {
            Utils.checkNotNull(roleName, "roleName");
            this.roleName = Optional.ofNullable(roleName);
            return this;
        }

        public Builder roleName(Optional<String> roleName) {
            Utils.checkNotNull(roleName, "roleName");
            this.roleName = roleName;
            return this;
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder publicMetadata(OrganizationInvitationPublicMetadata publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        public Builder publicMetadata(Optional<? extends OrganizationInvitationPublicMetadata> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        public Builder privateMetadata(OrganizationInvitationPrivateMetadata privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        public Builder privateMetadata(Optional<? extends OrganizationInvitationPrivateMetadata> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }

        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Unix timestamp of creation.
         */
        public Builder createdAt(Optional<Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Unix timestamp of last update.
         */
        public Builder updatedAt(Optional<Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public OrganizationInvitation build() {
            return new OrganizationInvitation(
                id,
                object,
                emailAddress,
                role,
                roleName,
                organizationId,
                status,
                publicMetadata,
                privateMetadata,
                createdAt,
                updatedAt);
        }
    }
}

