/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PaymentSource
 * 
 * <p>The payment source associated with this subscription.
 */
public class PaymentSource {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonProperty("object")
    private CommerceSubscriptionItemPaymentSourceObject object;

    /**
     * Unique identifier for the payment source.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Unique identifier for the payer.
     */
    @JsonProperty("payer_id")
    private String payerId;

    /**
     * The payment method type.
     */
    @JsonProperty("payment_method")
    private PaymentMethod paymentMethod;

    /**
     * Whether this is the default payment source for the payer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_default")
    private JsonNullable<Boolean> isDefault;

    /**
     * The payment gateway.
     */
    @JsonProperty("gateway")
    private String gateway;

    /**
     * External ID in the payment gateway.
     */
    @JsonProperty("gateway_external_id")
    private String gatewayExternalId;

    /**
     * External account ID in the payment gateway.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gateway_external_account_id")
    private JsonNullable<String> gatewayExternalAccountId;

    /**
     * Last 4 digits of the card (for card payment sources).
     */
    @JsonProperty("last4")
    private String last4;

    /**
     * Status of the payment source.
     */
    @JsonProperty("status")
    private CommerceSubscriptionItemPaymentSourceStatus status;

    /**
     * Type of wallet (if applicable).
     */
    @JsonProperty("wallet_type")
    private String walletType;

    /**
     * Type of card (if applicable).
     */
    @JsonProperty("card_type")
    private String cardType;

    /**
     * Card expiration year (for card payment sources).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiry_year")
    private Optional<Long> expiryYear;

    /**
     * Card expiration month (for card payment sources).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiry_month")
    private Optional<Long> expiryMonth;

    /**
     * Unix timestamp (in milliseconds) when the payment source was created.
     */
    @JsonProperty("created_at")
    private long createdAt;

    /**
     * Unix timestamp (in milliseconds) when the payment source was last updated.
     */
    @JsonProperty("updated_at")
    private long updatedAt;

    /**
     * Whether this payment source can be removed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_removable")
    private JsonNullable<Boolean> isRemovable;

    @JsonCreator
    public PaymentSource(
            @JsonProperty("object") CommerceSubscriptionItemPaymentSourceObject object,
            @JsonProperty("id") String id,
            @JsonProperty("payer_id") String payerId,
            @JsonProperty("payment_method") PaymentMethod paymentMethod,
            @JsonProperty("is_default") JsonNullable<Boolean> isDefault,
            @JsonProperty("gateway") String gateway,
            @JsonProperty("gateway_external_id") String gatewayExternalId,
            @JsonProperty("gateway_external_account_id") JsonNullable<String> gatewayExternalAccountId,
            @JsonProperty("last4") String last4,
            @JsonProperty("status") CommerceSubscriptionItemPaymentSourceStatus status,
            @JsonProperty("wallet_type") String walletType,
            @JsonProperty("card_type") String cardType,
            @JsonProperty("expiry_year") Optional<Long> expiryYear,
            @JsonProperty("expiry_month") Optional<Long> expiryMonth,
            @JsonProperty("created_at") long createdAt,
            @JsonProperty("updated_at") long updatedAt,
            @JsonProperty("is_removable") JsonNullable<Boolean> isRemovable) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(payerId, "payerId");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(isDefault, "isDefault");
        Utils.checkNotNull(gateway, "gateway");
        Utils.checkNotNull(gatewayExternalId, "gatewayExternalId");
        Utils.checkNotNull(gatewayExternalAccountId, "gatewayExternalAccountId");
        Utils.checkNotNull(last4, "last4");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(walletType, "walletType");
        Utils.checkNotNull(cardType, "cardType");
        Utils.checkNotNull(expiryYear, "expiryYear");
        Utils.checkNotNull(expiryMonth, "expiryMonth");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(isRemovable, "isRemovable");
        this.object = object;
        this.id = id;
        this.payerId = payerId;
        this.paymentMethod = paymentMethod;
        this.isDefault = isDefault;
        this.gateway = gateway;
        this.gatewayExternalId = gatewayExternalId;
        this.gatewayExternalAccountId = gatewayExternalAccountId;
        this.last4 = last4;
        this.status = status;
        this.walletType = walletType;
        this.cardType = cardType;
        this.expiryYear = expiryYear;
        this.expiryMonth = expiryMonth;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.isRemovable = isRemovable;
    }
    
    public PaymentSource(
            CommerceSubscriptionItemPaymentSourceObject object,
            String id,
            String payerId,
            PaymentMethod paymentMethod,
            String gateway,
            String gatewayExternalId,
            String last4,
            CommerceSubscriptionItemPaymentSourceStatus status,
            String walletType,
            String cardType,
            long createdAt,
            long updatedAt) {
        this(object, id, payerId,
            paymentMethod, JsonNullable.undefined(), gateway,
            gatewayExternalId, JsonNullable.undefined(), last4,
            status, walletType, cardType,
            Optional.empty(), Optional.empty(), createdAt,
            updatedAt, JsonNullable.undefined());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonIgnore
    public CommerceSubscriptionItemPaymentSourceObject object() {
        return object;
    }

    /**
     * Unique identifier for the payment source.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Unique identifier for the payer.
     */
    @JsonIgnore
    public String payerId() {
        return payerId;
    }

    /**
     * The payment method type.
     */
    @JsonIgnore
    public PaymentMethod paymentMethod() {
        return paymentMethod;
    }

    /**
     * Whether this is the default payment source for the payer.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isDefault() {
        return isDefault;
    }

    /**
     * The payment gateway.
     */
    @JsonIgnore
    public String gateway() {
        return gateway;
    }

    /**
     * External ID in the payment gateway.
     */
    @JsonIgnore
    public String gatewayExternalId() {
        return gatewayExternalId;
    }

    /**
     * External account ID in the payment gateway.
     */
    @JsonIgnore
    public JsonNullable<String> gatewayExternalAccountId() {
        return gatewayExternalAccountId;
    }

    /**
     * Last 4 digits of the card (for card payment sources).
     */
    @JsonIgnore
    public String last4() {
        return last4;
    }

    /**
     * Status of the payment source.
     */
    @JsonIgnore
    public CommerceSubscriptionItemPaymentSourceStatus status() {
        return status;
    }

    /**
     * Type of wallet (if applicable).
     */
    @JsonIgnore
    public String walletType() {
        return walletType;
    }

    /**
     * Type of card (if applicable).
     */
    @JsonIgnore
    public String cardType() {
        return cardType;
    }

    /**
     * Card expiration year (for card payment sources).
     */
    @JsonIgnore
    public Optional<Long> expiryYear() {
        return expiryYear;
    }

    /**
     * Card expiration month (for card payment sources).
     */
    @JsonIgnore
    public Optional<Long> expiryMonth() {
        return expiryMonth;
    }

    /**
     * Unix timestamp (in milliseconds) when the payment source was created.
     */
    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    /**
     * Unix timestamp (in milliseconds) when the payment source was last updated.
     */
    @JsonIgnore
    public long updatedAt() {
        return updatedAt;
    }

    /**
     * Whether this payment source can be removed.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isRemovable() {
        return isRemovable;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public PaymentSource withObject(CommerceSubscriptionItemPaymentSourceObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * Unique identifier for the payment source.
     */
    public PaymentSource withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Unique identifier for the payer.
     */
    public PaymentSource withPayerId(String payerId) {
        Utils.checkNotNull(payerId, "payerId");
        this.payerId = payerId;
        return this;
    }

    /**
     * The payment method type.
     */
    public PaymentSource withPaymentMethod(PaymentMethod paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * Whether this is the default payment source for the payer.
     */
    public PaymentSource withIsDefault(boolean isDefault) {
        Utils.checkNotNull(isDefault, "isDefault");
        this.isDefault = JsonNullable.of(isDefault);
        return this;
    }

    /**
     * Whether this is the default payment source for the payer.
     */
    public PaymentSource withIsDefault(JsonNullable<Boolean> isDefault) {
        Utils.checkNotNull(isDefault, "isDefault");
        this.isDefault = isDefault;
        return this;
    }

    /**
     * The payment gateway.
     */
    public PaymentSource withGateway(String gateway) {
        Utils.checkNotNull(gateway, "gateway");
        this.gateway = gateway;
        return this;
    }

    /**
     * External ID in the payment gateway.
     */
    public PaymentSource withGatewayExternalId(String gatewayExternalId) {
        Utils.checkNotNull(gatewayExternalId, "gatewayExternalId");
        this.gatewayExternalId = gatewayExternalId;
        return this;
    }

    /**
     * External account ID in the payment gateway.
     */
    public PaymentSource withGatewayExternalAccountId(String gatewayExternalAccountId) {
        Utils.checkNotNull(gatewayExternalAccountId, "gatewayExternalAccountId");
        this.gatewayExternalAccountId = JsonNullable.of(gatewayExternalAccountId);
        return this;
    }

    /**
     * External account ID in the payment gateway.
     */
    public PaymentSource withGatewayExternalAccountId(JsonNullable<String> gatewayExternalAccountId) {
        Utils.checkNotNull(gatewayExternalAccountId, "gatewayExternalAccountId");
        this.gatewayExternalAccountId = gatewayExternalAccountId;
        return this;
    }

    /**
     * Last 4 digits of the card (for card payment sources).
     */
    public PaymentSource withLast4(String last4) {
        Utils.checkNotNull(last4, "last4");
        this.last4 = last4;
        return this;
    }

    /**
     * Status of the payment source.
     */
    public PaymentSource withStatus(CommerceSubscriptionItemPaymentSourceStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Type of wallet (if applicable).
     */
    public PaymentSource withWalletType(String walletType) {
        Utils.checkNotNull(walletType, "walletType");
        this.walletType = walletType;
        return this;
    }

    /**
     * Type of card (if applicable).
     */
    public PaymentSource withCardType(String cardType) {
        Utils.checkNotNull(cardType, "cardType");
        this.cardType = cardType;
        return this;
    }

    /**
     * Card expiration year (for card payment sources).
     */
    public PaymentSource withExpiryYear(long expiryYear) {
        Utils.checkNotNull(expiryYear, "expiryYear");
        this.expiryYear = Optional.ofNullable(expiryYear);
        return this;
    }


    /**
     * Card expiration year (for card payment sources).
     */
    public PaymentSource withExpiryYear(Optional<Long> expiryYear) {
        Utils.checkNotNull(expiryYear, "expiryYear");
        this.expiryYear = expiryYear;
        return this;
    }

    /**
     * Card expiration month (for card payment sources).
     */
    public PaymentSource withExpiryMonth(long expiryMonth) {
        Utils.checkNotNull(expiryMonth, "expiryMonth");
        this.expiryMonth = Optional.ofNullable(expiryMonth);
        return this;
    }


    /**
     * Card expiration month (for card payment sources).
     */
    public PaymentSource withExpiryMonth(Optional<Long> expiryMonth) {
        Utils.checkNotNull(expiryMonth, "expiryMonth");
        this.expiryMonth = expiryMonth;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the payment source was created.
     */
    public PaymentSource withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Unix timestamp (in milliseconds) when the payment source was last updated.
     */
    public PaymentSource withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Whether this payment source can be removed.
     */
    public PaymentSource withIsRemovable(boolean isRemovable) {
        Utils.checkNotNull(isRemovable, "isRemovable");
        this.isRemovable = JsonNullable.of(isRemovable);
        return this;
    }

    /**
     * Whether this payment source can be removed.
     */
    public PaymentSource withIsRemovable(JsonNullable<Boolean> isRemovable) {
        Utils.checkNotNull(isRemovable, "isRemovable");
        this.isRemovable = isRemovable;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentSource other = (PaymentSource) o;
        return 
            Utils.enhancedDeepEquals(this.object, other.object) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.payerId, other.payerId) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.isDefault, other.isDefault) &&
            Utils.enhancedDeepEquals(this.gateway, other.gateway) &&
            Utils.enhancedDeepEquals(this.gatewayExternalId, other.gatewayExternalId) &&
            Utils.enhancedDeepEquals(this.gatewayExternalAccountId, other.gatewayExternalAccountId) &&
            Utils.enhancedDeepEquals(this.last4, other.last4) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.walletType, other.walletType) &&
            Utils.enhancedDeepEquals(this.cardType, other.cardType) &&
            Utils.enhancedDeepEquals(this.expiryYear, other.expiryYear) &&
            Utils.enhancedDeepEquals(this.expiryMonth, other.expiryMonth) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.isRemovable, other.isRemovable);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            object, id, payerId,
            paymentMethod, isDefault, gateway,
            gatewayExternalId, gatewayExternalAccountId, last4,
            status, walletType, cardType,
            expiryYear, expiryMonth, createdAt,
            updatedAt, isRemovable);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentSource.class,
                "object", object,
                "id", id,
                "payerId", payerId,
                "paymentMethod", paymentMethod,
                "isDefault", isDefault,
                "gateway", gateway,
                "gatewayExternalId", gatewayExternalId,
                "gatewayExternalAccountId", gatewayExternalAccountId,
                "last4", last4,
                "status", status,
                "walletType", walletType,
                "cardType", cardType,
                "expiryYear", expiryYear,
                "expiryMonth", expiryMonth,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "isRemovable", isRemovable);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CommerceSubscriptionItemPaymentSourceObject object;

        private String id;

        private String payerId;

        private PaymentMethod paymentMethod;

        private JsonNullable<Boolean> isDefault = JsonNullable.undefined();

        private String gateway;

        private String gatewayExternalId;

        private JsonNullable<String> gatewayExternalAccountId = JsonNullable.undefined();

        private String last4;

        private CommerceSubscriptionItemPaymentSourceStatus status;

        private String walletType;

        private String cardType;

        private Optional<Long> expiryYear = Optional.empty();

        private Optional<Long> expiryMonth = Optional.empty();

        private Long createdAt;

        private Long updatedAt;

        private JsonNullable<Boolean> isRemovable = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(CommerceSubscriptionItemPaymentSourceObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }


        /**
         * Unique identifier for the payment source.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Unique identifier for the payer.
         */
        public Builder payerId(String payerId) {
            Utils.checkNotNull(payerId, "payerId");
            this.payerId = payerId;
            return this;
        }


        /**
         * The payment method type.
         */
        public Builder paymentMethod(PaymentMethod paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }


        /**
         * Whether this is the default payment source for the payer.
         */
        public Builder isDefault(boolean isDefault) {
            Utils.checkNotNull(isDefault, "isDefault");
            this.isDefault = JsonNullable.of(isDefault);
            return this;
        }

        /**
         * Whether this is the default payment source for the payer.
         */
        public Builder isDefault(JsonNullable<Boolean> isDefault) {
            Utils.checkNotNull(isDefault, "isDefault");
            this.isDefault = isDefault;
            return this;
        }


        /**
         * The payment gateway.
         */
        public Builder gateway(String gateway) {
            Utils.checkNotNull(gateway, "gateway");
            this.gateway = gateway;
            return this;
        }


        /**
         * External ID in the payment gateway.
         */
        public Builder gatewayExternalId(String gatewayExternalId) {
            Utils.checkNotNull(gatewayExternalId, "gatewayExternalId");
            this.gatewayExternalId = gatewayExternalId;
            return this;
        }


        /**
         * External account ID in the payment gateway.
         */
        public Builder gatewayExternalAccountId(String gatewayExternalAccountId) {
            Utils.checkNotNull(gatewayExternalAccountId, "gatewayExternalAccountId");
            this.gatewayExternalAccountId = JsonNullable.of(gatewayExternalAccountId);
            return this;
        }

        /**
         * External account ID in the payment gateway.
         */
        public Builder gatewayExternalAccountId(JsonNullable<String> gatewayExternalAccountId) {
            Utils.checkNotNull(gatewayExternalAccountId, "gatewayExternalAccountId");
            this.gatewayExternalAccountId = gatewayExternalAccountId;
            return this;
        }


        /**
         * Last 4 digits of the card (for card payment sources).
         */
        public Builder last4(String last4) {
            Utils.checkNotNull(last4, "last4");
            this.last4 = last4;
            return this;
        }


        /**
         * Status of the payment source.
         */
        public Builder status(CommerceSubscriptionItemPaymentSourceStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Type of wallet (if applicable).
         */
        public Builder walletType(String walletType) {
            Utils.checkNotNull(walletType, "walletType");
            this.walletType = walletType;
            return this;
        }


        /**
         * Type of card (if applicable).
         */
        public Builder cardType(String cardType) {
            Utils.checkNotNull(cardType, "cardType");
            this.cardType = cardType;
            return this;
        }


        /**
         * Card expiration year (for card payment sources).
         */
        public Builder expiryYear(long expiryYear) {
            Utils.checkNotNull(expiryYear, "expiryYear");
            this.expiryYear = Optional.ofNullable(expiryYear);
            return this;
        }

        /**
         * Card expiration year (for card payment sources).
         */
        public Builder expiryYear(Optional<Long> expiryYear) {
            Utils.checkNotNull(expiryYear, "expiryYear");
            this.expiryYear = expiryYear;
            return this;
        }


        /**
         * Card expiration month (for card payment sources).
         */
        public Builder expiryMonth(long expiryMonth) {
            Utils.checkNotNull(expiryMonth, "expiryMonth");
            this.expiryMonth = Optional.ofNullable(expiryMonth);
            return this;
        }

        /**
         * Card expiration month (for card payment sources).
         */
        public Builder expiryMonth(Optional<Long> expiryMonth) {
            Utils.checkNotNull(expiryMonth, "expiryMonth");
            this.expiryMonth = expiryMonth;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the payment source was created.
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Unix timestamp (in milliseconds) when the payment source was last updated.
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * Whether this payment source can be removed.
         */
        public Builder isRemovable(boolean isRemovable) {
            Utils.checkNotNull(isRemovable, "isRemovable");
            this.isRemovable = JsonNullable.of(isRemovable);
            return this;
        }

        /**
         * Whether this payment source can be removed.
         */
        public Builder isRemovable(JsonNullable<Boolean> isRemovable) {
            Utils.checkNotNull(isRemovable, "isRemovable");
            this.isRemovable = isRemovable;
            return this;
        }

        public PaymentSource build() {

            return new PaymentSource(
                object, id, payerId,
                paymentMethod, isDefault, gateway,
                gatewayExternalId, gatewayExternalAccountId, last4,
                status, walletType, cardType,
                expiryYear, expiryMonth, createdAt,
                updatedAt, isRemovable);
        }

    }
}
