/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.errors;

import com.clerk.backend_api.models.components.ClerkError;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * ClerkErrors
 * 
 * <p>Request was not successful
 */
@SuppressWarnings("serial")
public class ClerkErrors extends RuntimeException {

    @JsonProperty("errors")
    private List<ClerkError> errors;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    private Optional<? extends Meta> meta;

    @JsonCreator
    public ClerkErrors(
            @JsonProperty("errors") List<ClerkError> errors,
            @JsonProperty("meta") Optional<? extends Meta> meta) {
        super("API error occurred");
        Utils.checkNotNull(errors, "errors");
        Utils.checkNotNull(meta, "meta");
        this.errors = errors;
        this.meta = meta;
    }
    
    public ClerkErrors(
            List<ClerkError> errors) {
        this(errors, Optional.empty());
    }

    @JsonIgnore
    public List<ClerkError> errors() {
        return errors;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Meta> meta() {
        return (Optional<Meta>) meta;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ClerkErrors withErrors(List<ClerkError> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    public ClerkErrors withMeta(Meta meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = Optional.ofNullable(meta);
        return this;
    }


    public ClerkErrors withMeta(Optional<? extends Meta> meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClerkErrors other = (ClerkErrors) o;
        return 
            Utils.enhancedDeepEquals(this.errors, other.errors) &&
            Utils.enhancedDeepEquals(this.meta, other.meta);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            errors, meta);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClerkErrors.class,
                "errors", errors,
                "meta", meta);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<ClerkError> errors;

        private Optional<? extends Meta> meta = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder errors(List<ClerkError> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }


        public Builder meta(Meta meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = Optional.ofNullable(meta);
            return this;
        }

        public Builder meta(Optional<? extends Meta> meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }

        public ClerkErrors build() {

            return new ClerkErrors(
                errors, meta);
        }

    }
}

