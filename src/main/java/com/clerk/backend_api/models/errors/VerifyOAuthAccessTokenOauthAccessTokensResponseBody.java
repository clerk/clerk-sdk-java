/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.errors;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.io.InputStream;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;

/**
 * VerifyOAuthAccessTokenOauthAccessTokensResponseBody
 * 
 * <p>404 Not Found
 */
@SuppressWarnings("serial")
public class VerifyOAuthAccessTokenOauthAccessTokensResponseBody extends RuntimeException {

    @JsonProperty("errors")
    private List<VerifyOAuthAccessTokenOauthAccessTokensErrors> errors;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RawResponse")
    private Optional<? extends HttpResponse<InputStream>> rawResponse;

    @JsonCreator
    public VerifyOAuthAccessTokenOauthAccessTokensResponseBody(
            @JsonProperty("errors") List<VerifyOAuthAccessTokenOauthAccessTokensErrors> errors,
            @JsonProperty("RawResponse") Optional<? extends HttpResponse<InputStream>> rawResponse) {
        super("API error occurred");
        Utils.checkNotNull(errors, "errors");
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.errors = errors;
        this.rawResponse = rawResponse;
    }
    
    public VerifyOAuthAccessTokenOauthAccessTokensResponseBody(
            List<VerifyOAuthAccessTokenOauthAccessTokensErrors> errors) {
        this(errors, Optional.empty());
    }

    @JsonIgnore
    public List<VerifyOAuthAccessTokenOauthAccessTokensErrors> errors() {
        return errors;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HttpResponse<InputStream>> rawResponse() {
        return (Optional<HttpResponse<InputStream>>) rawResponse;
    }

    public static Builder builder() {
        return new Builder();
    }


    public VerifyOAuthAccessTokenOauthAccessTokensResponseBody withErrors(List<VerifyOAuthAccessTokenOauthAccessTokensErrors> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public VerifyOAuthAccessTokenOauthAccessTokensResponseBody withRawResponse(HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = Optional.ofNullable(rawResponse);
        return this;
    }


    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public VerifyOAuthAccessTokenOauthAccessTokensResponseBody withRawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerifyOAuthAccessTokenOauthAccessTokensResponseBody other = (VerifyOAuthAccessTokenOauthAccessTokensResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.errors, other.errors) &&
            Utils.enhancedDeepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            errors, rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerifyOAuthAccessTokenOauthAccessTokensResponseBody.class,
                "errors", errors,
                "rawResponse", rawResponse);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<VerifyOAuthAccessTokenOauthAccessTokensErrors> errors;

        private Optional<? extends HttpResponse<InputStream>> rawResponse;

        private Builder() {
          // force use of static builder() method
        }


        public Builder errors(List<VerifyOAuthAccessTokenOauthAccessTokensErrors> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }


        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<InputStream> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = Optional.ofNullable(rawResponse);
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }

        public VerifyOAuthAccessTokenOauthAccessTokensResponseBody build() {

            return new VerifyOAuthAccessTokenOauthAccessTokensResponseBody(
                errors, rawResponse);
        }

    }
}

