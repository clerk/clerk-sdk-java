/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.SDKConfiguration;
import com.clerk.backend_api.operations.UserWeb3WalletDeleteOperation;
import com.clerk.backend_api.utils.Options;
import com.clerk.backend_api.utils.RetryConfig;
import com.clerk.backend_api.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class UserWeb3WalletDeleteRequestBuilder {

    private String userId;
    private String web3WalletIdentificationId;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public UserWeb3WalletDeleteRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public UserWeb3WalletDeleteRequestBuilder userId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    public UserWeb3WalletDeleteRequestBuilder web3WalletIdentificationId(String web3WalletIdentificationId) {
        Utils.checkNotNull(web3WalletIdentificationId, "web3WalletIdentificationId");
        this.web3WalletIdentificationId = web3WalletIdentificationId;
        return this;
    }
                
    public UserWeb3WalletDeleteRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public UserWeb3WalletDeleteRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private UserWeb3WalletDeleteRequest buildRequest() {

        UserWeb3WalletDeleteRequest request = new UserWeb3WalletDeleteRequest(userId,
            web3WalletIdentificationId);

        return request;
    }

    public UserWeb3WalletDeleteResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<UserWeb3WalletDeleteRequest, UserWeb3WalletDeleteResponse> operation
              = new UserWeb3WalletDeleteOperation(
                sdkConfiguration,
                options);
        UserWeb3WalletDeleteRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
