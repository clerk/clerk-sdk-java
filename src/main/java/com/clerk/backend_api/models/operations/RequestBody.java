/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class RequestBody {

    /**
     * The email address the invitation will be sent to
     */
    @JsonProperty("email_address")
    private String emailAddress;

    /**
     * Metadata that will be attached to the newly created invitation.
     * The value of this property should be a well-formed JSON object.
     * Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private JsonNullable<? extends Map<String, Object>> publicMetadata;

    /**
     * The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_url")
    private JsonNullable<String> redirectUrl;

    /**
     * Optional flag which denotes whether an email invitation should be sent to the given email address.
     * Defaults to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notify")
    private JsonNullable<Boolean> notify_;

    /**
     * Whether an invitation should be created if there is already an existing invitation for this email
     * address, or it's claimed by another user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignore_existing")
    private JsonNullable<Boolean> ignoreExisting;

    /**
     * The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in_days")
    private JsonNullable<Long> expiresInDays;

    /**
     * The slug of the email template to use for the invitation email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_slug")
    private Optional<? extends CreateBulkInvitationsTemplateSlug> templateSlug;

    @JsonCreator
    public RequestBody(
            @JsonProperty("email_address") String emailAddress,
            @JsonProperty("public_metadata") JsonNullable<? extends Map<String, Object>> publicMetadata,
            @JsonProperty("redirect_url") JsonNullable<String> redirectUrl,
            @JsonProperty("notify") JsonNullable<Boolean> notify_,
            @JsonProperty("ignore_existing") JsonNullable<Boolean> ignoreExisting,
            @JsonProperty("expires_in_days") JsonNullable<Long> expiresInDays,
            @JsonProperty("template_slug") Optional<? extends CreateBulkInvitationsTemplateSlug> templateSlug) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(notify_, "notify_");
        Utils.checkNotNull(ignoreExisting, "ignoreExisting");
        Utils.checkNotNull(expiresInDays, "expiresInDays");
        Utils.checkNotNull(templateSlug, "templateSlug");
        this.emailAddress = emailAddress;
        this.publicMetadata = publicMetadata;
        this.redirectUrl = redirectUrl;
        this.notify_ = notify_;
        this.ignoreExisting = ignoreExisting;
        this.expiresInDays = expiresInDays;
        this.templateSlug = templateSlug;
    }
    
    public RequestBody(
            String emailAddress) {
        this(emailAddress, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The email address the invitation will be sent to
     */
    @JsonIgnore
    public String emailAddress() {
        return emailAddress;
    }

    /**
     * Metadata that will be attached to the newly created invitation.
     * The value of this property should be a well-formed JSON object.
     * Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> publicMetadata() {
        return (JsonNullable<Map<String, Object>>) publicMetadata;
    }

    /**
     * The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations).
     */
    @JsonIgnore
    public JsonNullable<String> redirectUrl() {
        return redirectUrl;
    }

    /**
     * Optional flag which denotes whether an email invitation should be sent to the given email address.
     * Defaults to true.
     */
    @JsonIgnore
    public JsonNullable<Boolean> notify_() {
        return notify_;
    }

    /**
     * Whether an invitation should be created if there is already an existing invitation for this email
     * address, or it's claimed by another user.
     */
    @JsonIgnore
    public JsonNullable<Boolean> ignoreExisting() {
        return ignoreExisting;
    }

    /**
     * The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
     */
    @JsonIgnore
    public JsonNullable<Long> expiresInDays() {
        return expiresInDays;
    }

    /**
     * The slug of the email template to use for the invitation email.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateBulkInvitationsTemplateSlug> templateSlug() {
        return (Optional<CreateBulkInvitationsTemplateSlug>) templateSlug;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The email address the invitation will be sent to
     */
    public RequestBody withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Metadata that will be attached to the newly created invitation.
     * The value of this property should be a well-formed JSON object.
     * Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
     */
    public RequestBody withPublicMetadata(Map<String, Object> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = JsonNullable.of(publicMetadata);
        return this;
    }

    /**
     * Metadata that will be attached to the newly created invitation.
     * The value of this property should be a well-formed JSON object.
     * Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
     */
    public RequestBody withPublicMetadata(JsonNullable<? extends Map<String, Object>> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    /**
     * The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations).
     */
    public RequestBody withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = JsonNullable.of(redirectUrl);
        return this;
    }

    /**
     * The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations).
     */
    public RequestBody withRedirectUrl(JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * Optional flag which denotes whether an email invitation should be sent to the given email address.
     * Defaults to true.
     */
    public RequestBody withNotify(boolean notify_) {
        Utils.checkNotNull(notify_, "notify_");
        this.notify_ = JsonNullable.of(notify_);
        return this;
    }

    /**
     * Optional flag which denotes whether an email invitation should be sent to the given email address.
     * Defaults to true.
     */
    public RequestBody withNotify(JsonNullable<Boolean> notify_) {
        Utils.checkNotNull(notify_, "notify_");
        this.notify_ = notify_;
        return this;
    }

    /**
     * Whether an invitation should be created if there is already an existing invitation for this email
     * address, or it's claimed by another user.
     */
    public RequestBody withIgnoreExisting(boolean ignoreExisting) {
        Utils.checkNotNull(ignoreExisting, "ignoreExisting");
        this.ignoreExisting = JsonNullable.of(ignoreExisting);
        return this;
    }

    /**
     * Whether an invitation should be created if there is already an existing invitation for this email
     * address, or it's claimed by another user.
     */
    public RequestBody withIgnoreExisting(JsonNullable<Boolean> ignoreExisting) {
        Utils.checkNotNull(ignoreExisting, "ignoreExisting");
        this.ignoreExisting = ignoreExisting;
        return this;
    }

    /**
     * The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
     */
    public RequestBody withExpiresInDays(long expiresInDays) {
        Utils.checkNotNull(expiresInDays, "expiresInDays");
        this.expiresInDays = JsonNullable.of(expiresInDays);
        return this;
    }

    /**
     * The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
     */
    public RequestBody withExpiresInDays(JsonNullable<Long> expiresInDays) {
        Utils.checkNotNull(expiresInDays, "expiresInDays");
        this.expiresInDays = expiresInDays;
        return this;
    }

    /**
     * The slug of the email template to use for the invitation email.
     */
    public RequestBody withTemplateSlug(CreateBulkInvitationsTemplateSlug templateSlug) {
        Utils.checkNotNull(templateSlug, "templateSlug");
        this.templateSlug = Optional.ofNullable(templateSlug);
        return this;
    }

    /**
     * The slug of the email template to use for the invitation email.
     */
    public RequestBody withTemplateSlug(Optional<? extends CreateBulkInvitationsTemplateSlug> templateSlug) {
        Utils.checkNotNull(templateSlug, "templateSlug");
        this.templateSlug = templateSlug;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBody other = (RequestBody) o;
        return 
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            Objects.deepEquals(this.redirectUrl, other.redirectUrl) &&
            Objects.deepEquals(this.notify_, other.notify_) &&
            Objects.deepEquals(this.ignoreExisting, other.ignoreExisting) &&
            Objects.deepEquals(this.expiresInDays, other.expiresInDays) &&
            Objects.deepEquals(this.templateSlug, other.templateSlug);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            emailAddress,
            publicMetadata,
            redirectUrl,
            notify_,
            ignoreExisting,
            expiresInDays,
            templateSlug);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBody.class,
                "emailAddress", emailAddress,
                "publicMetadata", publicMetadata,
                "redirectUrl", redirectUrl,
                "notify_", notify_,
                "ignoreExisting", ignoreExisting,
                "expiresInDays", expiresInDays,
                "templateSlug", templateSlug);
    }
    
    public final static class Builder {
 
        private String emailAddress;
 
        private JsonNullable<? extends Map<String, Object>> publicMetadata = JsonNullable.undefined();
 
        private JsonNullable<String> redirectUrl = JsonNullable.undefined();
 
        private JsonNullable<Boolean> notify_;
 
        private JsonNullable<Boolean> ignoreExisting;
 
        private JsonNullable<Long> expiresInDays = JsonNullable.undefined();
 
        private Optional<? extends CreateBulkInvitationsTemplateSlug> templateSlug;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The email address the invitation will be sent to
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Metadata that will be attached to the newly created invitation.
         * The value of this property should be a well-formed JSON object.
         * Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
         */
        public Builder publicMetadata(Map<String, Object> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = JsonNullable.of(publicMetadata);
            return this;
        }

        /**
         * Metadata that will be attached to the newly created invitation.
         * The value of this property should be a well-formed JSON object.
         * Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
         */
        public Builder publicMetadata(JsonNullable<? extends Map<String, Object>> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        /**
         * The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations).
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = JsonNullable.of(redirectUrl);
            return this;
        }

        /**
         * The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations).
         */
        public Builder redirectUrl(JsonNullable<String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * Optional flag which denotes whether an email invitation should be sent to the given email address.
         * Defaults to true.
         */
        public Builder notify_(boolean notify_) {
            Utils.checkNotNull(notify_, "notify_");
            this.notify_ = JsonNullable.of(notify_);
            return this;
        }

        /**
         * Optional flag which denotes whether an email invitation should be sent to the given email address.
         * Defaults to true.
         */
        public Builder notify_(JsonNullable<Boolean> notify_) {
            Utils.checkNotNull(notify_, "notify_");
            this.notify_ = notify_;
            return this;
        }

        /**
         * Whether an invitation should be created if there is already an existing invitation for this email
         * address, or it's claimed by another user.
         */
        public Builder ignoreExisting(boolean ignoreExisting) {
            Utils.checkNotNull(ignoreExisting, "ignoreExisting");
            this.ignoreExisting = JsonNullable.of(ignoreExisting);
            return this;
        }

        /**
         * Whether an invitation should be created if there is already an existing invitation for this email
         * address, or it's claimed by another user.
         */
        public Builder ignoreExisting(JsonNullable<Boolean> ignoreExisting) {
            Utils.checkNotNull(ignoreExisting, "ignoreExisting");
            this.ignoreExisting = ignoreExisting;
            return this;
        }

        /**
         * The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
         */
        public Builder expiresInDays(long expiresInDays) {
            Utils.checkNotNull(expiresInDays, "expiresInDays");
            this.expiresInDays = JsonNullable.of(expiresInDays);
            return this;
        }

        /**
         * The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
         */
        public Builder expiresInDays(JsonNullable<Long> expiresInDays) {
            Utils.checkNotNull(expiresInDays, "expiresInDays");
            this.expiresInDays = expiresInDays;
            return this;
        }

        /**
         * The slug of the email template to use for the invitation email.
         */
        public Builder templateSlug(CreateBulkInvitationsTemplateSlug templateSlug) {
            Utils.checkNotNull(templateSlug, "templateSlug");
            this.templateSlug = Optional.ofNullable(templateSlug);
            return this;
        }

        /**
         * The slug of the email template to use for the invitation email.
         */
        public Builder templateSlug(Optional<? extends CreateBulkInvitationsTemplateSlug> templateSlug) {
            Utils.checkNotNull(templateSlug, "templateSlug");
            this.templateSlug = templateSlug;
            return this;
        }
        
        public RequestBody build() {
            if (notify_ == null) {
                notify_ = _SINGLETON_VALUE_Notify.value();
            }
            if (ignoreExisting == null) {
                ignoreExisting = _SINGLETON_VALUE_IgnoreExisting.value();
            }
            if (templateSlug == null) {
                templateSlug = _SINGLETON_VALUE_TemplateSlug.value();
            }
            return new RequestBody(
                emailAddress,
                publicMetadata,
                redirectUrl,
                notify_,
                ignoreExisting,
                expiresInDays,
                templateSlug);
        }

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Notify =
                new LazySingletonValue<>(
                        "notify",
                        "true",
                        new TypeReference<JsonNullable<Boolean>>() {});

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_IgnoreExisting =
                new LazySingletonValue<>(
                        "ignore_existing",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends CreateBulkInvitationsTemplateSlug>> _SINGLETON_VALUE_TemplateSlug =
                new LazySingletonValue<>(
                        "template_slug",
                        "\"invitation\"",
                        new TypeReference<Optional<? extends CreateBulkInvitationsTemplateSlug>>() {});
    }
}
