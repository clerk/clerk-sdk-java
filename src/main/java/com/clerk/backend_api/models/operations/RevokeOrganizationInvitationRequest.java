/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;


import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class RevokeOrganizationInvitationRequest {

    /**
     * The organization ID.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")
    private String organizationId;

    /**
     * The organization invitation ID.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=invitation_id")
    private String invitationId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends RevokeOrganizationInvitationRequestBody> requestBody;

    @JsonCreator
    public RevokeOrganizationInvitationRequest(
            String organizationId,
            String invitationId,
            Optional<? extends RevokeOrganizationInvitationRequestBody> requestBody) {
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(invitationId, "invitationId");
        Utils.checkNotNull(requestBody, "requestBody");
        this.organizationId = organizationId;
        this.invitationId = invitationId;
        this.requestBody = requestBody;
    }
    
    public RevokeOrganizationInvitationRequest(
            String organizationId,
            String invitationId) {
        this(organizationId, invitationId, Optional.empty());
    }

    /**
     * The organization ID.
     */
    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    /**
     * The organization invitation ID.
     */
    @JsonIgnore
    public String invitationId() {
        return invitationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RevokeOrganizationInvitationRequestBody> requestBody() {
        return (Optional<RevokeOrganizationInvitationRequestBody>) requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The organization ID.
     */
    public RevokeOrganizationInvitationRequest withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * The organization invitation ID.
     */
    public RevokeOrganizationInvitationRequest withInvitationId(String invitationId) {
        Utils.checkNotNull(invitationId, "invitationId");
        this.invitationId = invitationId;
        return this;
    }

    public RevokeOrganizationInvitationRequest withRequestBody(RevokeOrganizationInvitationRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public RevokeOrganizationInvitationRequest withRequestBody(Optional<? extends RevokeOrganizationInvitationRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RevokeOrganizationInvitationRequest other = (RevokeOrganizationInvitationRequest) o;
        return 
            Objects.deepEquals(this.organizationId, other.organizationId) &&
            Objects.deepEquals(this.invitationId, other.invitationId) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            organizationId,
            invitationId,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RevokeOrganizationInvitationRequest.class,
                "organizationId", organizationId,
                "invitationId", invitationId,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String organizationId;
 
        private String invitationId;
 
        private Optional<? extends RevokeOrganizationInvitationRequestBody> requestBody = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The organization ID.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        /**
         * The organization invitation ID.
         */
        public Builder invitationId(String invitationId) {
            Utils.checkNotNull(invitationId, "invitationId");
            this.invitationId = invitationId;
            return this;
        }

        public Builder requestBody(RevokeOrganizationInvitationRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends RevokeOrganizationInvitationRequestBody> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public RevokeOrganizationInvitationRequest build() {
            return new RevokeOrganizationInvitationRequest(
                organizationId,
                invitationId,
                requestBody);
        }
    }
}

