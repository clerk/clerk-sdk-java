/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class CancelCommerceSubscriptionItemRequest {
    /**
     * The ID of the subscription item to cancel
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=subscription_item_id")
    private String subscriptionItemId;

    /**
     * Whether to cancel the subscription immediately (true) or at the end of the current billing period
     * (false, default)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end_now")
    private Optional<Boolean> endNow;

    @JsonCreator
    public CancelCommerceSubscriptionItemRequest(
            String subscriptionItemId,
            Optional<Boolean> endNow) {
        Utils.checkNotNull(subscriptionItemId, "subscriptionItemId");
        Utils.checkNotNull(endNow, "endNow");
        this.subscriptionItemId = subscriptionItemId;
        this.endNow = endNow;
    }
    
    public CancelCommerceSubscriptionItemRequest(
            String subscriptionItemId) {
        this(subscriptionItemId, Optional.empty());
    }

    /**
     * The ID of the subscription item to cancel
     */
    @JsonIgnore
    public String subscriptionItemId() {
        return subscriptionItemId;
    }

    /**
     * Whether to cancel the subscription immediately (true) or at the end of the current billing period
     * (false, default)
     */
    @JsonIgnore
    public Optional<Boolean> endNow() {
        return endNow;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the subscription item to cancel
     */
    public CancelCommerceSubscriptionItemRequest withSubscriptionItemId(String subscriptionItemId) {
        Utils.checkNotNull(subscriptionItemId, "subscriptionItemId");
        this.subscriptionItemId = subscriptionItemId;
        return this;
    }

    /**
     * Whether to cancel the subscription immediately (true) or at the end of the current billing period
     * (false, default)
     */
    public CancelCommerceSubscriptionItemRequest withEndNow(boolean endNow) {
        Utils.checkNotNull(endNow, "endNow");
        this.endNow = Optional.ofNullable(endNow);
        return this;
    }


    /**
     * Whether to cancel the subscription immediately (true) or at the end of the current billing period
     * (false, default)
     */
    public CancelCommerceSubscriptionItemRequest withEndNow(Optional<Boolean> endNow) {
        Utils.checkNotNull(endNow, "endNow");
        this.endNow = endNow;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CancelCommerceSubscriptionItemRequest other = (CancelCommerceSubscriptionItemRequest) o;
        return 
            Utils.enhancedDeepEquals(this.subscriptionItemId, other.subscriptionItemId) &&
            Utils.enhancedDeepEquals(this.endNow, other.endNow);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            subscriptionItemId, endNow);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CancelCommerceSubscriptionItemRequest.class,
                "subscriptionItemId", subscriptionItemId,
                "endNow", endNow);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String subscriptionItemId;

        private Optional<Boolean> endNow;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the subscription item to cancel
         */
        public Builder subscriptionItemId(String subscriptionItemId) {
            Utils.checkNotNull(subscriptionItemId, "subscriptionItemId");
            this.subscriptionItemId = subscriptionItemId;
            return this;
        }


        /**
         * Whether to cancel the subscription immediately (true) or at the end of the current billing period
         * (false, default)
         */
        public Builder endNow(boolean endNow) {
            Utils.checkNotNull(endNow, "endNow");
            this.endNow = Optional.ofNullable(endNow);
            return this;
        }

        /**
         * Whether to cancel the subscription immediately (true) or at the end of the current billing period
         * (false, default)
         */
        public Builder endNow(Optional<Boolean> endNow) {
            Utils.checkNotNull(endNow, "endNow");
            this.endNow = endNow;
            return this;
        }

        public CancelCommerceSubscriptionItemRequest build() {
            if (endNow == null) {
                endNow = _SINGLETON_VALUE_EndNow.value();
            }

            return new CancelCommerceSubscriptionItemRequest(
                subscriptionItemId, endNow);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_EndNow =
                new LazySingletonValue<>(
                        "end_now",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
