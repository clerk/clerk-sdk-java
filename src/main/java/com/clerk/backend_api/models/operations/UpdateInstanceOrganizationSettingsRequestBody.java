/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateInstanceOrganizationSettingsRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private JsonNullable<Boolean> enabled;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_allowed_memberships")
    private JsonNullable<Long> maxAllowedMemberships;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin_delete_enabled")
    private JsonNullable<Boolean> adminDeleteEnabled;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains_enabled")
    private JsonNullable<Boolean> domainsEnabled;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug_disabled")
    private JsonNullable<Boolean> slugDisabled;

    /**
     * Specify which enrollment modes to enable for your Organization Domains.
     * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains_enrollment_modes")
    private Optional<? extends List<String>> domainsEnrollmentModes;

    /**
     * Specify what the default organization role is for an organization creator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator_role_id")
    private JsonNullable<String> creatorRoleId;

    /**
     * Specify what the default organization role is for the organization domains.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains_default_role_id")
    private JsonNullable<String> domainsDefaultRoleId;

    @JsonCreator
    public UpdateInstanceOrganizationSettingsRequestBody(
            @JsonProperty("enabled") JsonNullable<Boolean> enabled,
            @JsonProperty("max_allowed_memberships") JsonNullable<Long> maxAllowedMemberships,
            @JsonProperty("admin_delete_enabled") JsonNullable<Boolean> adminDeleteEnabled,
            @JsonProperty("domains_enabled") JsonNullable<Boolean> domainsEnabled,
            @JsonProperty("slug_disabled") JsonNullable<Boolean> slugDisabled,
            @JsonProperty("domains_enrollment_modes") Optional<? extends List<String>> domainsEnrollmentModes,
            @JsonProperty("creator_role_id") JsonNullable<String> creatorRoleId,
            @JsonProperty("domains_default_role_id") JsonNullable<String> domainsDefaultRoleId) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        Utils.checkNotNull(domainsEnabled, "domainsEnabled");
        Utils.checkNotNull(slugDisabled, "slugDisabled");
        Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
        Utils.checkNotNull(creatorRoleId, "creatorRoleId");
        Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
        this.enabled = enabled;
        this.maxAllowedMemberships = maxAllowedMemberships;
        this.adminDeleteEnabled = adminDeleteEnabled;
        this.domainsEnabled = domainsEnabled;
        this.slugDisabled = slugDisabled;
        this.domainsEnrollmentModes = domainsEnrollmentModes;
        this.creatorRoleId = creatorRoleId;
        this.domainsDefaultRoleId = domainsDefaultRoleId;
    }
    
    public UpdateInstanceOrganizationSettingsRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<Boolean> enabled() {
        return enabled;
    }

    @JsonIgnore
    public JsonNullable<Long> maxAllowedMemberships() {
        return maxAllowedMemberships;
    }

    @JsonIgnore
    public JsonNullable<Boolean> adminDeleteEnabled() {
        return adminDeleteEnabled;
    }

    @JsonIgnore
    public JsonNullable<Boolean> domainsEnabled() {
        return domainsEnabled;
    }

    @JsonIgnore
    public JsonNullable<Boolean> slugDisabled() {
        return slugDisabled;
    }

    /**
     * Specify which enrollment modes to enable for your Organization Domains.
     * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> domainsEnrollmentModes() {
        return (Optional<List<String>>) domainsEnrollmentModes;
    }

    /**
     * Specify what the default organization role is for an organization creator.
     */
    @JsonIgnore
    public JsonNullable<String> creatorRoleId() {
        return creatorRoleId;
    }

    /**
     * Specify what the default organization role is for the organization domains.
     */
    @JsonIgnore
    public JsonNullable<String> domainsDefaultRoleId() {
        return domainsDefaultRoleId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public UpdateInstanceOrganizationSettingsRequestBody withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = JsonNullable.of(enabled);
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withEnabled(JsonNullable<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withMaxAllowedMemberships(long maxAllowedMemberships) {
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        this.maxAllowedMemberships = JsonNullable.of(maxAllowedMemberships);
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withMaxAllowedMemberships(JsonNullable<Long> maxAllowedMemberships) {
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        this.maxAllowedMemberships = maxAllowedMemberships;
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withAdminDeleteEnabled(boolean adminDeleteEnabled) {
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        this.adminDeleteEnabled = JsonNullable.of(adminDeleteEnabled);
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withAdminDeleteEnabled(JsonNullable<Boolean> adminDeleteEnabled) {
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        this.adminDeleteEnabled = adminDeleteEnabled;
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withDomainsEnabled(boolean domainsEnabled) {
        Utils.checkNotNull(domainsEnabled, "domainsEnabled");
        this.domainsEnabled = JsonNullable.of(domainsEnabled);
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withDomainsEnabled(JsonNullable<Boolean> domainsEnabled) {
        Utils.checkNotNull(domainsEnabled, "domainsEnabled");
        this.domainsEnabled = domainsEnabled;
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withSlugDisabled(boolean slugDisabled) {
        Utils.checkNotNull(slugDisabled, "slugDisabled");
        this.slugDisabled = JsonNullable.of(slugDisabled);
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withSlugDisabled(JsonNullable<Boolean> slugDisabled) {
        Utils.checkNotNull(slugDisabled, "slugDisabled");
        this.slugDisabled = slugDisabled;
        return this;
    }

    /**
     * Specify which enrollment modes to enable for your Organization Domains.
     * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withDomainsEnrollmentModes(List<String> domainsEnrollmentModes) {
        Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
        this.domainsEnrollmentModes = Optional.ofNullable(domainsEnrollmentModes);
        return this;
    }


    /**
     * Specify which enrollment modes to enable for your Organization Domains.
     * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withDomainsEnrollmentModes(Optional<? extends List<String>> domainsEnrollmentModes) {
        Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
        this.domainsEnrollmentModes = domainsEnrollmentModes;
        return this;
    }

    /**
     * Specify what the default organization role is for an organization creator.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withCreatorRoleId(String creatorRoleId) {
        Utils.checkNotNull(creatorRoleId, "creatorRoleId");
        this.creatorRoleId = JsonNullable.of(creatorRoleId);
        return this;
    }

    /**
     * Specify what the default organization role is for an organization creator.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withCreatorRoleId(JsonNullable<String> creatorRoleId) {
        Utils.checkNotNull(creatorRoleId, "creatorRoleId");
        this.creatorRoleId = creatorRoleId;
        return this;
    }

    /**
     * Specify what the default organization role is for the organization domains.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withDomainsDefaultRoleId(String domainsDefaultRoleId) {
        Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
        this.domainsDefaultRoleId = JsonNullable.of(domainsDefaultRoleId);
        return this;
    }

    /**
     * Specify what the default organization role is for the organization domains.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withDomainsDefaultRoleId(JsonNullable<String> domainsDefaultRoleId) {
        Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
        this.domainsDefaultRoleId = domainsDefaultRoleId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateInstanceOrganizationSettingsRequestBody other = (UpdateInstanceOrganizationSettingsRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.enabled, other.enabled) &&
            Utils.enhancedDeepEquals(this.maxAllowedMemberships, other.maxAllowedMemberships) &&
            Utils.enhancedDeepEquals(this.adminDeleteEnabled, other.adminDeleteEnabled) &&
            Utils.enhancedDeepEquals(this.domainsEnabled, other.domainsEnabled) &&
            Utils.enhancedDeepEquals(this.slugDisabled, other.slugDisabled) &&
            Utils.enhancedDeepEquals(this.domainsEnrollmentModes, other.domainsEnrollmentModes) &&
            Utils.enhancedDeepEquals(this.creatorRoleId, other.creatorRoleId) &&
            Utils.enhancedDeepEquals(this.domainsDefaultRoleId, other.domainsDefaultRoleId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            enabled, maxAllowedMemberships, adminDeleteEnabled,
            domainsEnabled, slugDisabled, domainsEnrollmentModes,
            creatorRoleId, domainsDefaultRoleId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateInstanceOrganizationSettingsRequestBody.class,
                "enabled", enabled,
                "maxAllowedMemberships", maxAllowedMemberships,
                "adminDeleteEnabled", adminDeleteEnabled,
                "domainsEnabled", domainsEnabled,
                "slugDisabled", slugDisabled,
                "domainsEnrollmentModes", domainsEnrollmentModes,
                "creatorRoleId", creatorRoleId,
                "domainsDefaultRoleId", domainsDefaultRoleId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<Boolean> enabled = JsonNullable.undefined();

        private JsonNullable<Long> maxAllowedMemberships = JsonNullable.undefined();

        private JsonNullable<Boolean> adminDeleteEnabled = JsonNullable.undefined();

        private JsonNullable<Boolean> domainsEnabled = JsonNullable.undefined();

        private JsonNullable<Boolean> slugDisabled = JsonNullable.undefined();

        private Optional<? extends List<String>> domainsEnrollmentModes = Optional.empty();

        private JsonNullable<String> creatorRoleId = JsonNullable.undefined();

        private JsonNullable<String> domainsDefaultRoleId = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = JsonNullable.of(enabled);
            return this;
        }

        public Builder enabled(JsonNullable<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }


        public Builder maxAllowedMemberships(long maxAllowedMemberships) {
            Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
            this.maxAllowedMemberships = JsonNullable.of(maxAllowedMemberships);
            return this;
        }

        public Builder maxAllowedMemberships(JsonNullable<Long> maxAllowedMemberships) {
            Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
            this.maxAllowedMemberships = maxAllowedMemberships;
            return this;
        }


        public Builder adminDeleteEnabled(boolean adminDeleteEnabled) {
            Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
            this.adminDeleteEnabled = JsonNullable.of(adminDeleteEnabled);
            return this;
        }

        public Builder adminDeleteEnabled(JsonNullable<Boolean> adminDeleteEnabled) {
            Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
            this.adminDeleteEnabled = adminDeleteEnabled;
            return this;
        }


        public Builder domainsEnabled(boolean domainsEnabled) {
            Utils.checkNotNull(domainsEnabled, "domainsEnabled");
            this.domainsEnabled = JsonNullable.of(domainsEnabled);
            return this;
        }

        public Builder domainsEnabled(JsonNullable<Boolean> domainsEnabled) {
            Utils.checkNotNull(domainsEnabled, "domainsEnabled");
            this.domainsEnabled = domainsEnabled;
            return this;
        }


        public Builder slugDisabled(boolean slugDisabled) {
            Utils.checkNotNull(slugDisabled, "slugDisabled");
            this.slugDisabled = JsonNullable.of(slugDisabled);
            return this;
        }

        public Builder slugDisabled(JsonNullable<Boolean> slugDisabled) {
            Utils.checkNotNull(slugDisabled, "slugDisabled");
            this.slugDisabled = slugDisabled;
            return this;
        }


        /**
         * Specify which enrollment modes to enable for your Organization Domains.
         * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
         */
        public Builder domainsEnrollmentModes(List<String> domainsEnrollmentModes) {
            Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
            this.domainsEnrollmentModes = Optional.ofNullable(domainsEnrollmentModes);
            return this;
        }

        /**
         * Specify which enrollment modes to enable for your Organization Domains.
         * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
         */
        public Builder domainsEnrollmentModes(Optional<? extends List<String>> domainsEnrollmentModes) {
            Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
            this.domainsEnrollmentModes = domainsEnrollmentModes;
            return this;
        }


        /**
         * Specify what the default organization role is for an organization creator.
         */
        public Builder creatorRoleId(String creatorRoleId) {
            Utils.checkNotNull(creatorRoleId, "creatorRoleId");
            this.creatorRoleId = JsonNullable.of(creatorRoleId);
            return this;
        }

        /**
         * Specify what the default organization role is for an organization creator.
         */
        public Builder creatorRoleId(JsonNullable<String> creatorRoleId) {
            Utils.checkNotNull(creatorRoleId, "creatorRoleId");
            this.creatorRoleId = creatorRoleId;
            return this;
        }


        /**
         * Specify what the default organization role is for the organization domains.
         */
        public Builder domainsDefaultRoleId(String domainsDefaultRoleId) {
            Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
            this.domainsDefaultRoleId = JsonNullable.of(domainsDefaultRoleId);
            return this;
        }

        /**
         * Specify what the default organization role is for the organization domains.
         */
        public Builder domainsDefaultRoleId(JsonNullable<String> domainsDefaultRoleId) {
            Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
            this.domainsDefaultRoleId = domainsDefaultRoleId;
            return this;
        }

        public UpdateInstanceOrganizationSettingsRequestBody build() {

            return new UpdateInstanceOrganizationSettingsRequestBody(
                enabled, maxAllowedMemberships, adminDeleteEnabled,
                domainsEnabled, slugDisabled, domainsEnrollmentModes,
                creatorRoleId, domainsDefaultRoleId);
        }

    }
}
