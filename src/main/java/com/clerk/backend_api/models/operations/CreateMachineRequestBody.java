/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class CreateMachineRequestBody {
    /**
     * The name of the machine
     */
    @JsonProperty("name")
    private String name;

    /**
     * Array of machine IDs that this machine will have access to. Maximum of 25 scopes per machine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scoped_machines")
    private Optional<? extends List<String>> scopedMachines;

    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1 second.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_token_ttl")
    private Optional<Long> defaultTokenTtl;

    @JsonCreator
    public CreateMachineRequestBody(
            @JsonProperty("name") String name,
            @JsonProperty("scoped_machines") Optional<? extends List<String>> scopedMachines,
            @JsonProperty("default_token_ttl") Optional<Long> defaultTokenTtl) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(scopedMachines, "scopedMachines");
        Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
        this.name = name;
        this.scopedMachines = scopedMachines;
        this.defaultTokenTtl = defaultTokenTtl;
    }
    
    public CreateMachineRequestBody(
            String name) {
        this(name, Optional.empty(), Optional.empty());
    }

    /**
     * The name of the machine
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Array of machine IDs that this machine will have access to. Maximum of 25 scopes per machine.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> scopedMachines() {
        return (Optional<List<String>>) scopedMachines;
    }

    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1 second.
     */
    @JsonIgnore
    public Optional<Long> defaultTokenTtl() {
        return defaultTokenTtl;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the machine
     */
    public CreateMachineRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Array of machine IDs that this machine will have access to. Maximum of 25 scopes per machine.
     */
    public CreateMachineRequestBody withScopedMachines(List<String> scopedMachines) {
        Utils.checkNotNull(scopedMachines, "scopedMachines");
        this.scopedMachines = Optional.ofNullable(scopedMachines);
        return this;
    }


    /**
     * Array of machine IDs that this machine will have access to. Maximum of 25 scopes per machine.
     */
    public CreateMachineRequestBody withScopedMachines(Optional<? extends List<String>> scopedMachines) {
        Utils.checkNotNull(scopedMachines, "scopedMachines");
        this.scopedMachines = scopedMachines;
        return this;
    }

    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1 second.
     */
    public CreateMachineRequestBody withDefaultTokenTtl(long defaultTokenTtl) {
        Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
        this.defaultTokenTtl = Optional.ofNullable(defaultTokenTtl);
        return this;
    }


    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1 second.
     */
    public CreateMachineRequestBody withDefaultTokenTtl(Optional<Long> defaultTokenTtl) {
        Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
        this.defaultTokenTtl = defaultTokenTtl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateMachineRequestBody other = (CreateMachineRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.scopedMachines, other.scopedMachines) &&
            Utils.enhancedDeepEquals(this.defaultTokenTtl, other.defaultTokenTtl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, scopedMachines, defaultTokenTtl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateMachineRequestBody.class,
                "name", name,
                "scopedMachines", scopedMachines,
                "defaultTokenTtl", defaultTokenTtl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private Optional<? extends List<String>> scopedMachines = Optional.empty();

        private Optional<Long> defaultTokenTtl;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the machine
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * Array of machine IDs that this machine will have access to. Maximum of 25 scopes per machine.
         */
        public Builder scopedMachines(List<String> scopedMachines) {
            Utils.checkNotNull(scopedMachines, "scopedMachines");
            this.scopedMachines = Optional.ofNullable(scopedMachines);
            return this;
        }

        /**
         * Array of machine IDs that this machine will have access to. Maximum of 25 scopes per machine.
         */
        public Builder scopedMachines(Optional<? extends List<String>> scopedMachines) {
            Utils.checkNotNull(scopedMachines, "scopedMachines");
            this.scopedMachines = scopedMachines;
            return this;
        }


        /**
         * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1 second.
         */
        public Builder defaultTokenTtl(long defaultTokenTtl) {
            Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
            this.defaultTokenTtl = Optional.ofNullable(defaultTokenTtl);
            return this;
        }

        /**
         * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1 second.
         */
        public Builder defaultTokenTtl(Optional<Long> defaultTokenTtl) {
            Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
            this.defaultTokenTtl = defaultTokenTtl;
            return this;
        }

        public CreateMachineRequestBody build() {
            if (defaultTokenTtl == null) {
                defaultTokenTtl = _SINGLETON_VALUE_DefaultTokenTtl.value();
            }

            return new CreateMachineRequestBody(
                name, scopedMachines, defaultTokenTtl);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_DefaultTokenTtl =
                new LazySingletonValue<>(
                        "default_token_ttl",
                        "3600",
                        new TypeReference<Optional<Long>>() {});
    }
}
