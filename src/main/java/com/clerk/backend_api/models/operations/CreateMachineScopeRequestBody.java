/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;


public class CreateMachineScopeRequestBody {
    /**
     * The ID of the machine that will be scoped to the current machine
     */
    @JsonProperty("to_machine_id")
    private String toMachineId;

    @JsonCreator
    public CreateMachineScopeRequestBody(
            @JsonProperty("to_machine_id") String toMachineId) {
        Utils.checkNotNull(toMachineId, "toMachineId");
        this.toMachineId = toMachineId;
    }

    /**
     * The ID of the machine that will be scoped to the current machine
     */
    @JsonIgnore
    public String toMachineId() {
        return toMachineId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the machine that will be scoped to the current machine
     */
    public CreateMachineScopeRequestBody withToMachineId(String toMachineId) {
        Utils.checkNotNull(toMachineId, "toMachineId");
        this.toMachineId = toMachineId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateMachineScopeRequestBody other = (CreateMachineScopeRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.toMachineId, other.toMachineId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            toMachineId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateMachineScopeRequestBody.class,
                "toMachineId", toMachineId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String toMachineId;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the machine that will be scoped to the current machine
         */
        public Builder toMachineId(String toMachineId) {
            Utils.checkNotNull(toMachineId, "toMachineId");
            this.toMachineId = toMachineId;
            return this;
        }

        public CreateMachineScopeRequestBody build() {

            return new CreateMachineScopeRequestBody(
                toMachineId);
        }

    }
}
