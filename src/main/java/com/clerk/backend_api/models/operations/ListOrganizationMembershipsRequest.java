/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ListOrganizationMembershipsRequest {

    /**
     * The organization ID.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")
    private String organizationId;

    /**
     * Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
     * By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order."
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<String> orderBy;

    /**
     * Returns users with the user ids specified. For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the respective user id should be included or
     * excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")
    private Optional<? extends List<String>> userId;

    /**
     * Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address")
    private Optional<? extends List<String>> emailAddress;

    /**
     * Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number")
    private Optional<? extends List<String>> phoneNumber;

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=username")
    private Optional<? extends List<String>> username;

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=web3_wallet")
    private Optional<? extends List<String>> web3Wallet;

    /**
     * Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=role")
    private Optional<? extends List<String>> role;

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private Optional<String> query;

    /**
     * Returns users with emails that match the given query, via case-insensitive partial match.
     * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address_query")
    private Optional<String> emailAddressQuery;

    /**
     * Returns users with phone numbers that match the given query, via case-insensitive partial match.
     * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number_query")
    private Optional<String> phoneNumberQuery;

    /**
     * Returns users with usernames that match the given query, via case-insensitive partial match.
     * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=username_query")
    private Optional<String> usernameQuery;

    /**
     * Returns users with names that match the given query, via case-insensitive partial match.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name_query")
    private Optional<String> nameQuery;

    /**
     * Returns users whose last session activity was before the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_before")
    private Optional<Long> lastActiveAtBefore;

    /**
     * Returns users whose last session activity was after the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_after")
    private Optional<Long> lastActiveAtAfter;

    /**
     * Returns users who have been created before the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_before")
    private Optional<Long> createdAtBefore;

    /**
     * Returns users who have been created after the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_after")
    private Optional<Long> createdAtAfter;

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Long> offset;

    @JsonCreator
    public ListOrganizationMembershipsRequest(
            String organizationId,
            Optional<String> orderBy,
            Optional<? extends List<String>> userId,
            Optional<? extends List<String>> emailAddress,
            Optional<? extends List<String>> phoneNumber,
            Optional<? extends List<String>> username,
            Optional<? extends List<String>> web3Wallet,
            Optional<? extends List<String>> role,
            Optional<String> query,
            Optional<String> emailAddressQuery,
            Optional<String> phoneNumberQuery,
            Optional<String> usernameQuery,
            Optional<String> nameQuery,
            Optional<Long> lastActiveAtBefore,
            Optional<Long> lastActiveAtAfter,
            Optional<Long> createdAtBefore,
            Optional<Long> createdAtAfter,
            Optional<Long> limit,
            Optional<Long> offset) {
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
        Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
        Utils.checkNotNull(usernameQuery, "usernameQuery");
        Utils.checkNotNull(nameQuery, "nameQuery");
        Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
        Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
        Utils.checkNotNull(createdAtBefore, "createdAtBefore");
        Utils.checkNotNull(createdAtAfter, "createdAtAfter");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        this.organizationId = organizationId;
        this.orderBy = orderBy;
        this.userId = userId;
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.username = username;
        this.web3Wallet = web3Wallet;
        this.role = role;
        this.query = query;
        this.emailAddressQuery = emailAddressQuery;
        this.phoneNumberQuery = phoneNumberQuery;
        this.usernameQuery = usernameQuery;
        this.nameQuery = nameQuery;
        this.lastActiveAtBefore = lastActiveAtBefore;
        this.lastActiveAtAfter = lastActiveAtAfter;
        this.createdAtBefore = createdAtBefore;
        this.createdAtAfter = createdAtAfter;
        this.limit = limit;
        this.offset = offset;
    }
    
    public ListOrganizationMembershipsRequest(
            String organizationId) {
        this(organizationId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The organization ID.
     */
    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    /**
     * Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
     * By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order."
     */
    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    /**
     * Returns users with the user ids specified. For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the respective user id should be included or
     * excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> userId() {
        return (Optional<List<String>>) userId;
    }

    /**
     * Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> emailAddress() {
        return (Optional<List<String>>) emailAddress;
    }

    /**
     * Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> phoneNumber() {
        return (Optional<List<String>>) phoneNumber;
    }

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> username() {
        return (Optional<List<String>>) username;
    }

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> web3Wallet() {
        return (Optional<List<String>>) web3Wallet;
    }

    /**
     * Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> role() {
        return (Optional<List<String>>) role;
    }

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * Returns users with emails that match the given query, via case-insensitive partial match.
     * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
     */
    @JsonIgnore
    public Optional<String> emailAddressQuery() {
        return emailAddressQuery;
    }

    /**
     * Returns users with phone numbers that match the given query, via case-insensitive partial match.
     * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
     */
    @JsonIgnore
    public Optional<String> phoneNumberQuery() {
        return phoneNumberQuery;
    }

    /**
     * Returns users with usernames that match the given query, via case-insensitive partial match.
     * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
     */
    @JsonIgnore
    public Optional<String> usernameQuery() {
        return usernameQuery;
    }

    /**
     * Returns users with names that match the given query, via case-insensitive partial match.
     */
    @JsonIgnore
    public Optional<String> nameQuery() {
        return nameQuery;
    }

    /**
     * Returns users whose last session activity was before the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
     */
    @JsonIgnore
    public Optional<Long> lastActiveAtBefore() {
        return lastActiveAtBefore;
    }

    /**
     * Returns users whose last session activity was after the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
     */
    @JsonIgnore
    public Optional<Long> lastActiveAtAfter() {
        return lastActiveAtAfter;
    }

    /**
     * Returns users who have been created before the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
     */
    @JsonIgnore
    public Optional<Long> createdAtBefore() {
        return createdAtBefore;
    }

    /**
     * Returns users who have been created after the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
     */
    @JsonIgnore
    public Optional<Long> createdAtAfter() {
        return createdAtAfter;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    @JsonIgnore
    public Optional<Long> offset() {
        return offset;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The organization ID.
     */
    public ListOrganizationMembershipsRequest withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
     * By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order."
     */
    public ListOrganizationMembershipsRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }

    /**
     * Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
     * By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order."
     */
    public ListOrganizationMembershipsRequest withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Returns users with the user ids specified. For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the respective user id should be included or
     * excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
     */
    public ListOrganizationMembershipsRequest withUserId(List<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    /**
     * Returns users with the user ids specified. For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the respective user id should be included or
     * excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
     */
    public ListOrganizationMembershipsRequest withUserId(Optional<? extends List<String>> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
     */
    public ListOrganizationMembershipsRequest withEmailAddress(List<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }

    /**
     * Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
     */
    public ListOrganizationMembershipsRequest withEmailAddress(Optional<? extends List<String>> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
     */
    public ListOrganizationMembershipsRequest withPhoneNumber(List<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
     */
    public ListOrganizationMembershipsRequest withPhoneNumber(Optional<? extends List<String>> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    public ListOrganizationMembershipsRequest withUsername(List<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    public ListOrganizationMembershipsRequest withUsername(Optional<? extends List<String>> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    public ListOrganizationMembershipsRequest withWeb3Wallet(List<String> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = Optional.ofNullable(web3Wallet);
        return this;
    }

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    public ListOrganizationMembershipsRequest withWeb3Wallet(Optional<? extends List<String>> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = web3Wallet;
        return this;
    }

    /**
     * Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
     */
    public ListOrganizationMembershipsRequest withRole(List<String> role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    /**
     * Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
     */
    public ListOrganizationMembershipsRequest withRole(Optional<? extends List<String>> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    public ListOrganizationMembershipsRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    public ListOrganizationMembershipsRequest withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Returns users with emails that match the given query, via case-insensitive partial match.
     * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
     */
    public ListOrganizationMembershipsRequest withEmailAddressQuery(String emailAddressQuery) {
        Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
        this.emailAddressQuery = Optional.ofNullable(emailAddressQuery);
        return this;
    }

    /**
     * Returns users with emails that match the given query, via case-insensitive partial match.
     * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
     */
    public ListOrganizationMembershipsRequest withEmailAddressQuery(Optional<String> emailAddressQuery) {
        Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
        this.emailAddressQuery = emailAddressQuery;
        return this;
    }

    /**
     * Returns users with phone numbers that match the given query, via case-insensitive partial match.
     * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
     */
    public ListOrganizationMembershipsRequest withPhoneNumberQuery(String phoneNumberQuery) {
        Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
        this.phoneNumberQuery = Optional.ofNullable(phoneNumberQuery);
        return this;
    }

    /**
     * Returns users with phone numbers that match the given query, via case-insensitive partial match.
     * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
     */
    public ListOrganizationMembershipsRequest withPhoneNumberQuery(Optional<String> phoneNumberQuery) {
        Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
        this.phoneNumberQuery = phoneNumberQuery;
        return this;
    }

    /**
     * Returns users with usernames that match the given query, via case-insensitive partial match.
     * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
     */
    public ListOrganizationMembershipsRequest withUsernameQuery(String usernameQuery) {
        Utils.checkNotNull(usernameQuery, "usernameQuery");
        this.usernameQuery = Optional.ofNullable(usernameQuery);
        return this;
    }

    /**
     * Returns users with usernames that match the given query, via case-insensitive partial match.
     * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
     */
    public ListOrganizationMembershipsRequest withUsernameQuery(Optional<String> usernameQuery) {
        Utils.checkNotNull(usernameQuery, "usernameQuery");
        this.usernameQuery = usernameQuery;
        return this;
    }

    /**
     * Returns users with names that match the given query, via case-insensitive partial match.
     */
    public ListOrganizationMembershipsRequest withNameQuery(String nameQuery) {
        Utils.checkNotNull(nameQuery, "nameQuery");
        this.nameQuery = Optional.ofNullable(nameQuery);
        return this;
    }

    /**
     * Returns users with names that match the given query, via case-insensitive partial match.
     */
    public ListOrganizationMembershipsRequest withNameQuery(Optional<String> nameQuery) {
        Utils.checkNotNull(nameQuery, "nameQuery");
        this.nameQuery = nameQuery;
        return this;
    }

    /**
     * Returns users whose last session activity was before the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
     */
    public ListOrganizationMembershipsRequest withLastActiveAtBefore(long lastActiveAtBefore) {
        Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
        this.lastActiveAtBefore = Optional.ofNullable(lastActiveAtBefore);
        return this;
    }

    /**
     * Returns users whose last session activity was before the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
     */
    public ListOrganizationMembershipsRequest withLastActiveAtBefore(Optional<Long> lastActiveAtBefore) {
        Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
        this.lastActiveAtBefore = lastActiveAtBefore;
        return this;
    }

    /**
     * Returns users whose last session activity was after the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
     */
    public ListOrganizationMembershipsRequest withLastActiveAtAfter(long lastActiveAtAfter) {
        Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
        this.lastActiveAtAfter = Optional.ofNullable(lastActiveAtAfter);
        return this;
    }

    /**
     * Returns users whose last session activity was after the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
     */
    public ListOrganizationMembershipsRequest withLastActiveAtAfter(Optional<Long> lastActiveAtAfter) {
        Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
        this.lastActiveAtAfter = lastActiveAtAfter;
        return this;
    }

    /**
     * Returns users who have been created before the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
     */
    public ListOrganizationMembershipsRequest withCreatedAtBefore(long createdAtBefore) {
        Utils.checkNotNull(createdAtBefore, "createdAtBefore");
        this.createdAtBefore = Optional.ofNullable(createdAtBefore);
        return this;
    }

    /**
     * Returns users who have been created before the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
     */
    public ListOrganizationMembershipsRequest withCreatedAtBefore(Optional<Long> createdAtBefore) {
        Utils.checkNotNull(createdAtBefore, "createdAtBefore");
        this.createdAtBefore = createdAtBefore;
        return this;
    }

    /**
     * Returns users who have been created after the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
     */
    public ListOrganizationMembershipsRequest withCreatedAtAfter(long createdAtAfter) {
        Utils.checkNotNull(createdAtAfter, "createdAtAfter");
        this.createdAtAfter = Optional.ofNullable(createdAtAfter);
        return this;
    }

    /**
     * Returns users who have been created after the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
     */
    public ListOrganizationMembershipsRequest withCreatedAtAfter(Optional<Long> createdAtAfter) {
        Utils.checkNotNull(createdAtAfter, "createdAtAfter");
        this.createdAtAfter = createdAtAfter;
        return this;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    public ListOrganizationMembershipsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    public ListOrganizationMembershipsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    public ListOrganizationMembershipsRequest withOffset(long offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    public ListOrganizationMembershipsRequest withOffset(Optional<Long> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListOrganizationMembershipsRequest other = (ListOrganizationMembershipsRequest) o;
        return 
            Objects.deepEquals(this.organizationId, other.organizationId) &&
            Objects.deepEquals(this.orderBy, other.orderBy) &&
            Objects.deepEquals(this.userId, other.userId) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.username, other.username) &&
            Objects.deepEquals(this.web3Wallet, other.web3Wallet) &&
            Objects.deepEquals(this.role, other.role) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.emailAddressQuery, other.emailAddressQuery) &&
            Objects.deepEquals(this.phoneNumberQuery, other.phoneNumberQuery) &&
            Objects.deepEquals(this.usernameQuery, other.usernameQuery) &&
            Objects.deepEquals(this.nameQuery, other.nameQuery) &&
            Objects.deepEquals(this.lastActiveAtBefore, other.lastActiveAtBefore) &&
            Objects.deepEquals(this.lastActiveAtAfter, other.lastActiveAtAfter) &&
            Objects.deepEquals(this.createdAtBefore, other.createdAtBefore) &&
            Objects.deepEquals(this.createdAtAfter, other.createdAtAfter) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.offset, other.offset);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            organizationId,
            orderBy,
            userId,
            emailAddress,
            phoneNumber,
            username,
            web3Wallet,
            role,
            query,
            emailAddressQuery,
            phoneNumberQuery,
            usernameQuery,
            nameQuery,
            lastActiveAtBefore,
            lastActiveAtAfter,
            createdAtBefore,
            createdAtAfter,
            limit,
            offset);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListOrganizationMembershipsRequest.class,
                "organizationId", organizationId,
                "orderBy", orderBy,
                "userId", userId,
                "emailAddress", emailAddress,
                "phoneNumber", phoneNumber,
                "username", username,
                "web3Wallet", web3Wallet,
                "role", role,
                "query", query,
                "emailAddressQuery", emailAddressQuery,
                "phoneNumberQuery", phoneNumberQuery,
                "usernameQuery", usernameQuery,
                "nameQuery", nameQuery,
                "lastActiveAtBefore", lastActiveAtBefore,
                "lastActiveAtAfter", lastActiveAtAfter,
                "createdAtBefore", createdAtBefore,
                "createdAtAfter", createdAtAfter,
                "limit", limit,
                "offset", offset);
    }
    
    public final static class Builder {
 
        private String organizationId;
 
        private Optional<String> orderBy = Optional.empty();
 
        private Optional<? extends List<String>> userId = Optional.empty();
 
        private Optional<? extends List<String>> emailAddress = Optional.empty();
 
        private Optional<? extends List<String>> phoneNumber = Optional.empty();
 
        private Optional<? extends List<String>> username = Optional.empty();
 
        private Optional<? extends List<String>> web3Wallet = Optional.empty();
 
        private Optional<? extends List<String>> role = Optional.empty();
 
        private Optional<String> query = Optional.empty();
 
        private Optional<String> emailAddressQuery = Optional.empty();
 
        private Optional<String> phoneNumberQuery = Optional.empty();
 
        private Optional<String> usernameQuery = Optional.empty();
 
        private Optional<String> nameQuery = Optional.empty();
 
        private Optional<Long> lastActiveAtBefore = Optional.empty();
 
        private Optional<Long> lastActiveAtAfter = Optional.empty();
 
        private Optional<Long> createdAtBefore = Optional.empty();
 
        private Optional<Long> createdAtAfter = Optional.empty();
 
        private Optional<Long> limit;
 
        private Optional<Long> offset;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The organization ID.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        /**
         * Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
         * By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order."
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
         * By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order."
         */
        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }

        /**
         * Returns users with the user ids specified. For each user id, the `+` and `-` can be
         * prepended to the id, which denote whether the respective user id should be included or
         * excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
         */
        public Builder userId(List<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * Returns users with the user ids specified. For each user id, the `+` and `-` can be
         * prepended to the id, which denote whether the respective user id should be included or
         * excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
         */
        public Builder userId(Optional<? extends List<String>> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
         */
        public Builder emailAddress(List<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        /**
         * Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
         */
        public Builder emailAddress(Optional<? extends List<String>> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
         */
        public Builder phoneNumber(List<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
         */
        public Builder phoneNumber(Optional<? extends List<String>> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * Returns users with the specified usernames.
         * Accepts up to 100 usernames.
         * Any usernames not found are ignored.
         */
        public Builder username(List<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        /**
         * Returns users with the specified usernames.
         * Accepts up to 100 usernames.
         * Any usernames not found are ignored.
         */
        public Builder username(Optional<? extends List<String>> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        /**
         * Returns users with the specified web3 wallet addresses.
         * Accepts up to 100 web3 wallet addresses.
         * Any web3 wallet addressed not found are ignored.
         */
        public Builder web3Wallet(List<String> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = Optional.ofNullable(web3Wallet);
            return this;
        }

        /**
         * Returns users with the specified web3 wallet addresses.
         * Accepts up to 100 web3 wallet addresses.
         * Any web3 wallet addressed not found are ignored.
         */
        public Builder web3Wallet(Optional<? extends List<String>> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = web3Wallet;
            return this;
        }

        /**
         * Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
         */
        public Builder role(List<String> role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        /**
         * Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
         */
        public Builder role(Optional<? extends List<String>> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        /**
         * Returns users that match the given query.
         * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
         * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Returns users that match the given query.
         * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
         * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * Returns users with emails that match the given query, via case-insensitive partial match.
         * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
         */
        public Builder emailAddressQuery(String emailAddressQuery) {
            Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
            this.emailAddressQuery = Optional.ofNullable(emailAddressQuery);
            return this;
        }

        /**
         * Returns users with emails that match the given query, via case-insensitive partial match.
         * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
         */
        public Builder emailAddressQuery(Optional<String> emailAddressQuery) {
            Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
            this.emailAddressQuery = emailAddressQuery;
            return this;
        }

        /**
         * Returns users with phone numbers that match the given query, via case-insensitive partial match.
         * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
         */
        public Builder phoneNumberQuery(String phoneNumberQuery) {
            Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
            this.phoneNumberQuery = Optional.ofNullable(phoneNumberQuery);
            return this;
        }

        /**
         * Returns users with phone numbers that match the given query, via case-insensitive partial match.
         * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
         */
        public Builder phoneNumberQuery(Optional<String> phoneNumberQuery) {
            Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
            this.phoneNumberQuery = phoneNumberQuery;
            return this;
        }

        /**
         * Returns users with usernames that match the given query, via case-insensitive partial match.
         * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
         */
        public Builder usernameQuery(String usernameQuery) {
            Utils.checkNotNull(usernameQuery, "usernameQuery");
            this.usernameQuery = Optional.ofNullable(usernameQuery);
            return this;
        }

        /**
         * Returns users with usernames that match the given query, via case-insensitive partial match.
         * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
         */
        public Builder usernameQuery(Optional<String> usernameQuery) {
            Utils.checkNotNull(usernameQuery, "usernameQuery");
            this.usernameQuery = usernameQuery;
            return this;
        }

        /**
         * Returns users with names that match the given query, via case-insensitive partial match.
         */
        public Builder nameQuery(String nameQuery) {
            Utils.checkNotNull(nameQuery, "nameQuery");
            this.nameQuery = Optional.ofNullable(nameQuery);
            return this;
        }

        /**
         * Returns users with names that match the given query, via case-insensitive partial match.
         */
        public Builder nameQuery(Optional<String> nameQuery) {
            Utils.checkNotNull(nameQuery, "nameQuery");
            this.nameQuery = nameQuery;
            return this;
        }

        /**
         * Returns users whose last session activity was before the given date (with millisecond precision).
         * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
         */
        public Builder lastActiveAtBefore(long lastActiveAtBefore) {
            Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
            this.lastActiveAtBefore = Optional.ofNullable(lastActiveAtBefore);
            return this;
        }

        /**
         * Returns users whose last session activity was before the given date (with millisecond precision).
         * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
         */
        public Builder lastActiveAtBefore(Optional<Long> lastActiveAtBefore) {
            Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
            this.lastActiveAtBefore = lastActiveAtBefore;
            return this;
        }

        /**
         * Returns users whose last session activity was after the given date (with millisecond precision).
         * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
         */
        public Builder lastActiveAtAfter(long lastActiveAtAfter) {
            Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
            this.lastActiveAtAfter = Optional.ofNullable(lastActiveAtAfter);
            return this;
        }

        /**
         * Returns users whose last session activity was after the given date (with millisecond precision).
         * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
         */
        public Builder lastActiveAtAfter(Optional<Long> lastActiveAtAfter) {
            Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
            this.lastActiveAtAfter = lastActiveAtAfter;
            return this;
        }

        /**
         * Returns users who have been created before the given date (with millisecond precision).
         * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
         */
        public Builder createdAtBefore(long createdAtBefore) {
            Utils.checkNotNull(createdAtBefore, "createdAtBefore");
            this.createdAtBefore = Optional.ofNullable(createdAtBefore);
            return this;
        }

        /**
         * Returns users who have been created before the given date (with millisecond precision).
         * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
         */
        public Builder createdAtBefore(Optional<Long> createdAtBefore) {
            Utils.checkNotNull(createdAtBefore, "createdAtBefore");
            this.createdAtBefore = createdAtBefore;
            return this;
        }

        /**
         * Returns users who have been created after the given date (with millisecond precision).
         * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
         */
        public Builder createdAtAfter(long createdAtAfter) {
            Utils.checkNotNull(createdAtAfter, "createdAtAfter");
            this.createdAtAfter = Optional.ofNullable(createdAtAfter);
            return this;
        }

        /**
         * Returns users who have been created after the given date (with millisecond precision).
         * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
         */
        public Builder createdAtAfter(Optional<Long> createdAtAfter) {
            Utils.checkNotNull(createdAtAfter, "createdAtAfter");
            this.createdAtAfter = createdAtAfter;
            return this;
        }

        /**
         * Applies a limit to the number of results returned.
         * Can be used for paginating the results together with `offset`.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Applies a limit to the number of results returned.
         * Can be used for paginating the results together with `offset`.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * Skip the first `offset` results when paginating.
         * Needs to be an integer greater or equal to zero.
         * To be used in conjunction with `limit`.
         */
        public Builder offset(long offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        /**
         * Skip the first `offset` results when paginating.
         * Needs to be an integer greater or equal to zero.
         * To be used in conjunction with `limit`.
         */
        public Builder offset(Optional<Long> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }
        
        public ListOrganizationMembershipsRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (offset == null) {
                offset = _SINGLETON_VALUE_Offset.value();
            }
            return new ListOrganizationMembershipsRequest(
                organizationId,
                orderBy,
                userId,
                emailAddress,
                phoneNumber,
                username,
                web3Wallet,
                role,
                query,
                emailAddressQuery,
                phoneNumberQuery,
                usernameQuery,
                nameQuery,
                lastActiveAtBefore,
                lastActiveAtAfter,
                createdAtBefore,
                createdAtAfter,
                limit,
                offset);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "10",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Offset =
                new LazySingletonValue<>(
                        "offset",
                        "0",
                        new TypeReference<Optional<Long>>() {});
    }
}
