/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateUserRequestBody {

    /**
     * The ID of the user as used in your external systems or your previous authentication solution.
     * Must be unique across your instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<String> externalId;

    /**
     * The first name to assign to the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name to assign to the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Email addresses to add to the user.
     * Must be unique across your instance.
     * The first email address will be set as the user's primary email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    private Optional<? extends List<String>> emailAddress;

    /**
     * Phone numbers to add to the user.
     * Must be unique across your instance.
     * The first phone number will be set as the user's primary phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private Optional<? extends List<String>> phoneNumber;

    /**
     * Web3 wallets to add to the user.
     * Must be unique across your instance.
     * The first wallet will be set as the user's primary wallet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("web3_wallet")
    private Optional<? extends List<String>> web3Wallet;

    /**
     * The username to give to the user.
     * It must be unique across your instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private JsonNullable<String> username;

    /**
     * The plaintext password to give the user.
     * Must be at least 8 characters long, and can not be in any list of hacked passwords.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private JsonNullable<String> password;

    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
     * The digests should be generated with one of the supported algorithms.
     * The hashing algorithm can be specified using the `password_hasher` property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_digest")
    private Optional<String> passwordDigest;

    /**
     * The hashing algorithm that was used to generate the password digest.
     * 
     * The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),
     * [`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),
     * and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.
     * 
     * Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_hasher")
    private Optional<String> passwordHasher;

    /**
     * When set to `true` all password checks are skipped.
     * It is recommended to use this method only when migrating plaintext passwords to Clerk.
     * Upon migration the user base should be prompted to pick stronger password.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_password_checks")
    private Optional<Boolean> skipPasswordChecks;

    /**
     * When set to `true`, `password` is not required anymore when creating the user and can be omitted.
     * This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords.
     * Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_password_requirement")
    private Optional<Boolean> skipPasswordRequirement;

    /**
     * In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.
     * Please note that currently the supported options are:
     * * Period: 30 seconds
     * * Code length: 6 digits
     * * Algorithm: SHA1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totp_secret")
    private Optional<String> totpSecret;

    /**
     * If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.
     * You must provide the backup codes in plain format or the corresponding bcrypt digest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup_codes")
    private Optional<? extends List<String>> backupCodes;

    /**
     * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends PublicMetadata> publicMetadata;

    /**
     * Metadata saved on the user, that is only visible to your Backend API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends PrivateMetadata> privateMetadata;

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unsafe_metadata")
    private Optional<? extends UnsafeMetadata> unsafeMetadata;

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delete_self_enabled")
    private JsonNullable<Boolean> deleteSelfEnabled;

    /**
     * A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legal_accepted_at")
    private JsonNullable<String> legalAcceptedAt;

    /**
     * When set to `true` all legal checks are skipped.
     * It is not recommended to skip legal checks unless you are migrating a user to Clerk.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_legal_checks")
    private JsonNullable<Boolean> skipLegalChecks;

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_organization_enabled")
    private JsonNullable<Boolean> createOrganizationEnabled;

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_organizations_limit")
    private JsonNullable<Long> createOrganizationsLimit;

    /**
     * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<String> createdAt;

    @JsonCreator
    public CreateUserRequestBody(
            @JsonProperty("external_id") JsonNullable<String> externalId,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("email_address") Optional<? extends List<String>> emailAddress,
            @JsonProperty("phone_number") Optional<? extends List<String>> phoneNumber,
            @JsonProperty("web3_wallet") Optional<? extends List<String>> web3Wallet,
            @JsonProperty("username") JsonNullable<String> username,
            @JsonProperty("password") JsonNullable<String> password,
            @JsonProperty("password_digest") Optional<String> passwordDigest,
            @JsonProperty("password_hasher") Optional<String> passwordHasher,
            @JsonProperty("skip_password_checks") Optional<Boolean> skipPasswordChecks,
            @JsonProperty("skip_password_requirement") Optional<Boolean> skipPasswordRequirement,
            @JsonProperty("totp_secret") Optional<String> totpSecret,
            @JsonProperty("backup_codes") Optional<? extends List<String>> backupCodes,
            @JsonProperty("public_metadata") Optional<? extends PublicMetadata> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends PrivateMetadata> privateMetadata,
            @JsonProperty("unsafe_metadata") Optional<? extends UnsafeMetadata> unsafeMetadata,
            @JsonProperty("delete_self_enabled") JsonNullable<Boolean> deleteSelfEnabled,
            @JsonProperty("legal_accepted_at") JsonNullable<String> legalAcceptedAt,
            @JsonProperty("skip_legal_checks") JsonNullable<Boolean> skipLegalChecks,
            @JsonProperty("create_organization_enabled") JsonNullable<Boolean> createOrganizationEnabled,
            @JsonProperty("create_organizations_limit") JsonNullable<Long> createOrganizationsLimit,
            @JsonProperty("created_at") Optional<String> createdAt) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(passwordDigest, "passwordDigest");
        Utils.checkNotNull(passwordHasher, "passwordHasher");
        Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
        Utils.checkNotNull(skipPasswordRequirement, "skipPasswordRequirement");
        Utils.checkNotNull(totpSecret, "totpSecret");
        Utils.checkNotNull(backupCodes, "backupCodes");
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        Utils.checkNotNull(skipLegalChecks, "skipLegalChecks");
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
        Utils.checkNotNull(createdAt, "createdAt");
        this.externalId = externalId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.web3Wallet = web3Wallet;
        this.username = username;
        this.password = password;
        this.passwordDigest = passwordDigest;
        this.passwordHasher = passwordHasher;
        this.skipPasswordChecks = skipPasswordChecks;
        this.skipPasswordRequirement = skipPasswordRequirement;
        this.totpSecret = totpSecret;
        this.backupCodes = backupCodes;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.unsafeMetadata = unsafeMetadata;
        this.deleteSelfEnabled = deleteSelfEnabled;
        this.legalAcceptedAt = legalAcceptedAt;
        this.skipLegalChecks = skipLegalChecks;
        this.createOrganizationEnabled = createOrganizationEnabled;
        this.createOrganizationsLimit = createOrganizationsLimit;
        this.createdAt = createdAt;
    }
    
    public CreateUserRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The ID of the user as used in your external systems or your previous authentication solution.
     * Must be unique across your instance.
     */
    @JsonIgnore
    public JsonNullable<String> externalId() {
        return externalId;
    }

    /**
     * The first name to assign to the user
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The last name to assign to the user
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * Email addresses to add to the user.
     * Must be unique across your instance.
     * The first email address will be set as the user's primary email address.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> emailAddress() {
        return (Optional<List<String>>) emailAddress;
    }

    /**
     * Phone numbers to add to the user.
     * Must be unique across your instance.
     * The first phone number will be set as the user's primary phone number.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> phoneNumber() {
        return (Optional<List<String>>) phoneNumber;
    }

    /**
     * Web3 wallets to add to the user.
     * Must be unique across your instance.
     * The first wallet will be set as the user's primary wallet.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> web3Wallet() {
        return (Optional<List<String>>) web3Wallet;
    }

    /**
     * The username to give to the user.
     * It must be unique across your instance.
     */
    @JsonIgnore
    public JsonNullable<String> username() {
        return username;
    }

    /**
     * The plaintext password to give the user.
     * Must be at least 8 characters long, and can not be in any list of hacked passwords.
     */
    @JsonIgnore
    public JsonNullable<String> password() {
        return password;
    }

    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
     * The digests should be generated with one of the supported algorithms.
     * The hashing algorithm can be specified using the `password_hasher` property.
     */
    @JsonIgnore
    public Optional<String> passwordDigest() {
        return passwordDigest;
    }

    /**
     * The hashing algorithm that was used to generate the password digest.
     * 
     * The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),
     * [`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),
     * and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.
     * 
     * Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.
     */
    @JsonIgnore
    public Optional<String> passwordHasher() {
        return passwordHasher;
    }

    /**
     * When set to `true` all password checks are skipped.
     * It is recommended to use this method only when migrating plaintext passwords to Clerk.
     * Upon migration the user base should be prompted to pick stronger password.
     */
    @JsonIgnore
    public Optional<Boolean> skipPasswordChecks() {
        return skipPasswordChecks;
    }

    /**
     * When set to `true`, `password` is not required anymore when creating the user and can be omitted.
     * This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords.
     * Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
     */
    @JsonIgnore
    public Optional<Boolean> skipPasswordRequirement() {
        return skipPasswordRequirement;
    }

    /**
     * In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.
     * Please note that currently the supported options are:
     * * Period: 30 seconds
     * * Code length: 6 digits
     * * Algorithm: SHA1
     */
    @JsonIgnore
    public Optional<String> totpSecret() {
        return totpSecret;
    }

    /**
     * If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.
     * You must provide the backup codes in plain format or the corresponding bcrypt digest.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> backupCodes() {
        return (Optional<List<String>>) backupCodes;
    }

    /**
     * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PublicMetadata> publicMetadata() {
        return (Optional<PublicMetadata>) publicMetadata;
    }

    /**
     * Metadata saved on the user, that is only visible to your Backend API
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PrivateMetadata> privateMetadata() {
        return (Optional<PrivateMetadata>) privateMetadata;
    }

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UnsafeMetadata> unsafeMetadata() {
        return (Optional<UnsafeMetadata>) unsafeMetadata;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    @JsonIgnore
    public JsonNullable<Boolean> deleteSelfEnabled() {
        return deleteSelfEnabled;
    }

    /**
     * A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    @JsonIgnore
    public JsonNullable<String> legalAcceptedAt() {
        return legalAcceptedAt;
    }

    /**
     * When set to `true` all legal checks are skipped.
     * It is not recommended to skip legal checks unless you are migrating a user to Clerk.
     */
    @JsonIgnore
    public JsonNullable<Boolean> skipLegalChecks() {
        return skipLegalChecks;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    @JsonIgnore
    public JsonNullable<Boolean> createOrganizationEnabled() {
        return createOrganizationEnabled;
    }

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     * 
     */
    @JsonIgnore
    public JsonNullable<Long> createOrganizationsLimit() {
        return createOrganizationsLimit;
    }

    /**
     * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the user as used in your external systems or your previous authentication solution.
     * Must be unique across your instance.
     */
    public CreateUserRequestBody withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    /**
     * The ID of the user as used in your external systems or your previous authentication solution.
     * Must be unique across your instance.
     */
    public CreateUserRequestBody withExternalId(JsonNullable<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * The first name to assign to the user
     */
    public CreateUserRequestBody withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name to assign to the user
     */
    public CreateUserRequestBody withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name to assign to the user
     */
    public CreateUserRequestBody withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name to assign to the user
     */
    public CreateUserRequestBody withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Email addresses to add to the user.
     * Must be unique across your instance.
     * The first email address will be set as the user's primary email address.
     */
    public CreateUserRequestBody withEmailAddress(List<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }

    /**
     * Email addresses to add to the user.
     * Must be unique across your instance.
     * The first email address will be set as the user's primary email address.
     */
    public CreateUserRequestBody withEmailAddress(Optional<? extends List<String>> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Phone numbers to add to the user.
     * Must be unique across your instance.
     * The first phone number will be set as the user's primary phone number.
     */
    public CreateUserRequestBody withPhoneNumber(List<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * Phone numbers to add to the user.
     * Must be unique across your instance.
     * The first phone number will be set as the user's primary phone number.
     */
    public CreateUserRequestBody withPhoneNumber(Optional<? extends List<String>> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Web3 wallets to add to the user.
     * Must be unique across your instance.
     * The first wallet will be set as the user's primary wallet.
     */
    public CreateUserRequestBody withWeb3Wallet(List<String> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = Optional.ofNullable(web3Wallet);
        return this;
    }

    /**
     * Web3 wallets to add to the user.
     * Must be unique across your instance.
     * The first wallet will be set as the user's primary wallet.
     */
    public CreateUserRequestBody withWeb3Wallet(Optional<? extends List<String>> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = web3Wallet;
        return this;
    }

    /**
     * The username to give to the user.
     * It must be unique across your instance.
     */
    public CreateUserRequestBody withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = JsonNullable.of(username);
        return this;
    }

    /**
     * The username to give to the user.
     * It must be unique across your instance.
     */
    public CreateUserRequestBody withUsername(JsonNullable<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * The plaintext password to give the user.
     * Must be at least 8 characters long, and can not be in any list of hacked passwords.
     */
    public CreateUserRequestBody withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = JsonNullable.of(password);
        return this;
    }

    /**
     * The plaintext password to give the user.
     * Must be at least 8 characters long, and can not be in any list of hacked passwords.
     */
    public CreateUserRequestBody withPassword(JsonNullable<String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
     * The digests should be generated with one of the supported algorithms.
     * The hashing algorithm can be specified using the `password_hasher` property.
     */
    public CreateUserRequestBody withPasswordDigest(String passwordDigest) {
        Utils.checkNotNull(passwordDigest, "passwordDigest");
        this.passwordDigest = Optional.ofNullable(passwordDigest);
        return this;
    }

    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
     * The digests should be generated with one of the supported algorithms.
     * The hashing algorithm can be specified using the `password_hasher` property.
     */
    public CreateUserRequestBody withPasswordDigest(Optional<String> passwordDigest) {
        Utils.checkNotNull(passwordDigest, "passwordDigest");
        this.passwordDigest = passwordDigest;
        return this;
    }

    /**
     * The hashing algorithm that was used to generate the password digest.
     * 
     * The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),
     * [`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),
     * and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.
     * 
     * Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.
     */
    public CreateUserRequestBody withPasswordHasher(String passwordHasher) {
        Utils.checkNotNull(passwordHasher, "passwordHasher");
        this.passwordHasher = Optional.ofNullable(passwordHasher);
        return this;
    }

    /**
     * The hashing algorithm that was used to generate the password digest.
     * 
     * The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),
     * [`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),
     * and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.
     * 
     * Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.
     */
    public CreateUserRequestBody withPasswordHasher(Optional<String> passwordHasher) {
        Utils.checkNotNull(passwordHasher, "passwordHasher");
        this.passwordHasher = passwordHasher;
        return this;
    }

    /**
     * When set to `true` all password checks are skipped.
     * It is recommended to use this method only when migrating plaintext passwords to Clerk.
     * Upon migration the user base should be prompted to pick stronger password.
     */
    public CreateUserRequestBody withSkipPasswordChecks(boolean skipPasswordChecks) {
        Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
        this.skipPasswordChecks = Optional.ofNullable(skipPasswordChecks);
        return this;
    }

    /**
     * When set to `true` all password checks are skipped.
     * It is recommended to use this method only when migrating plaintext passwords to Clerk.
     * Upon migration the user base should be prompted to pick stronger password.
     */
    public CreateUserRequestBody withSkipPasswordChecks(Optional<Boolean> skipPasswordChecks) {
        Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
        this.skipPasswordChecks = skipPasswordChecks;
        return this;
    }

    /**
     * When set to `true`, `password` is not required anymore when creating the user and can be omitted.
     * This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords.
     * Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
     */
    public CreateUserRequestBody withSkipPasswordRequirement(boolean skipPasswordRequirement) {
        Utils.checkNotNull(skipPasswordRequirement, "skipPasswordRequirement");
        this.skipPasswordRequirement = Optional.ofNullable(skipPasswordRequirement);
        return this;
    }

    /**
     * When set to `true`, `password` is not required anymore when creating the user and can be omitted.
     * This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords.
     * Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
     */
    public CreateUserRequestBody withSkipPasswordRequirement(Optional<Boolean> skipPasswordRequirement) {
        Utils.checkNotNull(skipPasswordRequirement, "skipPasswordRequirement");
        this.skipPasswordRequirement = skipPasswordRequirement;
        return this;
    }

    /**
     * In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.
     * Please note that currently the supported options are:
     * * Period: 30 seconds
     * * Code length: 6 digits
     * * Algorithm: SHA1
     */
    public CreateUserRequestBody withTotpSecret(String totpSecret) {
        Utils.checkNotNull(totpSecret, "totpSecret");
        this.totpSecret = Optional.ofNullable(totpSecret);
        return this;
    }

    /**
     * In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.
     * Please note that currently the supported options are:
     * * Period: 30 seconds
     * * Code length: 6 digits
     * * Algorithm: SHA1
     */
    public CreateUserRequestBody withTotpSecret(Optional<String> totpSecret) {
        Utils.checkNotNull(totpSecret, "totpSecret");
        this.totpSecret = totpSecret;
        return this;
    }

    /**
     * If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.
     * You must provide the backup codes in plain format or the corresponding bcrypt digest.
     */
    public CreateUserRequestBody withBackupCodes(List<String> backupCodes) {
        Utils.checkNotNull(backupCodes, "backupCodes");
        this.backupCodes = Optional.ofNullable(backupCodes);
        return this;
    }

    /**
     * If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.
     * You must provide the backup codes in plain format or the corresponding bcrypt digest.
     */
    public CreateUserRequestBody withBackupCodes(Optional<? extends List<String>> backupCodes) {
        Utils.checkNotNull(backupCodes, "backupCodes");
        this.backupCodes = backupCodes;
        return this;
    }

    /**
     * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
     */
    public CreateUserRequestBody withPublicMetadata(PublicMetadata publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    /**
     * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
     */
    public CreateUserRequestBody withPublicMetadata(Optional<? extends PublicMetadata> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    /**
     * Metadata saved on the user, that is only visible to your Backend API
     */
    public CreateUserRequestBody withPrivateMetadata(PrivateMetadata privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }

    /**
     * Metadata saved on the user, that is only visible to your Backend API
     */
    public CreateUserRequestBody withPrivateMetadata(Optional<? extends PrivateMetadata> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    public CreateUserRequestBody withUnsafeMetadata(UnsafeMetadata unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
        return this;
    }

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    public CreateUserRequestBody withUnsafeMetadata(Optional<? extends UnsafeMetadata> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = unsafeMetadata;
        return this;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    public CreateUserRequestBody withDeleteSelfEnabled(boolean deleteSelfEnabled) {
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        this.deleteSelfEnabled = JsonNullable.of(deleteSelfEnabled);
        return this;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    public CreateUserRequestBody withDeleteSelfEnabled(JsonNullable<Boolean> deleteSelfEnabled) {
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        this.deleteSelfEnabled = deleteSelfEnabled;
        return this;
    }

    /**
     * A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    public CreateUserRequestBody withLegalAcceptedAt(String legalAcceptedAt) {
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.legalAcceptedAt = JsonNullable.of(legalAcceptedAt);
        return this;
    }

    /**
     * A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    public CreateUserRequestBody withLegalAcceptedAt(JsonNullable<String> legalAcceptedAt) {
        Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
        this.legalAcceptedAt = legalAcceptedAt;
        return this;
    }

    /**
     * When set to `true` all legal checks are skipped.
     * It is not recommended to skip legal checks unless you are migrating a user to Clerk.
     */
    public CreateUserRequestBody withSkipLegalChecks(boolean skipLegalChecks) {
        Utils.checkNotNull(skipLegalChecks, "skipLegalChecks");
        this.skipLegalChecks = JsonNullable.of(skipLegalChecks);
        return this;
    }

    /**
     * When set to `true` all legal checks are skipped.
     * It is not recommended to skip legal checks unless you are migrating a user to Clerk.
     */
    public CreateUserRequestBody withSkipLegalChecks(JsonNullable<Boolean> skipLegalChecks) {
        Utils.checkNotNull(skipLegalChecks, "skipLegalChecks");
        this.skipLegalChecks = skipLegalChecks;
        return this;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    public CreateUserRequestBody withCreateOrganizationEnabled(boolean createOrganizationEnabled) {
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        this.createOrganizationEnabled = JsonNullable.of(createOrganizationEnabled);
        return this;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    public CreateUserRequestBody withCreateOrganizationEnabled(JsonNullable<Boolean> createOrganizationEnabled) {
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        this.createOrganizationEnabled = createOrganizationEnabled;
        return this;
    }

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     * 
     */
    public CreateUserRequestBody withCreateOrganizationsLimit(long createOrganizationsLimit) {
        Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
        this.createOrganizationsLimit = JsonNullable.of(createOrganizationsLimit);
        return this;
    }

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     * 
     */
    public CreateUserRequestBody withCreateOrganizationsLimit(JsonNullable<Long> createOrganizationsLimit) {
        Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
        this.createOrganizationsLimit = createOrganizationsLimit;
        return this;
    }

    /**
     * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    public CreateUserRequestBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    public CreateUserRequestBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateUserRequestBody other = (CreateUserRequestBody) o;
        return 
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.web3Wallet, other.web3Wallet) &&
            Objects.deepEquals(this.username, other.username) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.passwordDigest, other.passwordDigest) &&
            Objects.deepEquals(this.passwordHasher, other.passwordHasher) &&
            Objects.deepEquals(this.skipPasswordChecks, other.skipPasswordChecks) &&
            Objects.deepEquals(this.skipPasswordRequirement, other.skipPasswordRequirement) &&
            Objects.deepEquals(this.totpSecret, other.totpSecret) &&
            Objects.deepEquals(this.backupCodes, other.backupCodes) &&
            Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            Objects.deepEquals(this.privateMetadata, other.privateMetadata) &&
            Objects.deepEquals(this.unsafeMetadata, other.unsafeMetadata) &&
            Objects.deepEquals(this.deleteSelfEnabled, other.deleteSelfEnabled) &&
            Objects.deepEquals(this.legalAcceptedAt, other.legalAcceptedAt) &&
            Objects.deepEquals(this.skipLegalChecks, other.skipLegalChecks) &&
            Objects.deepEquals(this.createOrganizationEnabled, other.createOrganizationEnabled) &&
            Objects.deepEquals(this.createOrganizationsLimit, other.createOrganizationsLimit) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            externalId,
            firstName,
            lastName,
            emailAddress,
            phoneNumber,
            web3Wallet,
            username,
            password,
            passwordDigest,
            passwordHasher,
            skipPasswordChecks,
            skipPasswordRequirement,
            totpSecret,
            backupCodes,
            publicMetadata,
            privateMetadata,
            unsafeMetadata,
            deleteSelfEnabled,
            legalAcceptedAt,
            skipLegalChecks,
            createOrganizationEnabled,
            createOrganizationsLimit,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateUserRequestBody.class,
                "externalId", externalId,
                "firstName", firstName,
                "lastName", lastName,
                "emailAddress", emailAddress,
                "phoneNumber", phoneNumber,
                "web3Wallet", web3Wallet,
                "username", username,
                "password", password,
                "passwordDigest", passwordDigest,
                "passwordHasher", passwordHasher,
                "skipPasswordChecks", skipPasswordChecks,
                "skipPasswordRequirement", skipPasswordRequirement,
                "totpSecret", totpSecret,
                "backupCodes", backupCodes,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "unsafeMetadata", unsafeMetadata,
                "deleteSelfEnabled", deleteSelfEnabled,
                "legalAcceptedAt", legalAcceptedAt,
                "skipLegalChecks", skipLegalChecks,
                "createOrganizationEnabled", createOrganizationEnabled,
                "createOrganizationsLimit", createOrganizationsLimit,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> externalId = JsonNullable.undefined();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private Optional<? extends List<String>> emailAddress = Optional.empty();
 
        private Optional<? extends List<String>> phoneNumber = Optional.empty();
 
        private Optional<? extends List<String>> web3Wallet = Optional.empty();
 
        private JsonNullable<String> username = JsonNullable.undefined();
 
        private JsonNullable<String> password = JsonNullable.undefined();
 
        private Optional<String> passwordDigest = Optional.empty();
 
        private Optional<String> passwordHasher = Optional.empty();
 
        private Optional<Boolean> skipPasswordChecks = Optional.empty();
 
        private Optional<Boolean> skipPasswordRequirement = Optional.empty();
 
        private Optional<String> totpSecret = Optional.empty();
 
        private Optional<? extends List<String>> backupCodes = Optional.empty();
 
        private Optional<? extends PublicMetadata> publicMetadata = Optional.empty();
 
        private Optional<? extends PrivateMetadata> privateMetadata = Optional.empty();
 
        private Optional<? extends UnsafeMetadata> unsafeMetadata = Optional.empty();
 
        private JsonNullable<Boolean> deleteSelfEnabled = JsonNullable.undefined();
 
        private JsonNullable<String> legalAcceptedAt = JsonNullable.undefined();
 
        private JsonNullable<Boolean> skipLegalChecks = JsonNullable.undefined();
 
        private JsonNullable<Boolean> createOrganizationEnabled = JsonNullable.undefined();
 
        private JsonNullable<Long> createOrganizationsLimit = JsonNullable.undefined();
 
        private Optional<String> createdAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the user as used in your external systems or your previous authentication solution.
         * Must be unique across your instance.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        /**
         * The ID of the user as used in your external systems or your previous authentication solution.
         * Must be unique across your instance.
         */
        public Builder externalId(JsonNullable<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        /**
         * The first name to assign to the user
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name to assign to the user
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name to assign to the user
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name to assign to the user
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Email addresses to add to the user.
         * Must be unique across your instance.
         * The first email address will be set as the user's primary email address.
         */
        public Builder emailAddress(List<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        /**
         * Email addresses to add to the user.
         * Must be unique across your instance.
         * The first email address will be set as the user's primary email address.
         */
        public Builder emailAddress(Optional<? extends List<String>> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Phone numbers to add to the user.
         * Must be unique across your instance.
         * The first phone number will be set as the user's primary phone number.
         */
        public Builder phoneNumber(List<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * Phone numbers to add to the user.
         * Must be unique across your instance.
         * The first phone number will be set as the user's primary phone number.
         */
        public Builder phoneNumber(Optional<? extends List<String>> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * Web3 wallets to add to the user.
         * Must be unique across your instance.
         * The first wallet will be set as the user's primary wallet.
         */
        public Builder web3Wallet(List<String> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = Optional.ofNullable(web3Wallet);
            return this;
        }

        /**
         * Web3 wallets to add to the user.
         * Must be unique across your instance.
         * The first wallet will be set as the user's primary wallet.
         */
        public Builder web3Wallet(Optional<? extends List<String>> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = web3Wallet;
            return this;
        }

        /**
         * The username to give to the user.
         * It must be unique across your instance.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = JsonNullable.of(username);
            return this;
        }

        /**
         * The username to give to the user.
         * It must be unique across your instance.
         */
        public Builder username(JsonNullable<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        /**
         * The plaintext password to give the user.
         * Must be at least 8 characters long, and can not be in any list of hacked passwords.
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = JsonNullable.of(password);
            return this;
        }

        /**
         * The plaintext password to give the user.
         * Must be at least 8 characters long, and can not be in any list of hacked passwords.
         */
        public Builder password(JsonNullable<String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
         * The digests should be generated with one of the supported algorithms.
         * The hashing algorithm can be specified using the `password_hasher` property.
         */
        public Builder passwordDigest(String passwordDigest) {
            Utils.checkNotNull(passwordDigest, "passwordDigest");
            this.passwordDigest = Optional.ofNullable(passwordDigest);
            return this;
        }

        /**
         * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
         * The digests should be generated with one of the supported algorithms.
         * The hashing algorithm can be specified using the `password_hasher` property.
         */
        public Builder passwordDigest(Optional<String> passwordDigest) {
            Utils.checkNotNull(passwordDigest, "passwordDigest");
            this.passwordDigest = passwordDigest;
            return this;
        }

        /**
         * The hashing algorithm that was used to generate the password digest.
         * 
         * The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
         * [`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),
         * [`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),
         * and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.
         * 
         * Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.
         */
        public Builder passwordHasher(String passwordHasher) {
            Utils.checkNotNull(passwordHasher, "passwordHasher");
            this.passwordHasher = Optional.ofNullable(passwordHasher);
            return this;
        }

        /**
         * The hashing algorithm that was used to generate the password digest.
         * 
         * The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
         * [`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),
         * [`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),
         * and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.
         * 
         * Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.
         */
        public Builder passwordHasher(Optional<String> passwordHasher) {
            Utils.checkNotNull(passwordHasher, "passwordHasher");
            this.passwordHasher = passwordHasher;
            return this;
        }

        /**
         * When set to `true` all password checks are skipped.
         * It is recommended to use this method only when migrating plaintext passwords to Clerk.
         * Upon migration the user base should be prompted to pick stronger password.
         */
        public Builder skipPasswordChecks(boolean skipPasswordChecks) {
            Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
            this.skipPasswordChecks = Optional.ofNullable(skipPasswordChecks);
            return this;
        }

        /**
         * When set to `true` all password checks are skipped.
         * It is recommended to use this method only when migrating plaintext passwords to Clerk.
         * Upon migration the user base should be prompted to pick stronger password.
         */
        public Builder skipPasswordChecks(Optional<Boolean> skipPasswordChecks) {
            Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
            this.skipPasswordChecks = skipPasswordChecks;
            return this;
        }

        /**
         * When set to `true`, `password` is not required anymore when creating the user and can be omitted.
         * This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords.
         * Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
         */
        public Builder skipPasswordRequirement(boolean skipPasswordRequirement) {
            Utils.checkNotNull(skipPasswordRequirement, "skipPasswordRequirement");
            this.skipPasswordRequirement = Optional.ofNullable(skipPasswordRequirement);
            return this;
        }

        /**
         * When set to `true`, `password` is not required anymore when creating the user and can be omitted.
         * This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords.
         * Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
         */
        public Builder skipPasswordRequirement(Optional<Boolean> skipPasswordRequirement) {
            Utils.checkNotNull(skipPasswordRequirement, "skipPasswordRequirement");
            this.skipPasswordRequirement = skipPasswordRequirement;
            return this;
        }

        /**
         * In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.
         * Please note that currently the supported options are:
         * * Period: 30 seconds
         * * Code length: 6 digits
         * * Algorithm: SHA1
         */
        public Builder totpSecret(String totpSecret) {
            Utils.checkNotNull(totpSecret, "totpSecret");
            this.totpSecret = Optional.ofNullable(totpSecret);
            return this;
        }

        /**
         * In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.
         * Please note that currently the supported options are:
         * * Period: 30 seconds
         * * Code length: 6 digits
         * * Algorithm: SHA1
         */
        public Builder totpSecret(Optional<String> totpSecret) {
            Utils.checkNotNull(totpSecret, "totpSecret");
            this.totpSecret = totpSecret;
            return this;
        }

        /**
         * If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.
         * You must provide the backup codes in plain format or the corresponding bcrypt digest.
         */
        public Builder backupCodes(List<String> backupCodes) {
            Utils.checkNotNull(backupCodes, "backupCodes");
            this.backupCodes = Optional.ofNullable(backupCodes);
            return this;
        }

        /**
         * If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.
         * You must provide the backup codes in plain format or the corresponding bcrypt digest.
         */
        public Builder backupCodes(Optional<? extends List<String>> backupCodes) {
            Utils.checkNotNull(backupCodes, "backupCodes");
            this.backupCodes = backupCodes;
            return this;
        }

        /**
         * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
         */
        public Builder publicMetadata(PublicMetadata publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        /**
         * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
         */
        public Builder publicMetadata(Optional<? extends PublicMetadata> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        /**
         * Metadata saved on the user, that is only visible to your Backend API
         */
        public Builder privateMetadata(PrivateMetadata privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        /**
         * Metadata saved on the user, that is only visible to your Backend API
         */
        public Builder privateMetadata(Optional<? extends PrivateMetadata> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }

        /**
         * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
         * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
         */
        public Builder unsafeMetadata(UnsafeMetadata unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
            return this;
        }

        /**
         * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
         * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
         */
        public Builder unsafeMetadata(Optional<? extends UnsafeMetadata> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = unsafeMetadata;
            return this;
        }

        /**
         * If enabled, user can delete themselves via FAPI.
         * 
         */
        public Builder deleteSelfEnabled(boolean deleteSelfEnabled) {
            Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
            this.deleteSelfEnabled = JsonNullable.of(deleteSelfEnabled);
            return this;
        }

        /**
         * If enabled, user can delete themselves via FAPI.
         * 
         */
        public Builder deleteSelfEnabled(JsonNullable<Boolean> deleteSelfEnabled) {
            Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
            this.deleteSelfEnabled = deleteSelfEnabled;
            return this;
        }

        /**
         * A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
         */
        public Builder legalAcceptedAt(String legalAcceptedAt) {
            Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
            this.legalAcceptedAt = JsonNullable.of(legalAcceptedAt);
            return this;
        }

        /**
         * A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
         */
        public Builder legalAcceptedAt(JsonNullable<String> legalAcceptedAt) {
            Utils.checkNotNull(legalAcceptedAt, "legalAcceptedAt");
            this.legalAcceptedAt = legalAcceptedAt;
            return this;
        }

        /**
         * When set to `true` all legal checks are skipped.
         * It is not recommended to skip legal checks unless you are migrating a user to Clerk.
         */
        public Builder skipLegalChecks(boolean skipLegalChecks) {
            Utils.checkNotNull(skipLegalChecks, "skipLegalChecks");
            this.skipLegalChecks = JsonNullable.of(skipLegalChecks);
            return this;
        }

        /**
         * When set to `true` all legal checks are skipped.
         * It is not recommended to skip legal checks unless you are migrating a user to Clerk.
         */
        public Builder skipLegalChecks(JsonNullable<Boolean> skipLegalChecks) {
            Utils.checkNotNull(skipLegalChecks, "skipLegalChecks");
            this.skipLegalChecks = skipLegalChecks;
            return this;
        }

        /**
         * If enabled, user can create organizations via FAPI.
         * 
         */
        public Builder createOrganizationEnabled(boolean createOrganizationEnabled) {
            Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
            this.createOrganizationEnabled = JsonNullable.of(createOrganizationEnabled);
            return this;
        }

        /**
         * If enabled, user can create organizations via FAPI.
         * 
         */
        public Builder createOrganizationEnabled(JsonNullable<Boolean> createOrganizationEnabled) {
            Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
            this.createOrganizationEnabled = createOrganizationEnabled;
            return this;
        }

        /**
         * The maximum number of organizations the user can create. 0 means unlimited.
         * 
         */
        public Builder createOrganizationsLimit(long createOrganizationsLimit) {
            Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
            this.createOrganizationsLimit = JsonNullable.of(createOrganizationsLimit);
            return this;
        }

        /**
         * The maximum number of organizations the user can create. 0 means unlimited.
         * 
         */
        public Builder createOrganizationsLimit(JsonNullable<Long> createOrganizationsLimit) {
            Utils.checkNotNull(createOrganizationsLimit, "createOrganizationsLimit");
            this.createOrganizationsLimit = createOrganizationsLimit;
            return this;
        }

        /**
         * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public CreateUserRequestBody build() {
            return new CreateUserRequestBody(
                externalId,
                firstName,
                lastName,
                emailAddress,
                phoneNumber,
                web3Wallet,
                username,
                password,
                passwordDigest,
                passwordHasher,
                skipPasswordChecks,
                skipPasswordRequirement,
                totpSecret,
                backupCodes,
                publicMetadata,
                privateMetadata,
                unsafeMetadata,
                deleteSelfEnabled,
                legalAcceptedAt,
                skipLegalChecks,
                createOrganizationEnabled,
                createOrganizationsLimit,
                createdAt);
        }
    }
}

