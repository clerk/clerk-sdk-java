/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateWaitlistEntryRequestBody {
    /**
     * The email address to add to the waitlist
     */
    @JsonProperty("email_address")
    private String emailAddress;

    /**
     * Optional flag which denotes whether a confirmation email should be sent to the given email address.
     * Defaults to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notify")
    private JsonNullable<Boolean> notify_;

    @JsonCreator
    public CreateWaitlistEntryRequestBody(
            @JsonProperty("email_address") String emailAddress,
            @JsonProperty("notify") JsonNullable<Boolean> notify_) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(notify_, "notify_");
        this.emailAddress = emailAddress;
        this.notify_ = notify_;
    }
    
    public CreateWaitlistEntryRequestBody(
            String emailAddress) {
        this(emailAddress, JsonNullable.undefined());
    }

    /**
     * The email address to add to the waitlist
     */
    @JsonIgnore
    public String emailAddress() {
        return emailAddress;
    }

    /**
     * Optional flag which denotes whether a confirmation email should be sent to the given email address.
     * Defaults to `true`.
     */
    @JsonIgnore
    public JsonNullable<Boolean> notify_() {
        return notify_;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The email address to add to the waitlist
     */
    public CreateWaitlistEntryRequestBody withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Optional flag which denotes whether a confirmation email should be sent to the given email address.
     * Defaults to `true`.
     */
    public CreateWaitlistEntryRequestBody withNotify(boolean notify_) {
        Utils.checkNotNull(notify_, "notify_");
        this.notify_ = JsonNullable.of(notify_);
        return this;
    }

    /**
     * Optional flag which denotes whether a confirmation email should be sent to the given email address.
     * Defaults to `true`.
     */
    public CreateWaitlistEntryRequestBody withNotify(JsonNullable<Boolean> notify_) {
        Utils.checkNotNull(notify_, "notify_");
        this.notify_ = notify_;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWaitlistEntryRequestBody other = (CreateWaitlistEntryRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress) &&
            Utils.enhancedDeepEquals(this.notify_, other.notify_);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            emailAddress, notify_);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWaitlistEntryRequestBody.class,
                "emailAddress", emailAddress,
                "notify_", notify_);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String emailAddress;

        private JsonNullable<Boolean> notify_;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The email address to add to the waitlist
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }


        /**
         * Optional flag which denotes whether a confirmation email should be sent to the given email address.
         * Defaults to `true`.
         */
        public Builder notify_(boolean notify_) {
            Utils.checkNotNull(notify_, "notify_");
            this.notify_ = JsonNullable.of(notify_);
            return this;
        }

        /**
         * Optional flag which denotes whether a confirmation email should be sent to the given email address.
         * Defaults to `true`.
         */
        public Builder notify_(JsonNullable<Boolean> notify_) {
            Utils.checkNotNull(notify_, "notify_");
            this.notify_ = notify_;
            return this;
        }

        public CreateWaitlistEntryRequestBody build() {
            if (notify_ == null) {
                notify_ = _SINGLETON_VALUE_Notify.value();
            }

            return new CreateWaitlistEntryRequestBody(
                emailAddress, notify_);
        }


        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Notify =
                new LazySingletonValue<>(
                        "notify",
                        "true",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}
