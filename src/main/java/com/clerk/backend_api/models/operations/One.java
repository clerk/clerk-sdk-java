/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class One {
    /**
     * The name to use as a label for this SAML Connection
     */
    @JsonProperty("name")
    private String name;

    /**
     * The domain of your organization. Sign in flows using an email with this domain, will use this SAML
     * Connection.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonProperty("domain")
    @Deprecated
    private String domain;

    /**
     * The domains of your organization. Sign in flows using an email with one of these domains, will use
     * this SAML Connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains")
    private Optional<? extends List<String>> domains;

    /**
     * The IdP provider of the connection.
     */
    @JsonProperty("provider")
    private Provider provider;

    /**
     * The Entity ID as provided by the IdP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_entity_id")
    private JsonNullable<String> idpEntityId;

    /**
     * The Single-Sign On URL as provided by the IdP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_sso_url")
    private JsonNullable<String> idpSsoUrl;

    /**
     * The X.509 certificate as provided by the IdP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_certificate")
    private JsonNullable<String> idpCertificate;

    /**
     * The URL which serves the IdP metadata. If present, it takes priority over the corresponding
     * individual properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_metadata_url")
    private JsonNullable<String> idpMetadataUrl;

    /**
     * The XML content of the IdP metadata file. If present, it takes priority over the corresponding
     * individual properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_metadata")
    private JsonNullable<String> idpMetadata;

    /**
     * The ID of the organization to which users of this SAML Connection will be added
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_id")
    private JsonNullable<String> organizationId;

    /**
     * Define the attribute name mapping between Identity Provider and Clerk's user properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribute_mapping")
    private JsonNullable<? extends CreateSAMLConnectionRequestBodyAttributeMapping> attributeMapping;

    /**
     * Enable or deactivate ForceAuthn
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("force_authn")
    private Optional<Boolean> forceAuthn;

    @JsonCreator
    public One(
            @JsonProperty("name") String name,
            @JsonProperty("domain") String domain,
            @JsonProperty("domains") Optional<? extends List<String>> domains,
            @JsonProperty("provider") Provider provider,
            @JsonProperty("idp_entity_id") JsonNullable<String> idpEntityId,
            @JsonProperty("idp_sso_url") JsonNullable<String> idpSsoUrl,
            @JsonProperty("idp_certificate") JsonNullable<String> idpCertificate,
            @JsonProperty("idp_metadata_url") JsonNullable<String> idpMetadataUrl,
            @JsonProperty("idp_metadata") JsonNullable<String> idpMetadata,
            @JsonProperty("organization_id") JsonNullable<String> organizationId,
            @JsonProperty("attribute_mapping") JsonNullable<? extends CreateSAMLConnectionRequestBodyAttributeMapping> attributeMapping,
            @JsonProperty("force_authn") Optional<Boolean> forceAuthn) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(domains, "domains");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        Utils.checkNotNull(forceAuthn, "forceAuthn");
        this.name = name;
        this.domain = domain;
        this.domains = domains;
        this.provider = provider;
        this.idpEntityId = idpEntityId;
        this.idpSsoUrl = idpSsoUrl;
        this.idpCertificate = idpCertificate;
        this.idpMetadataUrl = idpMetadataUrl;
        this.idpMetadata = idpMetadata;
        this.organizationId = organizationId;
        this.attributeMapping = attributeMapping;
        this.forceAuthn = forceAuthn;
    }
    
    public One(
            String name,
            String domain,
            Provider provider) {
        this(name, domain, Optional.empty(),
            provider, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The name to use as a label for this SAML Connection
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The domain of your organization. Sign in flows using an email with this domain, will use this SAML
     * Connection.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public String domain() {
        return domain;
    }

    /**
     * The domains of your organization. Sign in flows using an email with one of these domains, will use
     * this SAML Connection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> domains() {
        return (Optional<List<String>>) domains;
    }

    /**
     * The IdP provider of the connection.
     */
    @JsonIgnore
    public Provider provider() {
        return provider;
    }

    /**
     * The Entity ID as provided by the IdP
     */
    @JsonIgnore
    public JsonNullable<String> idpEntityId() {
        return idpEntityId;
    }

    /**
     * The Single-Sign On URL as provided by the IdP
     */
    @JsonIgnore
    public JsonNullable<String> idpSsoUrl() {
        return idpSsoUrl;
    }

    /**
     * The X.509 certificate as provided by the IdP
     */
    @JsonIgnore
    public JsonNullable<String> idpCertificate() {
        return idpCertificate;
    }

    /**
     * The URL which serves the IdP metadata. If present, it takes priority over the corresponding
     * individual properties
     */
    @JsonIgnore
    public JsonNullable<String> idpMetadataUrl() {
        return idpMetadataUrl;
    }

    /**
     * The XML content of the IdP metadata file. If present, it takes priority over the corresponding
     * individual properties
     */
    @JsonIgnore
    public JsonNullable<String> idpMetadata() {
        return idpMetadata;
    }

    /**
     * The ID of the organization to which users of this SAML Connection will be added
     */
    @JsonIgnore
    public JsonNullable<String> organizationId() {
        return organizationId;
    }

    /**
     * Define the attribute name mapping between Identity Provider and Clerk's user properties
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateSAMLConnectionRequestBodyAttributeMapping> attributeMapping() {
        return (JsonNullable<CreateSAMLConnectionRequestBodyAttributeMapping>) attributeMapping;
    }

    /**
     * Enable or deactivate ForceAuthn
     */
    @JsonIgnore
    public Optional<Boolean> forceAuthn() {
        return forceAuthn;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name to use as a label for this SAML Connection
     */
    public One withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The domain of your organization. Sign in flows using an email with this domain, will use this SAML
     * Connection.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public One withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    /**
     * The domains of your organization. Sign in flows using an email with one of these domains, will use
     * this SAML Connection.
     */
    public One withDomains(List<String> domains) {
        Utils.checkNotNull(domains, "domains");
        this.domains = Optional.ofNullable(domains);
        return this;
    }


    /**
     * The domains of your organization. Sign in flows using an email with one of these domains, will use
     * this SAML Connection.
     */
    public One withDomains(Optional<? extends List<String>> domains) {
        Utils.checkNotNull(domains, "domains");
        this.domains = domains;
        return this;
    }

    /**
     * The IdP provider of the connection.
     */
    public One withProvider(Provider provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * The Entity ID as provided by the IdP
     */
    public One withIdpEntityId(String idpEntityId) {
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        this.idpEntityId = JsonNullable.of(idpEntityId);
        return this;
    }

    /**
     * The Entity ID as provided by the IdP
     */
    public One withIdpEntityId(JsonNullable<String> idpEntityId) {
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        this.idpEntityId = idpEntityId;
        return this;
    }

    /**
     * The Single-Sign On URL as provided by the IdP
     */
    public One withIdpSsoUrl(String idpSsoUrl) {
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        this.idpSsoUrl = JsonNullable.of(idpSsoUrl);
        return this;
    }

    /**
     * The Single-Sign On URL as provided by the IdP
     */
    public One withIdpSsoUrl(JsonNullable<String> idpSsoUrl) {
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        this.idpSsoUrl = idpSsoUrl;
        return this;
    }

    /**
     * The X.509 certificate as provided by the IdP
     */
    public One withIdpCertificate(String idpCertificate) {
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        this.idpCertificate = JsonNullable.of(idpCertificate);
        return this;
    }

    /**
     * The X.509 certificate as provided by the IdP
     */
    public One withIdpCertificate(JsonNullable<String> idpCertificate) {
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        this.idpCertificate = idpCertificate;
        return this;
    }

    /**
     * The URL which serves the IdP metadata. If present, it takes priority over the corresponding
     * individual properties
     */
    public One withIdpMetadataUrl(String idpMetadataUrl) {
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        this.idpMetadataUrl = JsonNullable.of(idpMetadataUrl);
        return this;
    }

    /**
     * The URL which serves the IdP metadata. If present, it takes priority over the corresponding
     * individual properties
     */
    public One withIdpMetadataUrl(JsonNullable<String> idpMetadataUrl) {
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        this.idpMetadataUrl = idpMetadataUrl;
        return this;
    }

    /**
     * The XML content of the IdP metadata file. If present, it takes priority over the corresponding
     * individual properties
     */
    public One withIdpMetadata(String idpMetadata) {
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        this.idpMetadata = JsonNullable.of(idpMetadata);
        return this;
    }

    /**
     * The XML content of the IdP metadata file. If present, it takes priority over the corresponding
     * individual properties
     */
    public One withIdpMetadata(JsonNullable<String> idpMetadata) {
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        this.idpMetadata = idpMetadata;
        return this;
    }

    /**
     * The ID of the organization to which users of this SAML Connection will be added
     */
    public One withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = JsonNullable.of(organizationId);
        return this;
    }

    /**
     * The ID of the organization to which users of this SAML Connection will be added
     */
    public One withOrganizationId(JsonNullable<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Define the attribute name mapping between Identity Provider and Clerk's user properties
     */
    public One withAttributeMapping(CreateSAMLConnectionRequestBodyAttributeMapping attributeMapping) {
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        this.attributeMapping = JsonNullable.of(attributeMapping);
        return this;
    }

    /**
     * Define the attribute name mapping between Identity Provider and Clerk's user properties
     */
    public One withAttributeMapping(JsonNullable<? extends CreateSAMLConnectionRequestBodyAttributeMapping> attributeMapping) {
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        this.attributeMapping = attributeMapping;
        return this;
    }

    /**
     * Enable or deactivate ForceAuthn
     */
    public One withForceAuthn(boolean forceAuthn) {
        Utils.checkNotNull(forceAuthn, "forceAuthn");
        this.forceAuthn = Optional.ofNullable(forceAuthn);
        return this;
    }


    /**
     * Enable or deactivate ForceAuthn
     */
    public One withForceAuthn(Optional<Boolean> forceAuthn) {
        Utils.checkNotNull(forceAuthn, "forceAuthn");
        this.forceAuthn = forceAuthn;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        One other = (One) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.domain, other.domain) &&
            Utils.enhancedDeepEquals(this.domains, other.domains) &&
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.idpEntityId, other.idpEntityId) &&
            Utils.enhancedDeepEquals(this.idpSsoUrl, other.idpSsoUrl) &&
            Utils.enhancedDeepEquals(this.idpCertificate, other.idpCertificate) &&
            Utils.enhancedDeepEquals(this.idpMetadataUrl, other.idpMetadataUrl) &&
            Utils.enhancedDeepEquals(this.idpMetadata, other.idpMetadata) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.attributeMapping, other.attributeMapping) &&
            Utils.enhancedDeepEquals(this.forceAuthn, other.forceAuthn);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, domain, domains,
            provider, idpEntityId, idpSsoUrl,
            idpCertificate, idpMetadataUrl, idpMetadata,
            organizationId, attributeMapping, forceAuthn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(One.class,
                "name", name,
                "domain", domain,
                "domains", domains,
                "provider", provider,
                "idpEntityId", idpEntityId,
                "idpSsoUrl", idpSsoUrl,
                "idpCertificate", idpCertificate,
                "idpMetadataUrl", idpMetadataUrl,
                "idpMetadata", idpMetadata,
                "organizationId", organizationId,
                "attributeMapping", attributeMapping,
                "forceAuthn", forceAuthn);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        @Deprecated
        private String domain;

        private Optional<? extends List<String>> domains = Optional.empty();

        private Provider provider;

        private JsonNullable<String> idpEntityId = JsonNullable.undefined();

        private JsonNullable<String> idpSsoUrl = JsonNullable.undefined();

        private JsonNullable<String> idpCertificate = JsonNullable.undefined();

        private JsonNullable<String> idpMetadataUrl = JsonNullable.undefined();

        private JsonNullable<String> idpMetadata = JsonNullable.undefined();

        private JsonNullable<String> organizationId = JsonNullable.undefined();

        private JsonNullable<? extends CreateSAMLConnectionRequestBodyAttributeMapping> attributeMapping = JsonNullable.undefined();

        private Optional<Boolean> forceAuthn = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name to use as a label for this SAML Connection
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The domain of your organization. Sign in flows using an email with this domain, will use this SAML
         * Connection.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }


        /**
         * The domains of your organization. Sign in flows using an email with one of these domains, will use
         * this SAML Connection.
         */
        public Builder domains(List<String> domains) {
            Utils.checkNotNull(domains, "domains");
            this.domains = Optional.ofNullable(domains);
            return this;
        }

        /**
         * The domains of your organization. Sign in flows using an email with one of these domains, will use
         * this SAML Connection.
         */
        public Builder domains(Optional<? extends List<String>> domains) {
            Utils.checkNotNull(domains, "domains");
            this.domains = domains;
            return this;
        }


        /**
         * The IdP provider of the connection.
         */
        public Builder provider(Provider provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        /**
         * The Entity ID as provided by the IdP
         */
        public Builder idpEntityId(String idpEntityId) {
            Utils.checkNotNull(idpEntityId, "idpEntityId");
            this.idpEntityId = JsonNullable.of(idpEntityId);
            return this;
        }

        /**
         * The Entity ID as provided by the IdP
         */
        public Builder idpEntityId(JsonNullable<String> idpEntityId) {
            Utils.checkNotNull(idpEntityId, "idpEntityId");
            this.idpEntityId = idpEntityId;
            return this;
        }


        /**
         * The Single-Sign On URL as provided by the IdP
         */
        public Builder idpSsoUrl(String idpSsoUrl) {
            Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
            this.idpSsoUrl = JsonNullable.of(idpSsoUrl);
            return this;
        }

        /**
         * The Single-Sign On URL as provided by the IdP
         */
        public Builder idpSsoUrl(JsonNullable<String> idpSsoUrl) {
            Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
            this.idpSsoUrl = idpSsoUrl;
            return this;
        }


        /**
         * The X.509 certificate as provided by the IdP
         */
        public Builder idpCertificate(String idpCertificate) {
            Utils.checkNotNull(idpCertificate, "idpCertificate");
            this.idpCertificate = JsonNullable.of(idpCertificate);
            return this;
        }

        /**
         * The X.509 certificate as provided by the IdP
         */
        public Builder idpCertificate(JsonNullable<String> idpCertificate) {
            Utils.checkNotNull(idpCertificate, "idpCertificate");
            this.idpCertificate = idpCertificate;
            return this;
        }


        /**
         * The URL which serves the IdP metadata. If present, it takes priority over the corresponding
         * individual properties
         */
        public Builder idpMetadataUrl(String idpMetadataUrl) {
            Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
            this.idpMetadataUrl = JsonNullable.of(idpMetadataUrl);
            return this;
        }

        /**
         * The URL which serves the IdP metadata. If present, it takes priority over the corresponding
         * individual properties
         */
        public Builder idpMetadataUrl(JsonNullable<String> idpMetadataUrl) {
            Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
            this.idpMetadataUrl = idpMetadataUrl;
            return this;
        }


        /**
         * The XML content of the IdP metadata file. If present, it takes priority over the corresponding
         * individual properties
         */
        public Builder idpMetadata(String idpMetadata) {
            Utils.checkNotNull(idpMetadata, "idpMetadata");
            this.idpMetadata = JsonNullable.of(idpMetadata);
            return this;
        }

        /**
         * The XML content of the IdP metadata file. If present, it takes priority over the corresponding
         * individual properties
         */
        public Builder idpMetadata(JsonNullable<String> idpMetadata) {
            Utils.checkNotNull(idpMetadata, "idpMetadata");
            this.idpMetadata = idpMetadata;
            return this;
        }


        /**
         * The ID of the organization to which users of this SAML Connection will be added
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = JsonNullable.of(organizationId);
            return this;
        }

        /**
         * The ID of the organization to which users of this SAML Connection will be added
         */
        public Builder organizationId(JsonNullable<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * Define the attribute name mapping between Identity Provider and Clerk's user properties
         */
        public Builder attributeMapping(CreateSAMLConnectionRequestBodyAttributeMapping attributeMapping) {
            Utils.checkNotNull(attributeMapping, "attributeMapping");
            this.attributeMapping = JsonNullable.of(attributeMapping);
            return this;
        }

        /**
         * Define the attribute name mapping between Identity Provider and Clerk's user properties
         */
        public Builder attributeMapping(JsonNullable<? extends CreateSAMLConnectionRequestBodyAttributeMapping> attributeMapping) {
            Utils.checkNotNull(attributeMapping, "attributeMapping");
            this.attributeMapping = attributeMapping;
            return this;
        }


        /**
         * Enable or deactivate ForceAuthn
         */
        public Builder forceAuthn(boolean forceAuthn) {
            Utils.checkNotNull(forceAuthn, "forceAuthn");
            this.forceAuthn = Optional.ofNullable(forceAuthn);
            return this;
        }

        /**
         * Enable or deactivate ForceAuthn
         */
        public Builder forceAuthn(Optional<Boolean> forceAuthn) {
            Utils.checkNotNull(forceAuthn, "forceAuthn");
            this.forceAuthn = forceAuthn;
            return this;
        }

        public One build() {

            return new One(
                name, domain, domains,
                provider, idpEntityId, idpSsoUrl,
                idpCertificate, idpMetadataUrl, idpMetadata,
                organizationId, attributeMapping, forceAuthn);
        }

    }
}
