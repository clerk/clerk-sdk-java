/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateJWTTemplateRequestBody {
    /**
     * JWT template name
     */
    @JsonProperty("name")
    private String name;

    /**
     * JWT template claims in JSON format
     */
    @JsonProperty("claims")
    private UpdateJWTTemplateClaims claims;

    /**
     * JWT token lifetime
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifetime")
    private JsonNullable<Double> lifetime;

    /**
     * JWT token allowed clock skew
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_clock_skew")
    private JsonNullable<Double> allowedClockSkew;

    /**
     * Whether a custom signing key/algorithm is also provided for this template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_signing_key")
    private Optional<Boolean> customSigningKey;

    /**
     * The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signing_algorithm")
    private JsonNullable<String> signingAlgorithm;

    /**
     * The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signing_key")
    private JsonNullable<String> signingKey;

    @JsonCreator
    public UpdateJWTTemplateRequestBody(
            @JsonProperty("name") String name,
            @JsonProperty("claims") UpdateJWTTemplateClaims claims,
            @JsonProperty("lifetime") JsonNullable<Double> lifetime,
            @JsonProperty("allowed_clock_skew") JsonNullable<Double> allowedClockSkew,
            @JsonProperty("custom_signing_key") Optional<Boolean> customSigningKey,
            @JsonProperty("signing_algorithm") JsonNullable<String> signingAlgorithm,
            @JsonProperty("signing_key") JsonNullable<String> signingKey) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(claims, "claims");
        Utils.checkNotNull(lifetime, "lifetime");
        Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
        Utils.checkNotNull(customSigningKey, "customSigningKey");
        Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
        Utils.checkNotNull(signingKey, "signingKey");
        this.name = name;
        this.claims = claims;
        this.lifetime = lifetime;
        this.allowedClockSkew = allowedClockSkew;
        this.customSigningKey = customSigningKey;
        this.signingAlgorithm = signingAlgorithm;
        this.signingKey = signingKey;
    }
    
    public UpdateJWTTemplateRequestBody(
            String name,
            UpdateJWTTemplateClaims claims) {
        this(name, claims, JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * JWT template name
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * JWT template claims in JSON format
     */
    @JsonIgnore
    public UpdateJWTTemplateClaims claims() {
        return claims;
    }

    /**
     * JWT token lifetime
     */
    @JsonIgnore
    public JsonNullable<Double> lifetime() {
        return lifetime;
    }

    /**
     * JWT token allowed clock skew
     */
    @JsonIgnore
    public JsonNullable<Double> allowedClockSkew() {
        return allowedClockSkew;
    }

    /**
     * Whether a custom signing key/algorithm is also provided for this template
     */
    @JsonIgnore
    public Optional<Boolean> customSigningKey() {
        return customSigningKey;
    }

    /**
     * The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
     */
    @JsonIgnore
    public JsonNullable<String> signingAlgorithm() {
        return signingAlgorithm;
    }

    /**
     * The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
     */
    @JsonIgnore
    public JsonNullable<String> signingKey() {
        return signingKey;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * JWT template name
     */
    public UpdateJWTTemplateRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * JWT template claims in JSON format
     */
    public UpdateJWTTemplateRequestBody withClaims(UpdateJWTTemplateClaims claims) {
        Utils.checkNotNull(claims, "claims");
        this.claims = claims;
        return this;
    }

    /**
     * JWT token lifetime
     */
    public UpdateJWTTemplateRequestBody withLifetime(double lifetime) {
        Utils.checkNotNull(lifetime, "lifetime");
        this.lifetime = JsonNullable.of(lifetime);
        return this;
    }

    /**
     * JWT token lifetime
     */
    public UpdateJWTTemplateRequestBody withLifetime(JsonNullable<Double> lifetime) {
        Utils.checkNotNull(lifetime, "lifetime");
        this.lifetime = lifetime;
        return this;
    }

    /**
     * JWT token allowed clock skew
     */
    public UpdateJWTTemplateRequestBody withAllowedClockSkew(double allowedClockSkew) {
        Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
        this.allowedClockSkew = JsonNullable.of(allowedClockSkew);
        return this;
    }

    /**
     * JWT token allowed clock skew
     */
    public UpdateJWTTemplateRequestBody withAllowedClockSkew(JsonNullable<Double> allowedClockSkew) {
        Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
        this.allowedClockSkew = allowedClockSkew;
        return this;
    }

    /**
     * Whether a custom signing key/algorithm is also provided for this template
     */
    public UpdateJWTTemplateRequestBody withCustomSigningKey(boolean customSigningKey) {
        Utils.checkNotNull(customSigningKey, "customSigningKey");
        this.customSigningKey = Optional.ofNullable(customSigningKey);
        return this;
    }


    /**
     * Whether a custom signing key/algorithm is also provided for this template
     */
    public UpdateJWTTemplateRequestBody withCustomSigningKey(Optional<Boolean> customSigningKey) {
        Utils.checkNotNull(customSigningKey, "customSigningKey");
        this.customSigningKey = customSigningKey;
        return this;
    }

    /**
     * The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
     */
    public UpdateJWTTemplateRequestBody withSigningAlgorithm(String signingAlgorithm) {
        Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
        this.signingAlgorithm = JsonNullable.of(signingAlgorithm);
        return this;
    }

    /**
     * The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
     */
    public UpdateJWTTemplateRequestBody withSigningAlgorithm(JsonNullable<String> signingAlgorithm) {
        Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
        this.signingAlgorithm = signingAlgorithm;
        return this;
    }

    /**
     * The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
     */
    public UpdateJWTTemplateRequestBody withSigningKey(String signingKey) {
        Utils.checkNotNull(signingKey, "signingKey");
        this.signingKey = JsonNullable.of(signingKey);
        return this;
    }

    /**
     * The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
     */
    public UpdateJWTTemplateRequestBody withSigningKey(JsonNullable<String> signingKey) {
        Utils.checkNotNull(signingKey, "signingKey");
        this.signingKey = signingKey;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateJWTTemplateRequestBody other = (UpdateJWTTemplateRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.claims, other.claims) &&
            Utils.enhancedDeepEquals(this.lifetime, other.lifetime) &&
            Utils.enhancedDeepEquals(this.allowedClockSkew, other.allowedClockSkew) &&
            Utils.enhancedDeepEquals(this.customSigningKey, other.customSigningKey) &&
            Utils.enhancedDeepEquals(this.signingAlgorithm, other.signingAlgorithm) &&
            Utils.enhancedDeepEquals(this.signingKey, other.signingKey);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, claims, lifetime,
            allowedClockSkew, customSigningKey, signingAlgorithm,
            signingKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateJWTTemplateRequestBody.class,
                "name", name,
                "claims", claims,
                "lifetime", lifetime,
                "allowedClockSkew", allowedClockSkew,
                "customSigningKey", customSigningKey,
                "signingAlgorithm", signingAlgorithm,
                "signingKey", signingKey);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private UpdateJWTTemplateClaims claims;

        private JsonNullable<Double> lifetime = JsonNullable.undefined();

        private JsonNullable<Double> allowedClockSkew = JsonNullable.undefined();

        private Optional<Boolean> customSigningKey = Optional.empty();

        private JsonNullable<String> signingAlgorithm = JsonNullable.undefined();

        private JsonNullable<String> signingKey = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * JWT template name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * JWT template claims in JSON format
         */
        public Builder claims(UpdateJWTTemplateClaims claims) {
            Utils.checkNotNull(claims, "claims");
            this.claims = claims;
            return this;
        }


        /**
         * JWT token lifetime
         */
        public Builder lifetime(double lifetime) {
            Utils.checkNotNull(lifetime, "lifetime");
            this.lifetime = JsonNullable.of(lifetime);
            return this;
        }

        /**
         * JWT token lifetime
         */
        public Builder lifetime(JsonNullable<Double> lifetime) {
            Utils.checkNotNull(lifetime, "lifetime");
            this.lifetime = lifetime;
            return this;
        }


        /**
         * JWT token allowed clock skew
         */
        public Builder allowedClockSkew(double allowedClockSkew) {
            Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
            this.allowedClockSkew = JsonNullable.of(allowedClockSkew);
            return this;
        }

        /**
         * JWT token allowed clock skew
         */
        public Builder allowedClockSkew(JsonNullable<Double> allowedClockSkew) {
            Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
            this.allowedClockSkew = allowedClockSkew;
            return this;
        }


        /**
         * Whether a custom signing key/algorithm is also provided for this template
         */
        public Builder customSigningKey(boolean customSigningKey) {
            Utils.checkNotNull(customSigningKey, "customSigningKey");
            this.customSigningKey = Optional.ofNullable(customSigningKey);
            return this;
        }

        /**
         * Whether a custom signing key/algorithm is also provided for this template
         */
        public Builder customSigningKey(Optional<Boolean> customSigningKey) {
            Utils.checkNotNull(customSigningKey, "customSigningKey");
            this.customSigningKey = customSigningKey;
            return this;
        }


        /**
         * The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
         */
        public Builder signingAlgorithm(String signingAlgorithm) {
            Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
            this.signingAlgorithm = JsonNullable.of(signingAlgorithm);
            return this;
        }

        /**
         * The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
         */
        public Builder signingAlgorithm(JsonNullable<String> signingAlgorithm) {
            Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
            this.signingAlgorithm = signingAlgorithm;
            return this;
        }


        /**
         * The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
         */
        public Builder signingKey(String signingKey) {
            Utils.checkNotNull(signingKey, "signingKey");
            this.signingKey = JsonNullable.of(signingKey);
            return this;
        }

        /**
         * The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
         */
        public Builder signingKey(JsonNullable<String> signingKey) {
            Utils.checkNotNull(signingKey, "signingKey");
            this.signingKey = signingKey;
            return this;
        }

        public UpdateJWTTemplateRequestBody build() {

            return new UpdateJWTTemplateRequestBody(
                name, claims, lifetime,
                allowedClockSkew, customSigningKey, signingAlgorithm,
                signingKey);
        }

    }
}
