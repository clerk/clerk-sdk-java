/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateOrganizationRequestBody {

    /**
     * Metadata saved on the organization, that is visible to both your frontend and backend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends UpdateOrganizationPublicMetadata> publicMetadata;

    /**
     * Metadata saved on the organization that is only visible to your backend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends UpdateOrganizationPrivateMetadata> privateMetadata;

    /**
     * The new name of the organization.
     * May not contain URLs or HTML.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The new slug of the organization, which needs to be unique in the instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private JsonNullable<String> slug;

    /**
     * The maximum number of memberships allowed for this organization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_allowed_memberships")
    private JsonNullable<Long> maxAllowedMemberships;

    /**
     * If true, an admin can delete this organization with the Frontend API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin_delete_enabled")
    private JsonNullable<Boolean> adminDeleteEnabled;

    /**
     * A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<String> createdAt;

    @JsonCreator
    public UpdateOrganizationRequestBody(
            @JsonProperty("public_metadata") Optional<? extends UpdateOrganizationPublicMetadata> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends UpdateOrganizationPrivateMetadata> privateMetadata,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("slug") JsonNullable<String> slug,
            @JsonProperty("max_allowed_memberships") JsonNullable<Long> maxAllowedMemberships,
            @JsonProperty("admin_delete_enabled") JsonNullable<Boolean> adminDeleteEnabled,
            @JsonProperty("created_at") Optional<String> createdAt) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        Utils.checkNotNull(createdAt, "createdAt");
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.name = name;
        this.slug = slug;
        this.maxAllowedMemberships = maxAllowedMemberships;
        this.adminDeleteEnabled = adminDeleteEnabled;
        this.createdAt = createdAt;
    }
    
    public UpdateOrganizationRequestBody() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Metadata saved on the organization, that is visible to both your frontend and backend.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateOrganizationPublicMetadata> publicMetadata() {
        return (Optional<UpdateOrganizationPublicMetadata>) publicMetadata;
    }

    /**
     * Metadata saved on the organization that is only visible to your backend.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateOrganizationPrivateMetadata> privateMetadata() {
        return (Optional<UpdateOrganizationPrivateMetadata>) privateMetadata;
    }

    /**
     * The new name of the organization.
     * May not contain URLs or HTML.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The new slug of the organization, which needs to be unique in the instance
     */
    @JsonIgnore
    public JsonNullable<String> slug() {
        return slug;
    }

    /**
     * The maximum number of memberships allowed for this organization
     */
    @JsonIgnore
    public JsonNullable<Long> maxAllowedMemberships() {
        return maxAllowedMemberships;
    }

    /**
     * If true, an admin can delete this organization with the Frontend API.
     */
    @JsonIgnore
    public JsonNullable<Boolean> adminDeleteEnabled() {
        return adminDeleteEnabled;
    }

    /**
     * A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Metadata saved on the organization, that is visible to both your frontend and backend.
     */
    public UpdateOrganizationRequestBody withPublicMetadata(UpdateOrganizationPublicMetadata publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    /**
     * Metadata saved on the organization, that is visible to both your frontend and backend.
     */
    public UpdateOrganizationRequestBody withPublicMetadata(Optional<? extends UpdateOrganizationPublicMetadata> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    /**
     * Metadata saved on the organization that is only visible to your backend.
     */
    public UpdateOrganizationRequestBody withPrivateMetadata(UpdateOrganizationPrivateMetadata privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }

    /**
     * Metadata saved on the organization that is only visible to your backend.
     */
    public UpdateOrganizationRequestBody withPrivateMetadata(Optional<? extends UpdateOrganizationPrivateMetadata> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    /**
     * The new name of the organization.
     * May not contain URLs or HTML.
     */
    public UpdateOrganizationRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The new name of the organization.
     * May not contain URLs or HTML.
     */
    public UpdateOrganizationRequestBody withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The new slug of the organization, which needs to be unique in the instance
     */
    public UpdateOrganizationRequestBody withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = JsonNullable.of(slug);
        return this;
    }

    /**
     * The new slug of the organization, which needs to be unique in the instance
     */
    public UpdateOrganizationRequestBody withSlug(JsonNullable<String> slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * The maximum number of memberships allowed for this organization
     */
    public UpdateOrganizationRequestBody withMaxAllowedMemberships(long maxAllowedMemberships) {
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        this.maxAllowedMemberships = JsonNullable.of(maxAllowedMemberships);
        return this;
    }

    /**
     * The maximum number of memberships allowed for this organization
     */
    public UpdateOrganizationRequestBody withMaxAllowedMemberships(JsonNullable<Long> maxAllowedMemberships) {
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        this.maxAllowedMemberships = maxAllowedMemberships;
        return this;
    }

    /**
     * If true, an admin can delete this organization with the Frontend API.
     */
    public UpdateOrganizationRequestBody withAdminDeleteEnabled(boolean adminDeleteEnabled) {
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        this.adminDeleteEnabled = JsonNullable.of(adminDeleteEnabled);
        return this;
    }

    /**
     * If true, an admin can delete this organization with the Frontend API.
     */
    public UpdateOrganizationRequestBody withAdminDeleteEnabled(JsonNullable<Boolean> adminDeleteEnabled) {
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        this.adminDeleteEnabled = adminDeleteEnabled;
        return this;
    }

    /**
     * A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    public UpdateOrganizationRequestBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    public UpdateOrganizationRequestBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateOrganizationRequestBody other = (UpdateOrganizationRequestBody) o;
        return 
            Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            Objects.deepEquals(this.privateMetadata, other.privateMetadata) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.slug, other.slug) &&
            Objects.deepEquals(this.maxAllowedMemberships, other.maxAllowedMemberships) &&
            Objects.deepEquals(this.adminDeleteEnabled, other.adminDeleteEnabled) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            publicMetadata,
            privateMetadata,
            name,
            slug,
            maxAllowedMemberships,
            adminDeleteEnabled,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateOrganizationRequestBody.class,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "name", name,
                "slug", slug,
                "maxAllowedMemberships", maxAllowedMemberships,
                "adminDeleteEnabled", adminDeleteEnabled,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends UpdateOrganizationPublicMetadata> publicMetadata = Optional.empty();
 
        private Optional<? extends UpdateOrganizationPrivateMetadata> privateMetadata = Optional.empty();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> slug = JsonNullable.undefined();
 
        private JsonNullable<Long> maxAllowedMemberships = JsonNullable.undefined();
 
        private JsonNullable<Boolean> adminDeleteEnabled = JsonNullable.undefined();
 
        private Optional<String> createdAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Metadata saved on the organization, that is visible to both your frontend and backend.
         */
        public Builder publicMetadata(UpdateOrganizationPublicMetadata publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        /**
         * Metadata saved on the organization, that is visible to both your frontend and backend.
         */
        public Builder publicMetadata(Optional<? extends UpdateOrganizationPublicMetadata> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        /**
         * Metadata saved on the organization that is only visible to your backend.
         */
        public Builder privateMetadata(UpdateOrganizationPrivateMetadata privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        /**
         * Metadata saved on the organization that is only visible to your backend.
         */
        public Builder privateMetadata(Optional<? extends UpdateOrganizationPrivateMetadata> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }

        /**
         * The new name of the organization.
         * May not contain URLs or HTML.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The new name of the organization.
         * May not contain URLs or HTML.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The new slug of the organization, which needs to be unique in the instance
         */
        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = JsonNullable.of(slug);
            return this;
        }

        /**
         * The new slug of the organization, which needs to be unique in the instance
         */
        public Builder slug(JsonNullable<String> slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        /**
         * The maximum number of memberships allowed for this organization
         */
        public Builder maxAllowedMemberships(long maxAllowedMemberships) {
            Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
            this.maxAllowedMemberships = JsonNullable.of(maxAllowedMemberships);
            return this;
        }

        /**
         * The maximum number of memberships allowed for this organization
         */
        public Builder maxAllowedMemberships(JsonNullable<Long> maxAllowedMemberships) {
            Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
            this.maxAllowedMemberships = maxAllowedMemberships;
            return this;
        }

        /**
         * If true, an admin can delete this organization with the Frontend API.
         */
        public Builder adminDeleteEnabled(boolean adminDeleteEnabled) {
            Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
            this.adminDeleteEnabled = JsonNullable.of(adminDeleteEnabled);
            return this;
        }

        /**
         * If true, an admin can delete this organization with the Frontend API.
         */
        public Builder adminDeleteEnabled(JsonNullable<Boolean> adminDeleteEnabled) {
            Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
            this.adminDeleteEnabled = adminDeleteEnabled;
            return this;
        }

        /**
         * A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public UpdateOrganizationRequestBody build() {
            return new UpdateOrganizationRequestBody(
                publicMetadata,
                privateMetadata,
                name,
                slug,
                maxAllowedMemberships,
                adminDeleteEnabled,
                createdAt);
        }
    }
}

