/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ToggleTemplateDeliveryRequestBody {

    /**
     * Whether Clerk should deliver emails or SMS messages based on the current template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivered_by_clerk")
    private Optional<Boolean> deliveredByClerk;

    @JsonCreator
    public ToggleTemplateDeliveryRequestBody(
            @JsonProperty("delivered_by_clerk") Optional<Boolean> deliveredByClerk) {
        Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
        this.deliveredByClerk = deliveredByClerk;
    }
    
    public ToggleTemplateDeliveryRequestBody() {
        this(Optional.empty());
    }

    /**
     * Whether Clerk should deliver emails or SMS messages based on the current template
     */
    @JsonIgnore
    public Optional<Boolean> deliveredByClerk() {
        return deliveredByClerk;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether Clerk should deliver emails or SMS messages based on the current template
     */
    public ToggleTemplateDeliveryRequestBody withDeliveredByClerk(boolean deliveredByClerk) {
        Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
        this.deliveredByClerk = Optional.ofNullable(deliveredByClerk);
        return this;
    }

    /**
     * Whether Clerk should deliver emails or SMS messages based on the current template
     */
    public ToggleTemplateDeliveryRequestBody withDeliveredByClerk(Optional<Boolean> deliveredByClerk) {
        Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
        this.deliveredByClerk = deliveredByClerk;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ToggleTemplateDeliveryRequestBody other = (ToggleTemplateDeliveryRequestBody) o;
        return 
            Objects.deepEquals(this.deliveredByClerk, other.deliveredByClerk);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            deliveredByClerk);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ToggleTemplateDeliveryRequestBody.class,
                "deliveredByClerk", deliveredByClerk);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> deliveredByClerk = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether Clerk should deliver emails or SMS messages based on the current template
         */
        public Builder deliveredByClerk(boolean deliveredByClerk) {
            Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
            this.deliveredByClerk = Optional.ofNullable(deliveredByClerk);
            return this;
        }

        /**
         * Whether Clerk should deliver emails or SMS messages based on the current template
         */
        public Builder deliveredByClerk(Optional<Boolean> deliveredByClerk) {
            Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
            this.deliveredByClerk = deliveredByClerk;
            return this;
        }
        
        public ToggleTemplateDeliveryRequestBody build() {
            return new ToggleTemplateDeliveryRequestBody(
                deliveredByClerk);
        }
    }
}
