/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetM2MTokensRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=subject")
    private String subject;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=revoked")
    private JsonNullable<Boolean> revoked;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=expired")
    private JsonNullable<Boolean> expired;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Double> limit;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private JsonNullable<Double> offset;

    @JsonCreator
    public GetM2MTokensRequest(
            String subject,
            JsonNullable<Boolean> revoked,
            JsonNullable<Boolean> expired,
            Optional<Double> limit,
            JsonNullable<Double> offset) {
        Utils.checkNotNull(subject, "subject");
        Utils.checkNotNull(revoked, "revoked");
        Utils.checkNotNull(expired, "expired");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        this.subject = subject;
        this.revoked = revoked;
        this.expired = expired;
        this.limit = limit;
        this.offset = offset;
    }
    
    public GetM2MTokensRequest(
            String subject) {
        this(subject, JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined());
    }

    @JsonIgnore
    public String subject() {
        return subject;
    }

    @JsonIgnore
    public JsonNullable<Boolean> revoked() {
        return revoked;
    }

    @JsonIgnore
    public JsonNullable<Boolean> expired() {
        return expired;
    }

    @JsonIgnore
    public Optional<Double> limit() {
        return limit;
    }

    @JsonIgnore
    public JsonNullable<Double> offset() {
        return offset;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GetM2MTokensRequest withSubject(String subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = subject;
        return this;
    }

    public GetM2MTokensRequest withRevoked(boolean revoked) {
        Utils.checkNotNull(revoked, "revoked");
        this.revoked = JsonNullable.of(revoked);
        return this;
    }

    public GetM2MTokensRequest withRevoked(JsonNullable<Boolean> revoked) {
        Utils.checkNotNull(revoked, "revoked");
        this.revoked = revoked;
        return this;
    }

    public GetM2MTokensRequest withExpired(boolean expired) {
        Utils.checkNotNull(expired, "expired");
        this.expired = JsonNullable.of(expired);
        return this;
    }

    public GetM2MTokensRequest withExpired(JsonNullable<Boolean> expired) {
        Utils.checkNotNull(expired, "expired");
        this.expired = expired;
        return this;
    }

    public GetM2MTokensRequest withLimit(double limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    public GetM2MTokensRequest withLimit(Optional<Double> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public GetM2MTokensRequest withOffset(double offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = JsonNullable.of(offset);
        return this;
    }

    public GetM2MTokensRequest withOffset(JsonNullable<Double> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetM2MTokensRequest other = (GetM2MTokensRequest) o;
        return 
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.revoked, other.revoked) &&
            Utils.enhancedDeepEquals(this.expired, other.expired) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.offset, other.offset);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            subject, revoked, expired,
            limit, offset);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetM2MTokensRequest.class,
                "subject", subject,
                "revoked", revoked,
                "expired", expired,
                "limit", limit,
                "offset", offset);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String subject;

        private JsonNullable<Boolean> revoked;

        private JsonNullable<Boolean> expired;

        private Optional<Double> limit;

        private JsonNullable<Double> offset;

        private Builder() {
          // force use of static builder() method
        }


        public Builder subject(String subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = subject;
            return this;
        }


        public Builder revoked(boolean revoked) {
            Utils.checkNotNull(revoked, "revoked");
            this.revoked = JsonNullable.of(revoked);
            return this;
        }

        public Builder revoked(JsonNullable<Boolean> revoked) {
            Utils.checkNotNull(revoked, "revoked");
            this.revoked = revoked;
            return this;
        }


        public Builder expired(boolean expired) {
            Utils.checkNotNull(expired, "expired");
            this.expired = JsonNullable.of(expired);
            return this;
        }

        public Builder expired(JsonNullable<Boolean> expired) {
            Utils.checkNotNull(expired, "expired");
            this.expired = expired;
            return this;
        }


        public Builder limit(double limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<Double> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        public Builder offset(double offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = JsonNullable.of(offset);
            return this;
        }

        public Builder offset(JsonNullable<Double> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }

        public GetM2MTokensRequest build() {
            if (revoked == null) {
                revoked = _SINGLETON_VALUE_Revoked.value();
            }
            if (expired == null) {
                expired = _SINGLETON_VALUE_Expired.value();
            }
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (offset == null) {
                offset = _SINGLETON_VALUE_Offset.value();
            }

            return new GetM2MTokensRequest(
                subject, revoked, expired,
                limit, offset);
        }


        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Revoked =
                new LazySingletonValue<>(
                        "revoked",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Expired =
                new LazySingletonValue<>(
                        "expired",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "10",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<JsonNullable<Double>> _SINGLETON_VALUE_Offset =
                new LazySingletonValue<>(
                        "offset",
                        "0",
                        new TypeReference<JsonNullable<Double>>() {});
    }
}
