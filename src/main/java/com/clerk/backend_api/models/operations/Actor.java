/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.clerk.backend_api.models.operations;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
/**
 * Actor - The actor payload. It needs to include a sub property which should contain the ID of the actor.
 * This whole payload will be also included in the JWT session token.
 */

public class Actor {

    /**
     * The ID of the actor.
     */
    @JsonProperty("sub")
    private String sub;

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonCreator
    public Actor(
            @JsonProperty("sub") String sub) {
        Utils.checkNotNull(sub, "sub");
        this.sub = sub;
        this.additionalProperties = new HashMap<>();
    }

    /**
     * The ID of the actor.
     */
    @JsonIgnore
    public String sub() {
        return sub;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the actor.
     */
    public Actor withSub(String sub) {
        Utils.checkNotNull(sub, "sub");
        this.sub = sub;
        return this;
    }

    @JsonAnySetter
    public Actor withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public Actor withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Actor other = (Actor) o;
        return 
            Objects.deepEquals(this.sub, other.sub) &&
            Objects.deepEquals(this.additionalProperties, other.additionalProperties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sub,
            additionalProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Actor.class,
                "sub", sub,
                "additionalProperties", additionalProperties);
    }
    
    public final static class Builder {
 
        private String sub;
 
        private Map<String, Object> additionalProperties = new HashMap<>();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the actor.
         */
        public Builder sub(String sub) {
            Utils.checkNotNull(sub, "sub");
            this.sub = sub;
            return this;
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }
        
        public Actor build() {
            return new Actor(
                sub)
                .withAdditionalProperties(additionalProperties);
        }
    }
}

