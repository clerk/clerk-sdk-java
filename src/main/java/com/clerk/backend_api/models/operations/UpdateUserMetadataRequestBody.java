/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class UpdateUserMetadataRequestBody {

    /**
     * Metadata saved on the user, that is visible to both your frontend and backend.
     * The new object will be merged with the existing value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends Map<String, Object>> publicMetadata;

    /**
     * Metadata saved on the user that is only visible to your backend.
     * The new object will be merged with the existing value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends Map<String, Object>> privateMetadata;

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * The new object will be merged with the existing value.
     * 
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unsafe_metadata")
    private Optional<? extends Map<String, Object>> unsafeMetadata;

    @JsonCreator
    public UpdateUserMetadataRequestBody(
            @JsonProperty("public_metadata") Optional<? extends Map<String, Object>> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends Map<String, Object>> privateMetadata,
            @JsonProperty("unsafe_metadata") Optional<? extends Map<String, Object>> unsafeMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.unsafeMetadata = unsafeMetadata;
    }
    
    public UpdateUserMetadataRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Metadata saved on the user, that is visible to both your frontend and backend.
     * The new object will be merged with the existing value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> publicMetadata() {
        return (Optional<Map<String, Object>>) publicMetadata;
    }

    /**
     * Metadata saved on the user that is only visible to your backend.
     * The new object will be merged with the existing value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> privateMetadata() {
        return (Optional<Map<String, Object>>) privateMetadata;
    }

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * The new object will be merged with the existing value.
     * 
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> unsafeMetadata() {
        return (Optional<Map<String, Object>>) unsafeMetadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Metadata saved on the user, that is visible to both your frontend and backend.
     * The new object will be merged with the existing value.
     */
    public UpdateUserMetadataRequestBody withPublicMetadata(Map<String, Object> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    /**
     * Metadata saved on the user, that is visible to both your frontend and backend.
     * The new object will be merged with the existing value.
     */
    public UpdateUserMetadataRequestBody withPublicMetadata(Optional<? extends Map<String, Object>> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    /**
     * Metadata saved on the user that is only visible to your backend.
     * The new object will be merged with the existing value.
     */
    public UpdateUserMetadataRequestBody withPrivateMetadata(Map<String, Object> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }

    /**
     * Metadata saved on the user that is only visible to your backend.
     * The new object will be merged with the existing value.
     */
    public UpdateUserMetadataRequestBody withPrivateMetadata(Optional<? extends Map<String, Object>> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * The new object will be merged with the existing value.
     * 
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    public UpdateUserMetadataRequestBody withUnsafeMetadata(Map<String, Object> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
        return this;
    }

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * The new object will be merged with the existing value.
     * 
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    public UpdateUserMetadataRequestBody withUnsafeMetadata(Optional<? extends Map<String, Object>> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = unsafeMetadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateUserMetadataRequestBody other = (UpdateUserMetadataRequestBody) o;
        return 
            Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            Objects.deepEquals(this.privateMetadata, other.privateMetadata) &&
            Objects.deepEquals(this.unsafeMetadata, other.unsafeMetadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            publicMetadata,
            privateMetadata,
            unsafeMetadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateUserMetadataRequestBody.class,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "unsafeMetadata", unsafeMetadata);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, Object>> publicMetadata = Optional.empty();
 
        private Optional<? extends Map<String, Object>> privateMetadata = Optional.empty();
 
        private Optional<? extends Map<String, Object>> unsafeMetadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Metadata saved on the user, that is visible to both your frontend and backend.
         * The new object will be merged with the existing value.
         */
        public Builder publicMetadata(Map<String, Object> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        /**
         * Metadata saved on the user, that is visible to both your frontend and backend.
         * The new object will be merged with the existing value.
         */
        public Builder publicMetadata(Optional<? extends Map<String, Object>> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        /**
         * Metadata saved on the user that is only visible to your backend.
         * The new object will be merged with the existing value.
         */
        public Builder privateMetadata(Map<String, Object> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        /**
         * Metadata saved on the user that is only visible to your backend.
         * The new object will be merged with the existing value.
         */
        public Builder privateMetadata(Optional<? extends Map<String, Object>> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }

        /**
         * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
         * The new object will be merged with the existing value.
         * 
         * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
         */
        public Builder unsafeMetadata(Map<String, Object> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
            return this;
        }

        /**
         * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
         * The new object will be merged with the existing value.
         * 
         * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
         */
        public Builder unsafeMetadata(Optional<? extends Map<String, Object>> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = unsafeMetadata;
            return this;
        }
        
        public UpdateUserMetadataRequestBody build() {
            return new UpdateUserMetadataRequestBody(
                publicMetadata,
                privateMetadata,
                unsafeMetadata);
        }
    }
}

