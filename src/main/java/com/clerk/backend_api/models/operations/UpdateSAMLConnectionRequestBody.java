/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateSAMLConnectionRequestBody {
    /**
     * The name of the new SAML Connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The domain to use for the new SAML Connection
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    @Deprecated
    private JsonNullable<String> domain;

    /**
     * A list of the domains on use for the SAML connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains")
    private JsonNullable<? extends List<String>> domains;

    /**
     * The entity id as provided by the IdP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_entity_id")
    private JsonNullable<String> idpEntityId;

    /**
     * The SSO url as provided by the IdP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_sso_url")
    private JsonNullable<String> idpSsoUrl;

    /**
     * The x509 certificated as provided by the IdP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_certificate")
    private JsonNullable<String> idpCertificate;

    /**
     * The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_metadata_url")
    private JsonNullable<String> idpMetadataUrl;

    /**
     * The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idp_metadata")
    private JsonNullable<String> idpMetadata;

    /**
     * The ID of the organization to which users of this SAML Connection will be added
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_id")
    private JsonNullable<String> organizationId;

    /**
     * Define the attribute name mapping between Identity Provider and Clerk's user properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribute_mapping")
    private JsonNullable<? extends AttributeMapping> attributeMapping;

    /**
     * Activate or de-activate the SAML Connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * Controls whether to update the user's attributes in each sign-in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sync_user_attributes")
    private JsonNullable<Boolean> syncUserAttributes;

    /**
     * Allow users with an email address subdomain to use this connection in order to authenticate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_subdomains")
    private JsonNullable<Boolean> allowSubdomains;

    /**
     * Enable or deactivate IdP-initiated flows
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_idp_initiated")
    private JsonNullable<Boolean> allowIdpInitiated;

    /**
     * Enable or deactivate additional identifications
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disable_additional_identifications")
    private JsonNullable<Boolean> disableAdditionalIdentifications;

    @JsonCreator
    public UpdateSAMLConnectionRequestBody(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("domain") JsonNullable<String> domain,
            @JsonProperty("domains") JsonNullable<? extends List<String>> domains,
            @JsonProperty("idp_entity_id") JsonNullable<String> idpEntityId,
            @JsonProperty("idp_sso_url") JsonNullable<String> idpSsoUrl,
            @JsonProperty("idp_certificate") JsonNullable<String> idpCertificate,
            @JsonProperty("idp_metadata_url") JsonNullable<String> idpMetadataUrl,
            @JsonProperty("idp_metadata") JsonNullable<String> idpMetadata,
            @JsonProperty("organization_id") JsonNullable<String> organizationId,
            @JsonProperty("attribute_mapping") JsonNullable<? extends AttributeMapping> attributeMapping,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("sync_user_attributes") JsonNullable<Boolean> syncUserAttributes,
            @JsonProperty("allow_subdomains") JsonNullable<Boolean> allowSubdomains,
            @JsonProperty("allow_idp_initiated") JsonNullable<Boolean> allowIdpInitiated,
            @JsonProperty("disable_additional_identifications") JsonNullable<Boolean> disableAdditionalIdentifications) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(domains, "domains");
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        this.name = name;
        this.domain = domain;
        this.domains = domains;
        this.idpEntityId = idpEntityId;
        this.idpSsoUrl = idpSsoUrl;
        this.idpCertificate = idpCertificate;
        this.idpMetadataUrl = idpMetadataUrl;
        this.idpMetadata = idpMetadata;
        this.organizationId = organizationId;
        this.attributeMapping = attributeMapping;
        this.active = active;
        this.syncUserAttributes = syncUserAttributes;
        this.allowSubdomains = allowSubdomains;
        this.allowIdpInitiated = allowIdpInitiated;
        this.disableAdditionalIdentifications = disableAdditionalIdentifications;
    }
    
    public UpdateSAMLConnectionRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The name of the new SAML Connection
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The domain to use for the new SAML Connection
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> domain() {
        return domain;
    }

    /**
     * A list of the domains on use for the SAML connection
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> domains() {
        return (JsonNullable<List<String>>) domains;
    }

    /**
     * The entity id as provided by the IdP
     */
    @JsonIgnore
    public JsonNullable<String> idpEntityId() {
        return idpEntityId;
    }

    /**
     * The SSO url as provided by the IdP
     */
    @JsonIgnore
    public JsonNullable<String> idpSsoUrl() {
        return idpSsoUrl;
    }

    /**
     * The x509 certificated as provided by the IdP
     */
    @JsonIgnore
    public JsonNullable<String> idpCertificate() {
        return idpCertificate;
    }

    /**
     * The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
     */
    @JsonIgnore
    public JsonNullable<String> idpMetadataUrl() {
        return idpMetadataUrl;
    }

    /**
     * The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
     */
    @JsonIgnore
    public JsonNullable<String> idpMetadata() {
        return idpMetadata;
    }

    /**
     * The ID of the organization to which users of this SAML Connection will be added
     */
    @JsonIgnore
    public JsonNullable<String> organizationId() {
        return organizationId;
    }

    /**
     * Define the attribute name mapping between Identity Provider and Clerk's user properties
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AttributeMapping> attributeMapping() {
        return (JsonNullable<AttributeMapping>) attributeMapping;
    }

    /**
     * Activate or de-activate the SAML Connection
     */
    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    /**
     * Controls whether to update the user's attributes in each sign-in
     */
    @JsonIgnore
    public JsonNullable<Boolean> syncUserAttributes() {
        return syncUserAttributes;
    }

    /**
     * Allow users with an email address subdomain to use this connection in order to authenticate
     */
    @JsonIgnore
    public JsonNullable<Boolean> allowSubdomains() {
        return allowSubdomains;
    }

    /**
     * Enable or deactivate IdP-initiated flows
     */
    @JsonIgnore
    public JsonNullable<Boolean> allowIdpInitiated() {
        return allowIdpInitiated;
    }

    /**
     * Enable or deactivate additional identifications
     */
    @JsonIgnore
    public JsonNullable<Boolean> disableAdditionalIdentifications() {
        return disableAdditionalIdentifications;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the new SAML Connection
     */
    public UpdateSAMLConnectionRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the new SAML Connection
     */
    public UpdateSAMLConnectionRequestBody withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The domain to use for the new SAML Connection
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public UpdateSAMLConnectionRequestBody withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = JsonNullable.of(domain);
        return this;
    }

    /**
     * The domain to use for the new SAML Connection
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public UpdateSAMLConnectionRequestBody withDomain(JsonNullable<String> domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    /**
     * A list of the domains on use for the SAML connection
     */
    public UpdateSAMLConnectionRequestBody withDomains(List<String> domains) {
        Utils.checkNotNull(domains, "domains");
        this.domains = JsonNullable.of(domains);
        return this;
    }

    /**
     * A list of the domains on use for the SAML connection
     */
    public UpdateSAMLConnectionRequestBody withDomains(JsonNullable<? extends List<String>> domains) {
        Utils.checkNotNull(domains, "domains");
        this.domains = domains;
        return this;
    }

    /**
     * The entity id as provided by the IdP
     */
    public UpdateSAMLConnectionRequestBody withIdpEntityId(String idpEntityId) {
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        this.idpEntityId = JsonNullable.of(idpEntityId);
        return this;
    }

    /**
     * The entity id as provided by the IdP
     */
    public UpdateSAMLConnectionRequestBody withIdpEntityId(JsonNullable<String> idpEntityId) {
        Utils.checkNotNull(idpEntityId, "idpEntityId");
        this.idpEntityId = idpEntityId;
        return this;
    }

    /**
     * The SSO url as provided by the IdP
     */
    public UpdateSAMLConnectionRequestBody withIdpSsoUrl(String idpSsoUrl) {
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        this.idpSsoUrl = JsonNullable.of(idpSsoUrl);
        return this;
    }

    /**
     * The SSO url as provided by the IdP
     */
    public UpdateSAMLConnectionRequestBody withIdpSsoUrl(JsonNullable<String> idpSsoUrl) {
        Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
        this.idpSsoUrl = idpSsoUrl;
        return this;
    }

    /**
     * The x509 certificated as provided by the IdP
     */
    public UpdateSAMLConnectionRequestBody withIdpCertificate(String idpCertificate) {
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        this.idpCertificate = JsonNullable.of(idpCertificate);
        return this;
    }

    /**
     * The x509 certificated as provided by the IdP
     */
    public UpdateSAMLConnectionRequestBody withIdpCertificate(JsonNullable<String> idpCertificate) {
        Utils.checkNotNull(idpCertificate, "idpCertificate");
        this.idpCertificate = idpCertificate;
        return this;
    }

    /**
     * The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
     */
    public UpdateSAMLConnectionRequestBody withIdpMetadataUrl(String idpMetadataUrl) {
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        this.idpMetadataUrl = JsonNullable.of(idpMetadataUrl);
        return this;
    }

    /**
     * The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
     */
    public UpdateSAMLConnectionRequestBody withIdpMetadataUrl(JsonNullable<String> idpMetadataUrl) {
        Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
        this.idpMetadataUrl = idpMetadataUrl;
        return this;
    }

    /**
     * The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
     */
    public UpdateSAMLConnectionRequestBody withIdpMetadata(String idpMetadata) {
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        this.idpMetadata = JsonNullable.of(idpMetadata);
        return this;
    }

    /**
     * The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
     */
    public UpdateSAMLConnectionRequestBody withIdpMetadata(JsonNullable<String> idpMetadata) {
        Utils.checkNotNull(idpMetadata, "idpMetadata");
        this.idpMetadata = idpMetadata;
        return this;
    }

    /**
     * The ID of the organization to which users of this SAML Connection will be added
     */
    public UpdateSAMLConnectionRequestBody withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = JsonNullable.of(organizationId);
        return this;
    }

    /**
     * The ID of the organization to which users of this SAML Connection will be added
     */
    public UpdateSAMLConnectionRequestBody withOrganizationId(JsonNullable<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Define the attribute name mapping between Identity Provider and Clerk's user properties
     */
    public UpdateSAMLConnectionRequestBody withAttributeMapping(AttributeMapping attributeMapping) {
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        this.attributeMapping = JsonNullable.of(attributeMapping);
        return this;
    }

    /**
     * Define the attribute name mapping between Identity Provider and Clerk's user properties
     */
    public UpdateSAMLConnectionRequestBody withAttributeMapping(JsonNullable<? extends AttributeMapping> attributeMapping) {
        Utils.checkNotNull(attributeMapping, "attributeMapping");
        this.attributeMapping = attributeMapping;
        return this;
    }

    /**
     * Activate or de-activate the SAML Connection
     */
    public UpdateSAMLConnectionRequestBody withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    /**
     * Activate or de-activate the SAML Connection
     */
    public UpdateSAMLConnectionRequestBody withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * Controls whether to update the user's attributes in each sign-in
     */
    public UpdateSAMLConnectionRequestBody withSyncUserAttributes(boolean syncUserAttributes) {
        Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
        this.syncUserAttributes = JsonNullable.of(syncUserAttributes);
        return this;
    }

    /**
     * Controls whether to update the user's attributes in each sign-in
     */
    public UpdateSAMLConnectionRequestBody withSyncUserAttributes(JsonNullable<Boolean> syncUserAttributes) {
        Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
        this.syncUserAttributes = syncUserAttributes;
        return this;
    }

    /**
     * Allow users with an email address subdomain to use this connection in order to authenticate
     */
    public UpdateSAMLConnectionRequestBody withAllowSubdomains(boolean allowSubdomains) {
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        this.allowSubdomains = JsonNullable.of(allowSubdomains);
        return this;
    }

    /**
     * Allow users with an email address subdomain to use this connection in order to authenticate
     */
    public UpdateSAMLConnectionRequestBody withAllowSubdomains(JsonNullable<Boolean> allowSubdomains) {
        Utils.checkNotNull(allowSubdomains, "allowSubdomains");
        this.allowSubdomains = allowSubdomains;
        return this;
    }

    /**
     * Enable or deactivate IdP-initiated flows
     */
    public UpdateSAMLConnectionRequestBody withAllowIdpInitiated(boolean allowIdpInitiated) {
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        this.allowIdpInitiated = JsonNullable.of(allowIdpInitiated);
        return this;
    }

    /**
     * Enable or deactivate IdP-initiated flows
     */
    public UpdateSAMLConnectionRequestBody withAllowIdpInitiated(JsonNullable<Boolean> allowIdpInitiated) {
        Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
        this.allowIdpInitiated = allowIdpInitiated;
        return this;
    }

    /**
     * Enable or deactivate additional identifications
     */
    public UpdateSAMLConnectionRequestBody withDisableAdditionalIdentifications(boolean disableAdditionalIdentifications) {
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        this.disableAdditionalIdentifications = JsonNullable.of(disableAdditionalIdentifications);
        return this;
    }

    /**
     * Enable or deactivate additional identifications
     */
    public UpdateSAMLConnectionRequestBody withDisableAdditionalIdentifications(JsonNullable<Boolean> disableAdditionalIdentifications) {
        Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
        this.disableAdditionalIdentifications = disableAdditionalIdentifications;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSAMLConnectionRequestBody other = (UpdateSAMLConnectionRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.domain, other.domain) &&
            Utils.enhancedDeepEquals(this.domains, other.domains) &&
            Utils.enhancedDeepEquals(this.idpEntityId, other.idpEntityId) &&
            Utils.enhancedDeepEquals(this.idpSsoUrl, other.idpSsoUrl) &&
            Utils.enhancedDeepEquals(this.idpCertificate, other.idpCertificate) &&
            Utils.enhancedDeepEquals(this.idpMetadataUrl, other.idpMetadataUrl) &&
            Utils.enhancedDeepEquals(this.idpMetadata, other.idpMetadata) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.attributeMapping, other.attributeMapping) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.syncUserAttributes, other.syncUserAttributes) &&
            Utils.enhancedDeepEquals(this.allowSubdomains, other.allowSubdomains) &&
            Utils.enhancedDeepEquals(this.allowIdpInitiated, other.allowIdpInitiated) &&
            Utils.enhancedDeepEquals(this.disableAdditionalIdentifications, other.disableAdditionalIdentifications);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, domain, domains,
            idpEntityId, idpSsoUrl, idpCertificate,
            idpMetadataUrl, idpMetadata, organizationId,
            attributeMapping, active, syncUserAttributes,
            allowSubdomains, allowIdpInitiated, disableAdditionalIdentifications);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSAMLConnectionRequestBody.class,
                "name", name,
                "domain", domain,
                "domains", domains,
                "idpEntityId", idpEntityId,
                "idpSsoUrl", idpSsoUrl,
                "idpCertificate", idpCertificate,
                "idpMetadataUrl", idpMetadataUrl,
                "idpMetadata", idpMetadata,
                "organizationId", organizationId,
                "attributeMapping", attributeMapping,
                "active", active,
                "syncUserAttributes", syncUserAttributes,
                "allowSubdomains", allowSubdomains,
                "allowIdpInitiated", allowIdpInitiated,
                "disableAdditionalIdentifications", disableAdditionalIdentifications);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> name = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> domain = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> domains = JsonNullable.undefined();

        private JsonNullable<String> idpEntityId = JsonNullable.undefined();

        private JsonNullable<String> idpSsoUrl = JsonNullable.undefined();

        private JsonNullable<String> idpCertificate = JsonNullable.undefined();

        private JsonNullable<String> idpMetadataUrl = JsonNullable.undefined();

        private JsonNullable<String> idpMetadata = JsonNullable.undefined();

        private JsonNullable<String> organizationId = JsonNullable.undefined();

        private JsonNullable<? extends AttributeMapping> attributeMapping = JsonNullable.undefined();

        private JsonNullable<Boolean> active = JsonNullable.undefined();

        private JsonNullable<Boolean> syncUserAttributes = JsonNullable.undefined();

        private JsonNullable<Boolean> allowSubdomains = JsonNullable.undefined();

        private JsonNullable<Boolean> allowIdpInitiated = JsonNullable.undefined();

        private JsonNullable<Boolean> disableAdditionalIdentifications = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the new SAML Connection
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the new SAML Connection
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The domain to use for the new SAML Connection
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = JsonNullable.of(domain);
            return this;
        }

        /**
         * The domain to use for the new SAML Connection
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder domain(JsonNullable<String> domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }


        /**
         * A list of the domains on use for the SAML connection
         */
        public Builder domains(List<String> domains) {
            Utils.checkNotNull(domains, "domains");
            this.domains = JsonNullable.of(domains);
            return this;
        }

        /**
         * A list of the domains on use for the SAML connection
         */
        public Builder domains(JsonNullable<? extends List<String>> domains) {
            Utils.checkNotNull(domains, "domains");
            this.domains = domains;
            return this;
        }


        /**
         * The entity id as provided by the IdP
         */
        public Builder idpEntityId(String idpEntityId) {
            Utils.checkNotNull(idpEntityId, "idpEntityId");
            this.idpEntityId = JsonNullable.of(idpEntityId);
            return this;
        }

        /**
         * The entity id as provided by the IdP
         */
        public Builder idpEntityId(JsonNullable<String> idpEntityId) {
            Utils.checkNotNull(idpEntityId, "idpEntityId");
            this.idpEntityId = idpEntityId;
            return this;
        }


        /**
         * The SSO url as provided by the IdP
         */
        public Builder idpSsoUrl(String idpSsoUrl) {
            Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
            this.idpSsoUrl = JsonNullable.of(idpSsoUrl);
            return this;
        }

        /**
         * The SSO url as provided by the IdP
         */
        public Builder idpSsoUrl(JsonNullable<String> idpSsoUrl) {
            Utils.checkNotNull(idpSsoUrl, "idpSsoUrl");
            this.idpSsoUrl = idpSsoUrl;
            return this;
        }


        /**
         * The x509 certificated as provided by the IdP
         */
        public Builder idpCertificate(String idpCertificate) {
            Utils.checkNotNull(idpCertificate, "idpCertificate");
            this.idpCertificate = JsonNullable.of(idpCertificate);
            return this;
        }

        /**
         * The x509 certificated as provided by the IdP
         */
        public Builder idpCertificate(JsonNullable<String> idpCertificate) {
            Utils.checkNotNull(idpCertificate, "idpCertificate");
            this.idpCertificate = idpCertificate;
            return this;
        }


        /**
         * The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
         */
        public Builder idpMetadataUrl(String idpMetadataUrl) {
            Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
            this.idpMetadataUrl = JsonNullable.of(idpMetadataUrl);
            return this;
        }

        /**
         * The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
         */
        public Builder idpMetadataUrl(JsonNullable<String> idpMetadataUrl) {
            Utils.checkNotNull(idpMetadataUrl, "idpMetadataUrl");
            this.idpMetadataUrl = idpMetadataUrl;
            return this;
        }


        /**
         * The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
         */
        public Builder idpMetadata(String idpMetadata) {
            Utils.checkNotNull(idpMetadata, "idpMetadata");
            this.idpMetadata = JsonNullable.of(idpMetadata);
            return this;
        }

        /**
         * The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
         */
        public Builder idpMetadata(JsonNullable<String> idpMetadata) {
            Utils.checkNotNull(idpMetadata, "idpMetadata");
            this.idpMetadata = idpMetadata;
            return this;
        }


        /**
         * The ID of the organization to which users of this SAML Connection will be added
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = JsonNullable.of(organizationId);
            return this;
        }

        /**
         * The ID of the organization to which users of this SAML Connection will be added
         */
        public Builder organizationId(JsonNullable<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * Define the attribute name mapping between Identity Provider and Clerk's user properties
         */
        public Builder attributeMapping(AttributeMapping attributeMapping) {
            Utils.checkNotNull(attributeMapping, "attributeMapping");
            this.attributeMapping = JsonNullable.of(attributeMapping);
            return this;
        }

        /**
         * Define the attribute name mapping between Identity Provider and Clerk's user properties
         */
        public Builder attributeMapping(JsonNullable<? extends AttributeMapping> attributeMapping) {
            Utils.checkNotNull(attributeMapping, "attributeMapping");
            this.attributeMapping = attributeMapping;
            return this;
        }


        /**
         * Activate or de-activate the SAML Connection
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * Activate or de-activate the SAML Connection
         */
        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }


        /**
         * Controls whether to update the user's attributes in each sign-in
         */
        public Builder syncUserAttributes(boolean syncUserAttributes) {
            Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
            this.syncUserAttributes = JsonNullable.of(syncUserAttributes);
            return this;
        }

        /**
         * Controls whether to update the user's attributes in each sign-in
         */
        public Builder syncUserAttributes(JsonNullable<Boolean> syncUserAttributes) {
            Utils.checkNotNull(syncUserAttributes, "syncUserAttributes");
            this.syncUserAttributes = syncUserAttributes;
            return this;
        }


        /**
         * Allow users with an email address subdomain to use this connection in order to authenticate
         */
        public Builder allowSubdomains(boolean allowSubdomains) {
            Utils.checkNotNull(allowSubdomains, "allowSubdomains");
            this.allowSubdomains = JsonNullable.of(allowSubdomains);
            return this;
        }

        /**
         * Allow users with an email address subdomain to use this connection in order to authenticate
         */
        public Builder allowSubdomains(JsonNullable<Boolean> allowSubdomains) {
            Utils.checkNotNull(allowSubdomains, "allowSubdomains");
            this.allowSubdomains = allowSubdomains;
            return this;
        }


        /**
         * Enable or deactivate IdP-initiated flows
         */
        public Builder allowIdpInitiated(boolean allowIdpInitiated) {
            Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
            this.allowIdpInitiated = JsonNullable.of(allowIdpInitiated);
            return this;
        }

        /**
         * Enable or deactivate IdP-initiated flows
         */
        public Builder allowIdpInitiated(JsonNullable<Boolean> allowIdpInitiated) {
            Utils.checkNotNull(allowIdpInitiated, "allowIdpInitiated");
            this.allowIdpInitiated = allowIdpInitiated;
            return this;
        }


        /**
         * Enable or deactivate additional identifications
         */
        public Builder disableAdditionalIdentifications(boolean disableAdditionalIdentifications) {
            Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
            this.disableAdditionalIdentifications = JsonNullable.of(disableAdditionalIdentifications);
            return this;
        }

        /**
         * Enable or deactivate additional identifications
         */
        public Builder disableAdditionalIdentifications(JsonNullable<Boolean> disableAdditionalIdentifications) {
            Utils.checkNotNull(disableAdditionalIdentifications, "disableAdditionalIdentifications");
            this.disableAdditionalIdentifications = disableAdditionalIdentifications;
            return this;
        }

        public UpdateSAMLConnectionRequestBody build() {

            return new UpdateSAMLConnectionRequestBody(
                name, domain, domains,
                idpEntityId, idpSsoUrl, idpCertificate,
                idpMetadataUrl, idpMetadata, organizationId,
                attributeMapping, active, syncUserAttributes,
                allowSubdomains, allowIdpInitiated, disableAdditionalIdentifications);
        }

    }
}
