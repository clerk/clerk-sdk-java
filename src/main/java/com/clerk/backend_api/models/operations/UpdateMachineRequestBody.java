/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class UpdateMachineRequestBody {
    /**
     * The name of the machine
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1
     * second.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_token_ttl")
    private Optional<Long> defaultTokenTtl;

    @JsonCreator
    public UpdateMachineRequestBody(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("default_token_ttl") Optional<Long> defaultTokenTtl) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
        this.name = name;
        this.defaultTokenTtl = defaultTokenTtl;
    }
    
    public UpdateMachineRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The name of the machine
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1
     * second.
     */
    @JsonIgnore
    public Optional<Long> defaultTokenTtl() {
        return defaultTokenTtl;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the machine
     */
    public UpdateMachineRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The name of the machine
     */
    public UpdateMachineRequestBody withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1
     * second.
     */
    public UpdateMachineRequestBody withDefaultTokenTtl(long defaultTokenTtl) {
        Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
        this.defaultTokenTtl = Optional.ofNullable(defaultTokenTtl);
        return this;
    }


    /**
     * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1
     * second.
     */
    public UpdateMachineRequestBody withDefaultTokenTtl(Optional<Long> defaultTokenTtl) {
        Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
        this.defaultTokenTtl = defaultTokenTtl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateMachineRequestBody other = (UpdateMachineRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.defaultTokenTtl, other.defaultTokenTtl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, defaultTokenTtl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateMachineRequestBody.class,
                "name", name,
                "defaultTokenTtl", defaultTokenTtl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> name = Optional.empty();

        private Optional<Long> defaultTokenTtl = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the machine
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the machine
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1
         * second.
         */
        public Builder defaultTokenTtl(long defaultTokenTtl) {
            Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
            this.defaultTokenTtl = Optional.ofNullable(defaultTokenTtl);
            return this;
        }

        /**
         * The default time-to-live (TTL) in seconds for tokens created by this machine. Must be at least 1
         * second.
         */
        public Builder defaultTokenTtl(Optional<Long> defaultTokenTtl) {
            Utils.checkNotNull(defaultTokenTtl, "defaultTokenTtl");
            this.defaultTokenTtl = defaultTokenTtl;
            return this;
        }

        public UpdateMachineRequestBody build() {

            return new UpdateMachineRequestBody(
                name, defaultTokenTtl);
        }

    }
}
