/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateM2MTokenRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seconds_until_expiration")
    private JsonNullable<Double> secondsUntilExpiration;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claims")
    private JsonNullable<? extends Object> claims;

    @JsonCreator
    public CreateM2MTokenRequestBody(
            @JsonProperty("seconds_until_expiration") JsonNullable<Double> secondsUntilExpiration,
            @JsonProperty("claims") JsonNullable<? extends Object> claims) {
        Utils.checkNotNull(secondsUntilExpiration, "secondsUntilExpiration");
        Utils.checkNotNull(claims, "claims");
        this.secondsUntilExpiration = secondsUntilExpiration;
        this.claims = claims;
    }
    
    public CreateM2MTokenRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<Double> secondsUntilExpiration() {
        return secondsUntilExpiration;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Object> claims() {
        return (JsonNullable<Object>) claims;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CreateM2MTokenRequestBody withSecondsUntilExpiration(double secondsUntilExpiration) {
        Utils.checkNotNull(secondsUntilExpiration, "secondsUntilExpiration");
        this.secondsUntilExpiration = JsonNullable.of(secondsUntilExpiration);
        return this;
    }

    public CreateM2MTokenRequestBody withSecondsUntilExpiration(JsonNullable<Double> secondsUntilExpiration) {
        Utils.checkNotNull(secondsUntilExpiration, "secondsUntilExpiration");
        this.secondsUntilExpiration = secondsUntilExpiration;
        return this;
    }

    public CreateM2MTokenRequestBody withClaims(Object claims) {
        Utils.checkNotNull(claims, "claims");
        this.claims = JsonNullable.of(claims);
        return this;
    }

    public CreateM2MTokenRequestBody withClaims(JsonNullable<? extends Object> claims) {
        Utils.checkNotNull(claims, "claims");
        this.claims = claims;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateM2MTokenRequestBody other = (CreateM2MTokenRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.secondsUntilExpiration, other.secondsUntilExpiration) &&
            Utils.enhancedDeepEquals(this.claims, other.claims);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            secondsUntilExpiration, claims);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateM2MTokenRequestBody.class,
                "secondsUntilExpiration", secondsUntilExpiration,
                "claims", claims);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<Double> secondsUntilExpiration = JsonNullable.undefined();

        private JsonNullable<? extends Object> claims = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder secondsUntilExpiration(double secondsUntilExpiration) {
            Utils.checkNotNull(secondsUntilExpiration, "secondsUntilExpiration");
            this.secondsUntilExpiration = JsonNullable.of(secondsUntilExpiration);
            return this;
        }

        public Builder secondsUntilExpiration(JsonNullable<Double> secondsUntilExpiration) {
            Utils.checkNotNull(secondsUntilExpiration, "secondsUntilExpiration");
            this.secondsUntilExpiration = secondsUntilExpiration;
            return this;
        }


        public Builder claims(Object claims) {
            Utils.checkNotNull(claims, "claims");
            this.claims = JsonNullable.of(claims);
            return this;
        }

        public Builder claims(JsonNullable<? extends Object> claims) {
            Utils.checkNotNull(claims, "claims");
            this.claims = claims;
            return this;
        }

        public CreateM2MTokenRequestBody build() {

            return new CreateM2MTokenRequestBody(
                secondsUntilExpiration, claims);
        }

    }
}
