/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.clerk.backend_api.models.operations;
import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class UpdateOAuthApplicationRequest {

    /**
     * The ID of the OAuth application to update
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=oauth_application_id")
    private String oauthApplicationId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private UpdateOAuthApplicationRequestBody requestBody;

    @JsonCreator
    public UpdateOAuthApplicationRequest(
            String oauthApplicationId,
            UpdateOAuthApplicationRequestBody requestBody) {
        Utils.checkNotNull(oauthApplicationId, "oauthApplicationId");
        Utils.checkNotNull(requestBody, "requestBody");
        this.oauthApplicationId = oauthApplicationId;
        this.requestBody = requestBody;
    }

    /**
     * The ID of the OAuth application to update
     */
    @JsonIgnore
    public String oauthApplicationId() {
        return oauthApplicationId;
    }

    @JsonIgnore
    public UpdateOAuthApplicationRequestBody requestBody() {
        return requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the OAuth application to update
     */
    public UpdateOAuthApplicationRequest withOauthApplicationId(String oauthApplicationId) {
        Utils.checkNotNull(oauthApplicationId, "oauthApplicationId");
        this.oauthApplicationId = oauthApplicationId;
        return this;
    }

    public UpdateOAuthApplicationRequest withRequestBody(UpdateOAuthApplicationRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateOAuthApplicationRequest other = (UpdateOAuthApplicationRequest) o;
        return 
            Objects.deepEquals(this.oauthApplicationId, other.oauthApplicationId) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            oauthApplicationId,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateOAuthApplicationRequest.class,
                "oauthApplicationId", oauthApplicationId,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String oauthApplicationId;
 
        private UpdateOAuthApplicationRequestBody requestBody;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the OAuth application to update
         */
        public Builder oauthApplicationId(String oauthApplicationId) {
            Utils.checkNotNull(oauthApplicationId, "oauthApplicationId");
            this.oauthApplicationId = oauthApplicationId;
            return this;
        }

        public Builder requestBody(UpdateOAuthApplicationRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public UpdateOAuthApplicationRequest build() {
            return new UpdateOAuthApplicationRequest(
                oauthApplicationId,
                requestBody);
        }
    }
}

