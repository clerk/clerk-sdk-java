/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class InviteWaitlistEntryRequest {
    /**
     * The ID of the waitlist entry to invite
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=waitlist_entry_id")
    private String waitlistEntryId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends InviteWaitlistEntryRequestBody> requestBody;

    @JsonCreator
    public InviteWaitlistEntryRequest(
            String waitlistEntryId,
            Optional<? extends InviteWaitlistEntryRequestBody> requestBody) {
        Utils.checkNotNull(waitlistEntryId, "waitlistEntryId");
        Utils.checkNotNull(requestBody, "requestBody");
        this.waitlistEntryId = waitlistEntryId;
        this.requestBody = requestBody;
    }
    
    public InviteWaitlistEntryRequest(
            String waitlistEntryId) {
        this(waitlistEntryId, Optional.empty());
    }

    /**
     * The ID of the waitlist entry to invite
     */
    @JsonIgnore
    public String waitlistEntryId() {
        return waitlistEntryId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InviteWaitlistEntryRequestBody> requestBody() {
        return (Optional<InviteWaitlistEntryRequestBody>) requestBody;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the waitlist entry to invite
     */
    public InviteWaitlistEntryRequest withWaitlistEntryId(String waitlistEntryId) {
        Utils.checkNotNull(waitlistEntryId, "waitlistEntryId");
        this.waitlistEntryId = waitlistEntryId;
        return this;
    }

    public InviteWaitlistEntryRequest withRequestBody(InviteWaitlistEntryRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }


    public InviteWaitlistEntryRequest withRequestBody(Optional<? extends InviteWaitlistEntryRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InviteWaitlistEntryRequest other = (InviteWaitlistEntryRequest) o;
        return 
            Utils.enhancedDeepEquals(this.waitlistEntryId, other.waitlistEntryId) &&
            Utils.enhancedDeepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            waitlistEntryId, requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InviteWaitlistEntryRequest.class,
                "waitlistEntryId", waitlistEntryId,
                "requestBody", requestBody);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String waitlistEntryId;

        private Optional<? extends InviteWaitlistEntryRequestBody> requestBody = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the waitlist entry to invite
         */
        public Builder waitlistEntryId(String waitlistEntryId) {
            Utils.checkNotNull(waitlistEntryId, "waitlistEntryId");
            this.waitlistEntryId = waitlistEntryId;
            return this;
        }


        public Builder requestBody(InviteWaitlistEntryRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends InviteWaitlistEntryRequestBody> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public InviteWaitlistEntryRequest build() {

            return new InviteWaitlistEntryRequest(
                waitlistEntryId, requestBody);
        }

    }
}
