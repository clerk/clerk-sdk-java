/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.SDKConfiguration;
import com.clerk.backend_api.operations.RevokeM2MToken;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import com.clerk.backend_api.utils.RetryConfig;
import com.clerk.backend_api.utils.Utils;
import java.lang.String;
import java.util.Optional;

public class RevokeM2MTokenRequestBuilder {

    private String m2mTokenId;
    private RevokeM2MTokenRequestBody requestBody;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public RevokeM2MTokenRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public RevokeM2MTokenRequestBuilder m2mTokenId(String m2mTokenId) {
        Utils.checkNotNull(m2mTokenId, "m2mTokenId");
        this.m2mTokenId = m2mTokenId;
        return this;
    }

    public RevokeM2MTokenRequestBuilder requestBody(RevokeM2MTokenRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
                
    public RevokeM2MTokenRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public RevokeM2MTokenRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private RevokeM2MTokenRequest buildRequest() {

        RevokeM2MTokenRequest request = new RevokeM2MTokenRequest(m2mTokenId,
            requestBody);

        return request;
    }

    public RevokeM2MTokenResponse call() {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<RevokeM2MTokenRequest, RevokeM2MTokenResponse> operation
              = new RevokeM2MToken.Sync(sdkConfiguration, options, _headers);
        RevokeM2MTokenRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
