/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;


public class UploadOrganizationLogoFile {

    @SpeakeasyMetadata("multipartForm:name=fileName")
    private String fileName;


    @SpeakeasyMetadata("multipartForm:content")
    private byte[] content;

    @JsonCreator
    public UploadOrganizationLogoFile(
            String fileName,
            byte[] content) {
        Utils.checkNotNull(fileName, "fileName");
        Utils.checkNotNull(content, "content");
        this.fileName = fileName;
        this.content = content;
    }

    @JsonIgnore
    public String fileName() {
        return fileName;
    }

    @JsonIgnore
    public byte[] content() {
        return content;
    }

    public static Builder builder() {
        return new Builder();
    }


    public UploadOrganizationLogoFile withFileName(String fileName) {
        Utils.checkNotNull(fileName, "fileName");
        this.fileName = fileName;
        return this;
    }

    public UploadOrganizationLogoFile withContent(byte[] content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UploadOrganizationLogoFile other = (UploadOrganizationLogoFile) o;
        return 
            Utils.enhancedDeepEquals(this.fileName, other.fileName) &&
            Utils.enhancedDeepEquals(this.content, other.content);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileName, content);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UploadOrganizationLogoFile.class,
                "fileName", fileName,
                "content", content);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String fileName;

        private byte[] content;

        private Builder() {
          // force use of static builder() method
        }


        public Builder fileName(String fileName) {
            Utils.checkNotNull(fileName, "fileName");
            this.fileName = fileName;
            return this;
        }


        public Builder content(byte[] content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public UploadOrganizationLogoFile build() {

            return new UploadOrganizationLogoFile(
                fileName, content);
        }

    }
}
