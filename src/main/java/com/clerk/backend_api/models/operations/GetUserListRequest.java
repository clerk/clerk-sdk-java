/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class GetUserListRequest {
    /**
     * Returns users with the specified email addresses.
     * Accepts up to 100 email addresses.
     * Any email addresses not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address")
    private Optional<? extends List<String>> emailAddress;

    /**
     * Returns users with the specified phone numbers.
     * Accepts up to 100 phone numbers.
     * Any phone numbers not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number")
    private Optional<? extends List<String>> phoneNumber;

    /**
     * Returns users with the specified external ids.
     * For each external id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective external id should be included or
     * excluded from the result set.
     * Accepts up to 100 external ids.
     * Any external ids not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=external_id")
    private Optional<? extends List<String>> externalId;

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=username")
    private Optional<? extends List<String>> username;

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=web3_wallet")
    private Optional<? extends List<String>> web3Wallet;

    /**
     * Returns users with the user ids specified.
     * For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective user id should be included or
     * excluded from the result set.
     * Accepts up to 100 user ids.
     * Any user ids not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")
    private Optional<? extends List<String>> userId;

    /**
     * Returns users that have memberships to the
     * given organizations.
     * For each organization id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective organization should be included or
     * excluded from the result set.
     * Accepts up to 100 organization ids.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_id")
    private Optional<? extends List<String>> organizationId;

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private Optional<String> query;

    /**
     * Returns users with emails that match the given query, via case-insensitive partial match.
     * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address_query")
    private Optional<String> emailAddressQuery;

    /**
     * Returns users with phone numbers that match the given query, via case-insensitive partial match.
     * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number_query")
    private Optional<String> phoneNumberQuery;

    /**
     * Returns users with usernames that match the given query, via case-insensitive partial match.
     * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=username_query")
    private Optional<String> usernameQuery;

    /**
     * Returns users with names that match the given query, via case-insensitive partial match.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name_query")
    private Optional<String> nameQuery;

    /**
     * Returns users which are either banned (`banned=true`) or not banned (`banned=false`).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=banned")
    private Optional<Boolean> banned;

    /**
     * Returns users whose last session activity was before the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_before")
    private Optional<Long> lastActiveAtBefore;

    /**
     * Returns users whose last session activity was after the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_after")
    private Optional<Long> lastActiveAtAfter;

    /**
     * Returns users that had session activity since the given date.
     * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
     * Deprecated in favor of `last_active_at_after`.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_since")
    @Deprecated
    private Optional<Long> lastActiveAtSince;

    /**
     * Returns users who have been created before the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_before")
    private Optional<Long> createdAtBefore;

    /**
     * Returns users who have been created after the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_after")
    private Optional<Long> createdAtAfter;

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Long> offset;

    /**
     * Allows to return users in a particular order.
     * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
     * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
     * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<String> orderBy;

    @JsonCreator
    public GetUserListRequest(
            Optional<? extends List<String>> emailAddress,
            Optional<? extends List<String>> phoneNumber,
            Optional<? extends List<String>> externalId,
            Optional<? extends List<String>> username,
            Optional<? extends List<String>> web3Wallet,
            Optional<? extends List<String>> userId,
            Optional<? extends List<String>> organizationId,
            Optional<String> query,
            Optional<String> emailAddressQuery,
            Optional<String> phoneNumberQuery,
            Optional<String> usernameQuery,
            Optional<String> nameQuery,
            Optional<Boolean> banned,
            Optional<Long> lastActiveAtBefore,
            Optional<Long> lastActiveAtAfter,
            Optional<Long> lastActiveAtSince,
            Optional<Long> createdAtBefore,
            Optional<Long> createdAtAfter,
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<String> orderBy) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
        Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
        Utils.checkNotNull(usernameQuery, "usernameQuery");
        Utils.checkNotNull(nameQuery, "nameQuery");
        Utils.checkNotNull(banned, "banned");
        Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
        Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
        Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
        Utils.checkNotNull(createdAtBefore, "createdAtBefore");
        Utils.checkNotNull(createdAtAfter, "createdAtAfter");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(orderBy, "orderBy");
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.externalId = externalId;
        this.username = username;
        this.web3Wallet = web3Wallet;
        this.userId = userId;
        this.organizationId = organizationId;
        this.query = query;
        this.emailAddressQuery = emailAddressQuery;
        this.phoneNumberQuery = phoneNumberQuery;
        this.usernameQuery = usernameQuery;
        this.nameQuery = nameQuery;
        this.banned = banned;
        this.lastActiveAtBefore = lastActiveAtBefore;
        this.lastActiveAtAfter = lastActiveAtAfter;
        this.lastActiveAtSince = lastActiveAtSince;
        this.createdAtBefore = createdAtBefore;
        this.createdAtAfter = createdAtAfter;
        this.limit = limit;
        this.offset = offset;
        this.orderBy = orderBy;
    }
    
    public GetUserListRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Returns users with the specified email addresses.
     * Accepts up to 100 email addresses.
     * Any email addresses not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> emailAddress() {
        return (Optional<List<String>>) emailAddress;
    }

    /**
     * Returns users with the specified phone numbers.
     * Accepts up to 100 phone numbers.
     * Any phone numbers not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> phoneNumber() {
        return (Optional<List<String>>) phoneNumber;
    }

    /**
     * Returns users with the specified external ids.
     * For each external id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective external id should be included or
     * excluded from the result set.
     * Accepts up to 100 external ids.
     * Any external ids not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> externalId() {
        return (Optional<List<String>>) externalId;
    }

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> username() {
        return (Optional<List<String>>) username;
    }

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> web3Wallet() {
        return (Optional<List<String>>) web3Wallet;
    }

    /**
     * Returns users with the user ids specified.
     * For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective user id should be included or
     * excluded from the result set.
     * Accepts up to 100 user ids.
     * Any user ids not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> userId() {
        return (Optional<List<String>>) userId;
    }

    /**
     * Returns users that have memberships to the
     * given organizations.
     * For each organization id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective organization should be included or
     * excluded from the result set.
     * Accepts up to 100 organization ids.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> organizationId() {
        return (Optional<List<String>>) organizationId;
    }

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * Returns users with emails that match the given query, via case-insensitive partial match.
     * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
     */
    @JsonIgnore
    public Optional<String> emailAddressQuery() {
        return emailAddressQuery;
    }

    /**
     * Returns users with phone numbers that match the given query, via case-insensitive partial match.
     * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
     */
    @JsonIgnore
    public Optional<String> phoneNumberQuery() {
        return phoneNumberQuery;
    }

    /**
     * Returns users with usernames that match the given query, via case-insensitive partial match.
     * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
     */
    @JsonIgnore
    public Optional<String> usernameQuery() {
        return usernameQuery;
    }

    /**
     * Returns users with names that match the given query, via case-insensitive partial match.
     */
    @JsonIgnore
    public Optional<String> nameQuery() {
        return nameQuery;
    }

    /**
     * Returns users which are either banned (`banned=true`) or not banned (`banned=false`).
     */
    @JsonIgnore
    public Optional<Boolean> banned() {
        return banned;
    }

    /**
     * Returns users whose last session activity was before the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
     */
    @JsonIgnore
    public Optional<Long> lastActiveAtBefore() {
        return lastActiveAtBefore;
    }

    /**
     * Returns users whose last session activity was after the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
     */
    @JsonIgnore
    public Optional<Long> lastActiveAtAfter() {
        return lastActiveAtAfter;
    }

    /**
     * Returns users that had session activity since the given date.
     * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
     * Deprecated in favor of `last_active_at_after`.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Long> lastActiveAtSince() {
        return lastActiveAtSince;
    }

    /**
     * Returns users who have been created before the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
     */
    @JsonIgnore
    public Optional<Long> createdAtBefore() {
        return createdAtBefore;
    }

    /**
     * Returns users who have been created after the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
     */
    @JsonIgnore
    public Optional<Long> createdAtAfter() {
        return createdAtAfter;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    @JsonIgnore
    public Optional<Long> offset() {
        return offset;
    }

    /**
     * Allows to return users in a particular order.
     * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
     * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
     * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
     */
    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Returns users with the specified email addresses.
     * Accepts up to 100 email addresses.
     * Any email addresses not found are ignored.
     */
    public GetUserListRequest withEmailAddress(List<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }


    /**
     * Returns users with the specified email addresses.
     * Accepts up to 100 email addresses.
     * Any email addresses not found are ignored.
     */
    public GetUserListRequest withEmailAddress(Optional<? extends List<String>> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Returns users with the specified phone numbers.
     * Accepts up to 100 phone numbers.
     * Any phone numbers not found are ignored.
     */
    public GetUserListRequest withPhoneNumber(List<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }


    /**
     * Returns users with the specified phone numbers.
     * Accepts up to 100 phone numbers.
     * Any phone numbers not found are ignored.
     */
    public GetUserListRequest withPhoneNumber(Optional<? extends List<String>> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Returns users with the specified external ids.
     * For each external id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective external id should be included or
     * excluded from the result set.
     * Accepts up to 100 external ids.
     * Any external ids not found are ignored.
     */
    public GetUserListRequest withExternalId(List<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }


    /**
     * Returns users with the specified external ids.
     * For each external id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective external id should be included or
     * excluded from the result set.
     * Accepts up to 100 external ids.
     * Any external ids not found are ignored.
     */
    public GetUserListRequest withExternalId(Optional<? extends List<String>> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    public GetUserListRequest withUsername(List<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }


    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    public GetUserListRequest withUsername(Optional<? extends List<String>> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    public GetUserListRequest withWeb3Wallet(List<String> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = Optional.ofNullable(web3Wallet);
        return this;
    }


    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    public GetUserListRequest withWeb3Wallet(Optional<? extends List<String>> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = web3Wallet;
        return this;
    }

    /**
     * Returns users with the user ids specified.
     * For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective user id should be included or
     * excluded from the result set.
     * Accepts up to 100 user ids.
     * Any user ids not found are ignored.
     */
    public GetUserListRequest withUserId(List<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }


    /**
     * Returns users with the user ids specified.
     * For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective user id should be included or
     * excluded from the result set.
     * Accepts up to 100 user ids.
     * Any user ids not found are ignored.
     */
    public GetUserListRequest withUserId(Optional<? extends List<String>> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * Returns users that have memberships to the
     * given organizations.
     * For each organization id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective organization should be included or
     * excluded from the result set.
     * Accepts up to 100 organization ids.
     */
    public GetUserListRequest withOrganizationId(List<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }


    /**
     * Returns users that have memberships to the
     * given organizations.
     * For each organization id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective organization should be included or
     * excluded from the result set.
     * Accepts up to 100 organization ids.
     */
    public GetUserListRequest withOrganizationId(Optional<? extends List<String>> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    public GetUserListRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }


    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    public GetUserListRequest withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Returns users with emails that match the given query, via case-insensitive partial match.
     * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
     */
    public GetUserListRequest withEmailAddressQuery(String emailAddressQuery) {
        Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
        this.emailAddressQuery = Optional.ofNullable(emailAddressQuery);
        return this;
    }


    /**
     * Returns users with emails that match the given query, via case-insensitive partial match.
     * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
     */
    public GetUserListRequest withEmailAddressQuery(Optional<String> emailAddressQuery) {
        Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
        this.emailAddressQuery = emailAddressQuery;
        return this;
    }

    /**
     * Returns users with phone numbers that match the given query, via case-insensitive partial match.
     * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
     */
    public GetUserListRequest withPhoneNumberQuery(String phoneNumberQuery) {
        Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
        this.phoneNumberQuery = Optional.ofNullable(phoneNumberQuery);
        return this;
    }


    /**
     * Returns users with phone numbers that match the given query, via case-insensitive partial match.
     * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
     */
    public GetUserListRequest withPhoneNumberQuery(Optional<String> phoneNumberQuery) {
        Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
        this.phoneNumberQuery = phoneNumberQuery;
        return this;
    }

    /**
     * Returns users with usernames that match the given query, via case-insensitive partial match.
     * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
     */
    public GetUserListRequest withUsernameQuery(String usernameQuery) {
        Utils.checkNotNull(usernameQuery, "usernameQuery");
        this.usernameQuery = Optional.ofNullable(usernameQuery);
        return this;
    }


    /**
     * Returns users with usernames that match the given query, via case-insensitive partial match.
     * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
     */
    public GetUserListRequest withUsernameQuery(Optional<String> usernameQuery) {
        Utils.checkNotNull(usernameQuery, "usernameQuery");
        this.usernameQuery = usernameQuery;
        return this;
    }

    /**
     * Returns users with names that match the given query, via case-insensitive partial match.
     */
    public GetUserListRequest withNameQuery(String nameQuery) {
        Utils.checkNotNull(nameQuery, "nameQuery");
        this.nameQuery = Optional.ofNullable(nameQuery);
        return this;
    }


    /**
     * Returns users with names that match the given query, via case-insensitive partial match.
     */
    public GetUserListRequest withNameQuery(Optional<String> nameQuery) {
        Utils.checkNotNull(nameQuery, "nameQuery");
        this.nameQuery = nameQuery;
        return this;
    }

    /**
     * Returns users which are either banned (`banned=true`) or not banned (`banned=false`).
     */
    public GetUserListRequest withBanned(boolean banned) {
        Utils.checkNotNull(banned, "banned");
        this.banned = Optional.ofNullable(banned);
        return this;
    }


    /**
     * Returns users which are either banned (`banned=true`) or not banned (`banned=false`).
     */
    public GetUserListRequest withBanned(Optional<Boolean> banned) {
        Utils.checkNotNull(banned, "banned");
        this.banned = banned;
        return this;
    }

    /**
     * Returns users whose last session activity was before the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
     */
    public GetUserListRequest withLastActiveAtBefore(long lastActiveAtBefore) {
        Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
        this.lastActiveAtBefore = Optional.ofNullable(lastActiveAtBefore);
        return this;
    }


    /**
     * Returns users whose last session activity was before the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
     */
    public GetUserListRequest withLastActiveAtBefore(Optional<Long> lastActiveAtBefore) {
        Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
        this.lastActiveAtBefore = lastActiveAtBefore;
        return this;
    }

    /**
     * Returns users whose last session activity was after the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
     */
    public GetUserListRequest withLastActiveAtAfter(long lastActiveAtAfter) {
        Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
        this.lastActiveAtAfter = Optional.ofNullable(lastActiveAtAfter);
        return this;
    }


    /**
     * Returns users whose last session activity was after the given date (with millisecond precision).
     * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
     */
    public GetUserListRequest withLastActiveAtAfter(Optional<Long> lastActiveAtAfter) {
        Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
        this.lastActiveAtAfter = lastActiveAtAfter;
        return this;
    }

    /**
     * Returns users that had session activity since the given date.
     * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
     * Deprecated in favor of `last_active_at_after`.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetUserListRequest withLastActiveAtSince(long lastActiveAtSince) {
        Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
        this.lastActiveAtSince = Optional.ofNullable(lastActiveAtSince);
        return this;
    }


    /**
     * Returns users that had session activity since the given date.
     * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
     * Deprecated in favor of `last_active_at_after`.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetUserListRequest withLastActiveAtSince(Optional<Long> lastActiveAtSince) {
        Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
        this.lastActiveAtSince = lastActiveAtSince;
        return this;
    }

    /**
     * Returns users who have been created before the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
     */
    public GetUserListRequest withCreatedAtBefore(long createdAtBefore) {
        Utils.checkNotNull(createdAtBefore, "createdAtBefore");
        this.createdAtBefore = Optional.ofNullable(createdAtBefore);
        return this;
    }


    /**
     * Returns users who have been created before the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
     */
    public GetUserListRequest withCreatedAtBefore(Optional<Long> createdAtBefore) {
        Utils.checkNotNull(createdAtBefore, "createdAtBefore");
        this.createdAtBefore = createdAtBefore;
        return this;
    }

    /**
     * Returns users who have been created after the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
     */
    public GetUserListRequest withCreatedAtAfter(long createdAtAfter) {
        Utils.checkNotNull(createdAtAfter, "createdAtAfter");
        this.createdAtAfter = Optional.ofNullable(createdAtAfter);
        return this;
    }


    /**
     * Returns users who have been created after the given date (with millisecond precision).
     * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
     */
    public GetUserListRequest withCreatedAtAfter(Optional<Long> createdAtAfter) {
        Utils.checkNotNull(createdAtAfter, "createdAtAfter");
        this.createdAtAfter = createdAtAfter;
        return this;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    public GetUserListRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    public GetUserListRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    public GetUserListRequest withOffset(long offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }


    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    public GetUserListRequest withOffset(Optional<Long> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    /**
     * Allows to return users in a particular order.
     * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
     * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
     * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
     */
    public GetUserListRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }


    /**
     * Allows to return users in a particular order.
     * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
     * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
     * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
     */
    public GetUserListRequest withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetUserListRequest other = (GetUserListRequest) o;
        return 
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.web3Wallet, other.web3Wallet) &&
            Utils.enhancedDeepEquals(this.userId, other.userId) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.emailAddressQuery, other.emailAddressQuery) &&
            Utils.enhancedDeepEquals(this.phoneNumberQuery, other.phoneNumberQuery) &&
            Utils.enhancedDeepEquals(this.usernameQuery, other.usernameQuery) &&
            Utils.enhancedDeepEquals(this.nameQuery, other.nameQuery) &&
            Utils.enhancedDeepEquals(this.banned, other.banned) &&
            Utils.enhancedDeepEquals(this.lastActiveAtBefore, other.lastActiveAtBefore) &&
            Utils.enhancedDeepEquals(this.lastActiveAtAfter, other.lastActiveAtAfter) &&
            Utils.enhancedDeepEquals(this.lastActiveAtSince, other.lastActiveAtSince) &&
            Utils.enhancedDeepEquals(this.createdAtBefore, other.createdAtBefore) &&
            Utils.enhancedDeepEquals(this.createdAtAfter, other.createdAtAfter) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.offset, other.offset) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            emailAddress, phoneNumber, externalId,
            username, web3Wallet, userId,
            organizationId, query, emailAddressQuery,
            phoneNumberQuery, usernameQuery, nameQuery,
            banned, lastActiveAtBefore, lastActiveAtAfter,
            lastActiveAtSince, createdAtBefore, createdAtAfter,
            limit, offset, orderBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetUserListRequest.class,
                "emailAddress", emailAddress,
                "phoneNumber", phoneNumber,
                "externalId", externalId,
                "username", username,
                "web3Wallet", web3Wallet,
                "userId", userId,
                "organizationId", organizationId,
                "query", query,
                "emailAddressQuery", emailAddressQuery,
                "phoneNumberQuery", phoneNumberQuery,
                "usernameQuery", usernameQuery,
                "nameQuery", nameQuery,
                "banned", banned,
                "lastActiveAtBefore", lastActiveAtBefore,
                "lastActiveAtAfter", lastActiveAtAfter,
                "lastActiveAtSince", lastActiveAtSince,
                "createdAtBefore", createdAtBefore,
                "createdAtAfter", createdAtAfter,
                "limit", limit,
                "offset", offset,
                "orderBy", orderBy);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<String>> emailAddress = Optional.empty();

        private Optional<? extends List<String>> phoneNumber = Optional.empty();

        private Optional<? extends List<String>> externalId = Optional.empty();

        private Optional<? extends List<String>> username = Optional.empty();

        private Optional<? extends List<String>> web3Wallet = Optional.empty();

        private Optional<? extends List<String>> userId = Optional.empty();

        private Optional<? extends List<String>> organizationId = Optional.empty();

        private Optional<String> query = Optional.empty();

        private Optional<String> emailAddressQuery = Optional.empty();

        private Optional<String> phoneNumberQuery = Optional.empty();

        private Optional<String> usernameQuery = Optional.empty();

        private Optional<String> nameQuery = Optional.empty();

        private Optional<Boolean> banned = Optional.empty();

        private Optional<Long> lastActiveAtBefore = Optional.empty();

        private Optional<Long> lastActiveAtAfter = Optional.empty();

        @Deprecated
        private Optional<Long> lastActiveAtSince = Optional.empty();

        private Optional<Long> createdAtBefore = Optional.empty();

        private Optional<Long> createdAtAfter = Optional.empty();

        private Optional<Long> limit;

        private Optional<Long> offset;

        private Optional<String> orderBy;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Returns users with the specified email addresses.
         * Accepts up to 100 email addresses.
         * Any email addresses not found are ignored.
         */
        public Builder emailAddress(List<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        /**
         * Returns users with the specified email addresses.
         * Accepts up to 100 email addresses.
         * Any email addresses not found are ignored.
         */
        public Builder emailAddress(Optional<? extends List<String>> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }


        /**
         * Returns users with the specified phone numbers.
         * Accepts up to 100 phone numbers.
         * Any phone numbers not found are ignored.
         */
        public Builder phoneNumber(List<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * Returns users with the specified phone numbers.
         * Accepts up to 100 phone numbers.
         * Any phone numbers not found are ignored.
         */
        public Builder phoneNumber(Optional<? extends List<String>> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }


        /**
         * Returns users with the specified external ids.
         * For each external id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective external id should be included or
         * excluded from the result set.
         * Accepts up to 100 external ids.
         * Any external ids not found are ignored.
         */
        public Builder externalId(List<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        /**
         * Returns users with the specified external ids.
         * For each external id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective external id should be included or
         * excluded from the result set.
         * Accepts up to 100 external ids.
         * Any external ids not found are ignored.
         */
        public Builder externalId(Optional<? extends List<String>> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Returns users with the specified usernames.
         * Accepts up to 100 usernames.
         * Any usernames not found are ignored.
         */
        public Builder username(List<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        /**
         * Returns users with the specified usernames.
         * Accepts up to 100 usernames.
         * Any usernames not found are ignored.
         */
        public Builder username(Optional<? extends List<String>> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }


        /**
         * Returns users with the specified web3 wallet addresses.
         * Accepts up to 100 web3 wallet addresses.
         * Any web3 wallet addressed not found are ignored.
         */
        public Builder web3Wallet(List<String> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = Optional.ofNullable(web3Wallet);
            return this;
        }

        /**
         * Returns users with the specified web3 wallet addresses.
         * Accepts up to 100 web3 wallet addresses.
         * Any web3 wallet addressed not found are ignored.
         */
        public Builder web3Wallet(Optional<? extends List<String>> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = web3Wallet;
            return this;
        }


        /**
         * Returns users with the user ids specified.
         * For each user id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective user id should be included or
         * excluded from the result set.
         * Accepts up to 100 user ids.
         * Any user ids not found are ignored.
         */
        public Builder userId(List<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * Returns users with the user ids specified.
         * For each user id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective user id should be included or
         * excluded from the result set.
         * Accepts up to 100 user ids.
         * Any user ids not found are ignored.
         */
        public Builder userId(Optional<? extends List<String>> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }


        /**
         * Returns users that have memberships to the
         * given organizations.
         * For each organization id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective organization should be included or
         * excluded from the result set.
         * Accepts up to 100 organization ids.
         */
        public Builder organizationId(List<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        /**
         * Returns users that have memberships to the
         * given organizations.
         * For each organization id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective organization should be included or
         * excluded from the result set.
         * Accepts up to 100 organization ids.
         */
        public Builder organizationId(Optional<? extends List<String>> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * Returns users that match the given query.
         * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
         * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Returns users that match the given query.
         * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
         * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }


        /**
         * Returns users with emails that match the given query, via case-insensitive partial match.
         * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
         */
        public Builder emailAddressQuery(String emailAddressQuery) {
            Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
            this.emailAddressQuery = Optional.ofNullable(emailAddressQuery);
            return this;
        }

        /**
         * Returns users with emails that match the given query, via case-insensitive partial match.
         * For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
         */
        public Builder emailAddressQuery(Optional<String> emailAddressQuery) {
            Utils.checkNotNull(emailAddressQuery, "emailAddressQuery");
            this.emailAddressQuery = emailAddressQuery;
            return this;
        }


        /**
         * Returns users with phone numbers that match the given query, via case-insensitive partial match.
         * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
         */
        public Builder phoneNumberQuery(String phoneNumberQuery) {
            Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
            this.phoneNumberQuery = Optional.ofNullable(phoneNumberQuery);
            return this;
        }

        /**
         * Returns users with phone numbers that match the given query, via case-insensitive partial match.
         * For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
         */
        public Builder phoneNumberQuery(Optional<String> phoneNumberQuery) {
            Utils.checkNotNull(phoneNumberQuery, "phoneNumberQuery");
            this.phoneNumberQuery = phoneNumberQuery;
            return this;
        }


        /**
         * Returns users with usernames that match the given query, via case-insensitive partial match.
         * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
         */
        public Builder usernameQuery(String usernameQuery) {
            Utils.checkNotNull(usernameQuery, "usernameQuery");
            this.usernameQuery = Optional.ofNullable(usernameQuery);
            return this;
        }

        /**
         * Returns users with usernames that match the given query, via case-insensitive partial match.
         * For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
         */
        public Builder usernameQuery(Optional<String> usernameQuery) {
            Utils.checkNotNull(usernameQuery, "usernameQuery");
            this.usernameQuery = usernameQuery;
            return this;
        }


        /**
         * Returns users with names that match the given query, via case-insensitive partial match.
         */
        public Builder nameQuery(String nameQuery) {
            Utils.checkNotNull(nameQuery, "nameQuery");
            this.nameQuery = Optional.ofNullable(nameQuery);
            return this;
        }

        /**
         * Returns users with names that match the given query, via case-insensitive partial match.
         */
        public Builder nameQuery(Optional<String> nameQuery) {
            Utils.checkNotNull(nameQuery, "nameQuery");
            this.nameQuery = nameQuery;
            return this;
        }


        /**
         * Returns users which are either banned (`banned=true`) or not banned (`banned=false`).
         */
        public Builder banned(boolean banned) {
            Utils.checkNotNull(banned, "banned");
            this.banned = Optional.ofNullable(banned);
            return this;
        }

        /**
         * Returns users which are either banned (`banned=true`) or not banned (`banned=false`).
         */
        public Builder banned(Optional<Boolean> banned) {
            Utils.checkNotNull(banned, "banned");
            this.banned = banned;
            return this;
        }


        /**
         * Returns users whose last session activity was before the given date (with millisecond precision).
         * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
         */
        public Builder lastActiveAtBefore(long lastActiveAtBefore) {
            Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
            this.lastActiveAtBefore = Optional.ofNullable(lastActiveAtBefore);
            return this;
        }

        /**
         * Returns users whose last session activity was before the given date (with millisecond precision).
         * Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
         */
        public Builder lastActiveAtBefore(Optional<Long> lastActiveAtBefore) {
            Utils.checkNotNull(lastActiveAtBefore, "lastActiveAtBefore");
            this.lastActiveAtBefore = lastActiveAtBefore;
            return this;
        }


        /**
         * Returns users whose last session activity was after the given date (with millisecond precision).
         * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
         */
        public Builder lastActiveAtAfter(long lastActiveAtAfter) {
            Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
            this.lastActiveAtAfter = Optional.ofNullable(lastActiveAtAfter);
            return this;
        }

        /**
         * Returns users whose last session activity was after the given date (with millisecond precision).
         * Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
         */
        public Builder lastActiveAtAfter(Optional<Long> lastActiveAtAfter) {
            Utils.checkNotNull(lastActiveAtAfter, "lastActiveAtAfter");
            this.lastActiveAtAfter = lastActiveAtAfter;
            return this;
        }


        /**
         * Returns users that had session activity since the given date.
         * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
         * Deprecated in favor of `last_active_at_after`.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder lastActiveAtSince(long lastActiveAtSince) {
            Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
            this.lastActiveAtSince = Optional.ofNullable(lastActiveAtSince);
            return this;
        }

        /**
         * Returns users that had session activity since the given date.
         * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
         * Deprecated in favor of `last_active_at_after`.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder lastActiveAtSince(Optional<Long> lastActiveAtSince) {
            Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
            this.lastActiveAtSince = lastActiveAtSince;
            return this;
        }


        /**
         * Returns users who have been created before the given date (with millisecond precision).
         * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
         */
        public Builder createdAtBefore(long createdAtBefore) {
            Utils.checkNotNull(createdAtBefore, "createdAtBefore");
            this.createdAtBefore = Optional.ofNullable(createdAtBefore);
            return this;
        }

        /**
         * Returns users who have been created before the given date (with millisecond precision).
         * Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
         */
        public Builder createdAtBefore(Optional<Long> createdAtBefore) {
            Utils.checkNotNull(createdAtBefore, "createdAtBefore");
            this.createdAtBefore = createdAtBefore;
            return this;
        }


        /**
         * Returns users who have been created after the given date (with millisecond precision).
         * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
         */
        public Builder createdAtAfter(long createdAtAfter) {
            Utils.checkNotNull(createdAtAfter, "createdAtAfter");
            this.createdAtAfter = Optional.ofNullable(createdAtAfter);
            return this;
        }

        /**
         * Returns users who have been created after the given date (with millisecond precision).
         * Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
         */
        public Builder createdAtAfter(Optional<Long> createdAtAfter) {
            Utils.checkNotNull(createdAtAfter, "createdAtAfter");
            this.createdAtAfter = createdAtAfter;
            return this;
        }


        /**
         * Applies a limit to the number of results returned.
         * Can be used for paginating the results together with `offset`.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Applies a limit to the number of results returned.
         * Can be used for paginating the results together with `offset`.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        /**
         * Skip the first `offset` results when paginating.
         * Needs to be an integer greater or equal to zero.
         * To be used in conjunction with `limit`.
         */
        public Builder offset(long offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        /**
         * Skip the first `offset` results when paginating.
         * Needs to be an integer greater or equal to zero.
         * To be used in conjunction with `limit`.
         */
        public Builder offset(Optional<Long> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }


        /**
         * Allows to return users in a particular order.
         * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
         * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
         * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
         * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
         * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Allows to return users in a particular order.
         * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
         * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
         * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
         * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
         * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
         */
        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }

        public GetUserListRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (offset == null) {
                offset = _SINGLETON_VALUE_Offset.value();
            }
            if (orderBy == null) {
                orderBy = _SINGLETON_VALUE_OrderBy.value();
            }

            return new GetUserListRequest(
                emailAddress, phoneNumber, externalId,
                username, web3Wallet, userId,
                organizationId, query, emailAddressQuery,
                phoneNumberQuery, usernameQuery, nameQuery,
                banned, lastActiveAtBefore, lastActiveAtAfter,
                lastActiveAtSince, createdAtBefore, createdAtAfter,
                limit, offset, orderBy);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "10",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Offset =
                new LazySingletonValue<>(
                        "offset",
                        "0",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_OrderBy =
                new LazySingletonValue<>(
                        "order_by",
                        "\"-created_at\"",
                        new TypeReference<Optional<String>>() {});
    }
}
