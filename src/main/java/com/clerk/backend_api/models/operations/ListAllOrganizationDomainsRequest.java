/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class ListAllOrganizationDomainsRequest {
    /**
     * The ID of the organization to filter domains by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_id")
    private Optional<String> organizationId;

    /**
     * Filter by verification status
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=verified")
    private Optional<? extends Verified> verified;

    /**
     * Filter by enrollment mode
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=enrollment_mode")
    private Optional<? extends List<EnrollmentMode>> enrollmentMode;

    /**
     * Search domains by name or organization ID.
     * If the query starts with "org_", it will search by exact organization ID match.
     * Otherwise, it performs a case-insensitive partial match on the domain name.
     * 
     * <p>Note: An empty string or whitespace-only value is not allowed and will result in a validation error.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private Optional<String> query;

    /**
     * Allows to return organization domains in a particular order.
     * At the moment, you can order the returned domains by their `name` or `created_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended to the property to order
     * by.
     * For example, if you want domains to be returned in descending order according to their `created_at`
     * property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied.
     * Defaults to `-created_at`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<String> orderBy;

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Long> offset;

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    @JsonCreator
    public ListAllOrganizationDomainsRequest(
            Optional<String> organizationId,
            Optional<? extends Verified> verified,
            Optional<? extends List<EnrollmentMode>> enrollmentMode,
            Optional<String> query,
            Optional<String> orderBy,
            Optional<Long> offset,
            Optional<Long> limit) {
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(verified, "verified");
        Utils.checkNotNull(enrollmentMode, "enrollmentMode");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(limit, "limit");
        this.organizationId = organizationId;
        this.verified = verified;
        this.enrollmentMode = enrollmentMode;
        this.query = query;
        this.orderBy = orderBy;
        this.offset = offset;
        this.limit = limit;
    }
    
    public ListAllOrganizationDomainsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * The ID of the organization to filter domains by
     */
    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    /**
     * Filter by verification status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Verified> verified() {
        return (Optional<Verified>) verified;
    }

    /**
     * Filter by enrollment mode
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EnrollmentMode>> enrollmentMode() {
        return (Optional<List<EnrollmentMode>>) enrollmentMode;
    }

    /**
     * Search domains by name or organization ID.
     * If the query starts with "org_", it will search by exact organization ID match.
     * Otherwise, it performs a case-insensitive partial match on the domain name.
     * 
     * <p>Note: An empty string or whitespace-only value is not allowed and will result in a validation error.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * Allows to return organization domains in a particular order.
     * At the moment, you can order the returned domains by their `name` or `created_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended to the property to order
     * by.
     * For example, if you want domains to be returned in descending order according to their `created_at`
     * property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied.
     * Defaults to `-created_at`.
     */
    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    @JsonIgnore
    public Optional<Long> offset() {
        return offset;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the organization to filter domains by
     */
    public ListAllOrganizationDomainsRequest withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }


    /**
     * The ID of the organization to filter domains by
     */
    public ListAllOrganizationDomainsRequest withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Filter by verification status
     */
    public ListAllOrganizationDomainsRequest withVerified(Verified verified) {
        Utils.checkNotNull(verified, "verified");
        this.verified = Optional.ofNullable(verified);
        return this;
    }


    /**
     * Filter by verification status
     */
    public ListAllOrganizationDomainsRequest withVerified(Optional<? extends Verified> verified) {
        Utils.checkNotNull(verified, "verified");
        this.verified = verified;
        return this;
    }

    /**
     * Filter by enrollment mode
     */
    public ListAllOrganizationDomainsRequest withEnrollmentMode(List<EnrollmentMode> enrollmentMode) {
        Utils.checkNotNull(enrollmentMode, "enrollmentMode");
        this.enrollmentMode = Optional.ofNullable(enrollmentMode);
        return this;
    }


    /**
     * Filter by enrollment mode
     */
    public ListAllOrganizationDomainsRequest withEnrollmentMode(Optional<? extends List<EnrollmentMode>> enrollmentMode) {
        Utils.checkNotNull(enrollmentMode, "enrollmentMode");
        this.enrollmentMode = enrollmentMode;
        return this;
    }

    /**
     * Search domains by name or organization ID.
     * If the query starts with "org_", it will search by exact organization ID match.
     * Otherwise, it performs a case-insensitive partial match on the domain name.
     * 
     * <p>Note: An empty string or whitespace-only value is not allowed and will result in a validation error.
     */
    public ListAllOrganizationDomainsRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }


    /**
     * Search domains by name or organization ID.
     * If the query starts with "org_", it will search by exact organization ID match.
     * Otherwise, it performs a case-insensitive partial match on the domain name.
     * 
     * <p>Note: An empty string or whitespace-only value is not allowed and will result in a validation error.
     */
    public ListAllOrganizationDomainsRequest withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Allows to return organization domains in a particular order.
     * At the moment, you can order the returned domains by their `name` or `created_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended to the property to order
     * by.
     * For example, if you want domains to be returned in descending order according to their `created_at`
     * property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied.
     * Defaults to `-created_at`.
     */
    public ListAllOrganizationDomainsRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }


    /**
     * Allows to return organization domains in a particular order.
     * At the moment, you can order the returned domains by their `name` or `created_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended to the property to order
     * by.
     * For example, if you want domains to be returned in descending order according to their `created_at`
     * property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied.
     * Defaults to `-created_at`.
     */
    public ListAllOrganizationDomainsRequest withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    public ListAllOrganizationDomainsRequest withOffset(long offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }


    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    public ListAllOrganizationDomainsRequest withOffset(Optional<Long> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    public ListAllOrganizationDomainsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    public ListAllOrganizationDomainsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllOrganizationDomainsRequest other = (ListAllOrganizationDomainsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.verified, other.verified) &&
            Utils.enhancedDeepEquals(this.enrollmentMode, other.enrollmentMode) &&
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.offset, other.offset) &&
            Utils.enhancedDeepEquals(this.limit, other.limit);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            organizationId, verified, enrollmentMode,
            query, orderBy, offset,
            limit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllOrganizationDomainsRequest.class,
                "organizationId", organizationId,
                "verified", verified,
                "enrollmentMode", enrollmentMode,
                "query", query,
                "orderBy", orderBy,
                "offset", offset,
                "limit", limit);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> organizationId = Optional.empty();

        private Optional<? extends Verified> verified = Optional.empty();

        private Optional<? extends List<EnrollmentMode>> enrollmentMode = Optional.empty();

        private Optional<String> query = Optional.empty();

        private Optional<String> orderBy;

        private Optional<Long> offset;

        private Optional<Long> limit;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the organization to filter domains by
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        /**
         * The ID of the organization to filter domains by
         */
        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * Filter by verification status
         */
        public Builder verified(Verified verified) {
            Utils.checkNotNull(verified, "verified");
            this.verified = Optional.ofNullable(verified);
            return this;
        }

        /**
         * Filter by verification status
         */
        public Builder verified(Optional<? extends Verified> verified) {
            Utils.checkNotNull(verified, "verified");
            this.verified = verified;
            return this;
        }


        /**
         * Filter by enrollment mode
         */
        public Builder enrollmentMode(List<EnrollmentMode> enrollmentMode) {
            Utils.checkNotNull(enrollmentMode, "enrollmentMode");
            this.enrollmentMode = Optional.ofNullable(enrollmentMode);
            return this;
        }

        /**
         * Filter by enrollment mode
         */
        public Builder enrollmentMode(Optional<? extends List<EnrollmentMode>> enrollmentMode) {
            Utils.checkNotNull(enrollmentMode, "enrollmentMode");
            this.enrollmentMode = enrollmentMode;
            return this;
        }


        /**
         * Search domains by name or organization ID.
         * If the query starts with "org_", it will search by exact organization ID match.
         * Otherwise, it performs a case-insensitive partial match on the domain name.
         * 
         * <p>Note: An empty string or whitespace-only value is not allowed and will result in a validation error.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Search domains by name or organization ID.
         * If the query starts with "org_", it will search by exact organization ID match.
         * Otherwise, it performs a case-insensitive partial match on the domain name.
         * 
         * <p>Note: An empty string or whitespace-only value is not allowed and will result in a validation error.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }


        /**
         * Allows to return organization domains in a particular order.
         * At the moment, you can order the returned domains by their `name` or `created_at`.
         * In order to specify the direction, you can use the `+/-` symbols prepended to the property to order
         * by.
         * For example, if you want domains to be returned in descending order according to their `created_at`
         * property, you can use `-created_at`.
         * If you don't use `+` or `-`, then `+` is implied.
         * Defaults to `-created_at`.
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Allows to return organization domains in a particular order.
         * At the moment, you can order the returned domains by their `name` or `created_at`.
         * In order to specify the direction, you can use the `+/-` symbols prepended to the property to order
         * by.
         * For example, if you want domains to be returned in descending order according to their `created_at`
         * property, you can use `-created_at`.
         * If you don't use `+` or `-`, then `+` is implied.
         * Defaults to `-created_at`.
         */
        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        /**
         * Skip the first `offset` results when paginating.
         * Needs to be an integer greater or equal to zero.
         * To be used in conjunction with `limit`.
         */
        public Builder offset(long offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        /**
         * Skip the first `offset` results when paginating.
         * Needs to be an integer greater or equal to zero.
         * To be used in conjunction with `limit`.
         */
        public Builder offset(Optional<Long> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }


        /**
         * Applies a limit to the number of results returned.
         * Can be used for paginating the results together with `offset`.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Applies a limit to the number of results returned.
         * Can be used for paginating the results together with `offset`.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        public ListAllOrganizationDomainsRequest build() {
            if (orderBy == null) {
                orderBy = _SINGLETON_VALUE_OrderBy.value();
            }
            if (offset == null) {
                offset = _SINGLETON_VALUE_Offset.value();
            }
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }

            return new ListAllOrganizationDomainsRequest(
                organizationId, verified, enrollmentMode,
                query, orderBy, offset,
                limit);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_OrderBy =
                new LazySingletonValue<>(
                        "order_by",
                        "\"-created_at\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Offset =
                new LazySingletonValue<>(
                        "offset",
                        "0",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "10",
                        new TypeReference<Optional<Long>>() {});
    }
}
