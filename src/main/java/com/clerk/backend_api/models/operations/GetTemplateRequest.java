/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.clerk.backend_api.models.operations;
import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class GetTemplateRequest {

    /**
     * The type of templates to retrieve (email or SMS)
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_type")
    private PathParamTemplateType templateType;

    /**
     * The slug (i.e. machine-friendly name) of the template to retrieve
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=slug")
    private String slug;

    @JsonCreator
    public GetTemplateRequest(
            PathParamTemplateType templateType,
            String slug) {
        Utils.checkNotNull(templateType, "templateType");
        Utils.checkNotNull(slug, "slug");
        this.templateType = templateType;
        this.slug = slug;
    }

    /**
     * The type of templates to retrieve (email or SMS)
     */
    @JsonIgnore
    public PathParamTemplateType templateType() {
        return templateType;
    }

    /**
     * The slug (i.e. machine-friendly name) of the template to retrieve
     */
    @JsonIgnore
    public String slug() {
        return slug;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The type of templates to retrieve (email or SMS)
     */
    public GetTemplateRequest withTemplateType(PathParamTemplateType templateType) {
        Utils.checkNotNull(templateType, "templateType");
        this.templateType = templateType;
        return this;
    }

    /**
     * The slug (i.e. machine-friendly name) of the template to retrieve
     */
    public GetTemplateRequest withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTemplateRequest other = (GetTemplateRequest) o;
        return 
            Objects.deepEquals(this.templateType, other.templateType) &&
            Objects.deepEquals(this.slug, other.slug);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            templateType,
            slug);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTemplateRequest.class,
                "templateType", templateType,
                "slug", slug);
    }
    
    public final static class Builder {
 
        private PathParamTemplateType templateType;
 
        private String slug;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of templates to retrieve (email or SMS)
         */
        public Builder templateType(PathParamTemplateType templateType) {
            Utils.checkNotNull(templateType, "templateType");
            this.templateType = templateType;
            return this;
        }

        /**
         * The slug (i.e. machine-friendly name) of the template to retrieve
         */
        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }
        
        public GetTemplateRequest build() {
            return new GetTemplateRequest(
                templateType,
                slug);
        }
    }
}

