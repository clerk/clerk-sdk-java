/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;


public class RotateMachineSecretKeyRequestBody {
    /**
     * The time in seconds that the previous secret key will remain valid after rotation.
     * This ensures a graceful transition period for updating applications with the new secret key.
     * Set to 0 to immediately expire the previous key. Maximum value is 8 hours (28800 seconds).
     */
    @JsonProperty("previous_token_ttl")
    private long previousTokenTtl;

    @JsonCreator
    public RotateMachineSecretKeyRequestBody(
            @JsonProperty("previous_token_ttl") long previousTokenTtl) {
        Utils.checkNotNull(previousTokenTtl, "previousTokenTtl");
        this.previousTokenTtl = previousTokenTtl;
    }

    /**
     * The time in seconds that the previous secret key will remain valid after rotation.
     * This ensures a graceful transition period for updating applications with the new secret key.
     * Set to 0 to immediately expire the previous key. Maximum value is 8 hours (28800 seconds).
     */
    @JsonIgnore
    public long previousTokenTtl() {
        return previousTokenTtl;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The time in seconds that the previous secret key will remain valid after rotation.
     * This ensures a graceful transition period for updating applications with the new secret key.
     * Set to 0 to immediately expire the previous key. Maximum value is 8 hours (28800 seconds).
     */
    public RotateMachineSecretKeyRequestBody withPreviousTokenTtl(long previousTokenTtl) {
        Utils.checkNotNull(previousTokenTtl, "previousTokenTtl");
        this.previousTokenTtl = previousTokenTtl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RotateMachineSecretKeyRequestBody other = (RotateMachineSecretKeyRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.previousTokenTtl, other.previousTokenTtl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            previousTokenTtl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RotateMachineSecretKeyRequestBody.class,
                "previousTokenTtl", previousTokenTtl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long previousTokenTtl;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The time in seconds that the previous secret key will remain valid after rotation.
         * This ensures a graceful transition period for updating applications with the new secret key.
         * Set to 0 to immediately expire the previous key. Maximum value is 8 hours (28800 seconds).
         */
        public Builder previousTokenTtl(long previousTokenTtl) {
            Utils.checkNotNull(previousTokenTtl, "previousTokenTtl");
            this.previousTokenTtl = previousTokenTtl;
            return this;
        }

        public RotateMachineSecretKeyRequestBody build() {

            return new RotateMachineSecretKeyRequestBody(
                previousTokenTtl);
        }

    }
}
