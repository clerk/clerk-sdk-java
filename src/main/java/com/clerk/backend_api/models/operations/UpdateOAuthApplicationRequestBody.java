/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.clerk.backend_api.models.operations;
import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdateOAuthApplicationRequestBody {

    /**
     * The new name of the OAuth application.
     * Max length: 256
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * An array of redirect URIs of the new OAuth application
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_uris")
    private JsonNullable<? extends List<String>> redirectUris;

    /**
     * The new callback URL of the OAuth application
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback_url")
    @Deprecated
    private JsonNullable<String> callbackUrl;

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private JsonNullable<String> scopes;

    /**
     * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public")
    private JsonNullable<Boolean> public_;

    @JsonCreator
    public UpdateOAuthApplicationRequestBody(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("redirect_uris") JsonNullable<? extends List<String>> redirectUris,
            @JsonProperty("callback_url") JsonNullable<String> callbackUrl,
            @JsonProperty("scopes") JsonNullable<String> scopes,
            @JsonProperty("public") JsonNullable<Boolean> public_) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(redirectUris, "redirectUris");
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        Utils.checkNotNull(scopes, "scopes");
        Utils.checkNotNull(public_, "public_");
        this.name = name;
        this.redirectUris = redirectUris;
        this.callbackUrl = callbackUrl;
        this.scopes = scopes;
        this.public_ = public_;
    }
    
    public UpdateOAuthApplicationRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The new name of the OAuth application.
     * Max length: 256
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * An array of redirect URIs of the new OAuth application
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> redirectUris() {
        return (JsonNullable<List<String>>) redirectUris;
    }

    /**
     * The new callback URL of the OAuth application
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> callbackUrl() {
        return callbackUrl;
    }

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    @JsonIgnore
    public JsonNullable<String> scopes() {
        return scopes;
    }

    /**
     * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
     */
    @JsonIgnore
    public JsonNullable<Boolean> public_() {
        return public_;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The new name of the OAuth application.
     * Max length: 256
     */
    public UpdateOAuthApplicationRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The new name of the OAuth application.
     * Max length: 256
     */
    public UpdateOAuthApplicationRequestBody withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * An array of redirect URIs of the new OAuth application
     */
    public UpdateOAuthApplicationRequestBody withRedirectUris(List<String> redirectUris) {
        Utils.checkNotNull(redirectUris, "redirectUris");
        this.redirectUris = JsonNullable.of(redirectUris);
        return this;
    }

    /**
     * An array of redirect URIs of the new OAuth application
     */
    public UpdateOAuthApplicationRequestBody withRedirectUris(JsonNullable<? extends List<String>> redirectUris) {
        Utils.checkNotNull(redirectUris, "redirectUris");
        this.redirectUris = redirectUris;
        return this;
    }

    /**
     * The new callback URL of the OAuth application
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public UpdateOAuthApplicationRequestBody withCallbackUrl(String callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = JsonNullable.of(callbackUrl);
        return this;
    }

    /**
     * The new callback URL of the OAuth application
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public UpdateOAuthApplicationRequestBody withCallbackUrl(JsonNullable<String> callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = callbackUrl;
        return this;
    }

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    public UpdateOAuthApplicationRequestBody withScopes(String scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = JsonNullable.of(scopes);
        return this;
    }

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    public UpdateOAuthApplicationRequestBody withScopes(JsonNullable<String> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    /**
     * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
     */
    public UpdateOAuthApplicationRequestBody withPublic(boolean public_) {
        Utils.checkNotNull(public_, "public_");
        this.public_ = JsonNullable.of(public_);
        return this;
    }

    /**
     * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
     */
    public UpdateOAuthApplicationRequestBody withPublic(JsonNullable<Boolean> public_) {
        Utils.checkNotNull(public_, "public_");
        this.public_ = public_;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateOAuthApplicationRequestBody other = (UpdateOAuthApplicationRequestBody) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.redirectUris, other.redirectUris) &&
            Objects.deepEquals(this.callbackUrl, other.callbackUrl) &&
            Objects.deepEquals(this.scopes, other.scopes) &&
            Objects.deepEquals(this.public_, other.public_);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            redirectUris,
            callbackUrl,
            scopes,
            public_);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateOAuthApplicationRequestBody.class,
                "name", name,
                "redirectUris", redirectUris,
                "callbackUrl", callbackUrl,
                "scopes", scopes,
                "public_", public_);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> redirectUris = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> callbackUrl = JsonNullable.undefined();
 
        private JsonNullable<String> scopes;
 
        private JsonNullable<Boolean> public_ = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The new name of the OAuth application.
         * Max length: 256
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The new name of the OAuth application.
         * Max length: 256
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * An array of redirect URIs of the new OAuth application
         */
        public Builder redirectUris(List<String> redirectUris) {
            Utils.checkNotNull(redirectUris, "redirectUris");
            this.redirectUris = JsonNullable.of(redirectUris);
            return this;
        }

        /**
         * An array of redirect URIs of the new OAuth application
         */
        public Builder redirectUris(JsonNullable<? extends List<String>> redirectUris) {
            Utils.checkNotNull(redirectUris, "redirectUris");
            this.redirectUris = redirectUris;
            return this;
        }

        /**
         * The new callback URL of the OAuth application
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder callbackUrl(String callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = JsonNullable.of(callbackUrl);
            return this;
        }

        /**
         * The new callback URL of the OAuth application
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder callbackUrl(JsonNullable<String> callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = callbackUrl;
            return this;
        }

        /**
         * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
         */
        public Builder scopes(String scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = JsonNullable.of(scopes);
            return this;
        }

        /**
         * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
         */
        public Builder scopes(JsonNullable<String> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }

        /**
         * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
         */
        public Builder public_(boolean public_) {
            Utils.checkNotNull(public_, "public_");
            this.public_ = JsonNullable.of(public_);
            return this;
        }

        /**
         * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
         */
        public Builder public_(JsonNullable<Boolean> public_) {
            Utils.checkNotNull(public_, "public_");
            this.public_ = public_;
            return this;
        }
        
        public UpdateOAuthApplicationRequestBody build() {
            if (scopes == null) {
                scopes = _SINGLETON_VALUE_Scopes.value();
            }            return new UpdateOAuthApplicationRequestBody(
                name,
                redirectUris,
                callbackUrl,
                scopes,
                public_);
        }

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_Scopes =
                new LazySingletonValue<>(
                        "scopes",
                        "\"profile email\"",
                        new TypeReference<JsonNullable<String>>() {});
    }
}

