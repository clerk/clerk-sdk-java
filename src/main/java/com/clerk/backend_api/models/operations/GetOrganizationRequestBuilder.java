/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.SDKConfiguration;
import com.clerk.backend_api.operations.GetOrganization;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import com.clerk.backend_api.utils.RetryConfig;
import com.clerk.backend_api.utils.Utils;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;

public class GetOrganizationRequestBuilder {

    private String organizationId;
    private Optional<Boolean> includeMembersCount = Optional.empty();
    private Optional<Boolean> includeMissingMemberWithElevatedPermissions = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public GetOrganizationRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public GetOrganizationRequestBuilder organizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }
                
    public GetOrganizationRequestBuilder includeMembersCount(boolean includeMembersCount) {
        Utils.checkNotNull(includeMembersCount, "includeMembersCount");
        this.includeMembersCount = Optional.of(includeMembersCount);
        return this;
    }

    public GetOrganizationRequestBuilder includeMembersCount(Optional<Boolean> includeMembersCount) {
        Utils.checkNotNull(includeMembersCount, "includeMembersCount");
        this.includeMembersCount = includeMembersCount;
        return this;
    }
                
    public GetOrganizationRequestBuilder includeMissingMemberWithElevatedPermissions(boolean includeMissingMemberWithElevatedPermissions) {
        Utils.checkNotNull(includeMissingMemberWithElevatedPermissions, "includeMissingMemberWithElevatedPermissions");
        this.includeMissingMemberWithElevatedPermissions = Optional.of(includeMissingMemberWithElevatedPermissions);
        return this;
    }

    public GetOrganizationRequestBuilder includeMissingMemberWithElevatedPermissions(Optional<Boolean> includeMissingMemberWithElevatedPermissions) {
        Utils.checkNotNull(includeMissingMemberWithElevatedPermissions, "includeMissingMemberWithElevatedPermissions");
        this.includeMissingMemberWithElevatedPermissions = includeMissingMemberWithElevatedPermissions;
        return this;
    }
                
    public GetOrganizationRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public GetOrganizationRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private GetOrganizationRequest buildRequest() {

        GetOrganizationRequest request = new GetOrganizationRequest(organizationId,
            includeMembersCount,
            includeMissingMemberWithElevatedPermissions);

        return request;
    }

    public GetOrganizationResponse call() {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<GetOrganizationRequest, GetOrganizationResponse> operation
              = new GetOrganization.Sync(sdkConfiguration, options, _headers);
        GetOrganizationRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
