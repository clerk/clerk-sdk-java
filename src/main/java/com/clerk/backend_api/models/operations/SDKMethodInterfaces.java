/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public class SDKMethodInterfaces {


    public interface MethodCallGetPublicInterstitial {
        GetPublicInterstitialResponse getInterstitial(
            Optional<String> frontendApi,
            Optional<String> publishableKey) throws Exception;
    }


    public interface MethodCallGetJWKS {
        GetJWKSResponse getDirect() throws Exception;
    }


    public interface MethodCallGetClientList {
        GetClientListResponse list(
            Optional<Long> limit,
            Optional<Long> offset) throws Exception;
    }


    public interface MethodCallVerifyClient {
        VerifyClientResponse verify(
            Optional<? extends VerifyClientRequestBody> request) throws Exception;
    }


    public interface MethodCallGetClient {
        GetClientResponse get(
            String clientId) throws Exception;
    }


    public interface MethodCallCreateEmailAddress {
        CreateEmailAddressResponse create(
            Optional<? extends CreateEmailAddressRequestBody> request) throws Exception;
    }


    public interface MethodCallGetEmailAddress {
        GetEmailAddressResponse get(
            String emailAddressId) throws Exception;
    }


    public interface MethodCallDeleteEmailAddress {
        DeleteEmailAddressResponse delete(
            String emailAddressId) throws Exception;
    }


    public interface MethodCallUpdateEmailAddress {
        UpdateEmailAddressResponse update(
            String emailAddressId,
            Optional<? extends UpdateEmailAddressRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallCreatePhoneNumber {
        CreatePhoneNumberResponse create(
            Optional<? extends CreatePhoneNumberRequestBody> request) throws Exception;
    }


    public interface MethodCallGetPhoneNumber {
        GetPhoneNumberResponse get(
            String phoneNumberId) throws Exception;
    }


    public interface MethodCallDeletePhoneNumber {
        DeletePhoneNumberResponse delete(
            String phoneNumberId) throws Exception;
    }


    public interface MethodCallUpdatePhoneNumber {
        UpdatePhoneNumberResponse update(
            String phoneNumberId,
            Optional<? extends UpdatePhoneNumberRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallGetSessionList {
        GetSessionListResponse list(
            GetSessionListRequest request) throws Exception;
    }


    public interface MethodCallCreateSession {
        CreateSessionResponse createSession(
            Optional<? extends CreateSessionRequestBody> request) throws Exception;
    }


    public interface MethodCallGetSession {
        GetSessionResponse get(
            String sessionId) throws Exception;
    }


    public interface MethodCallRevokeSession {
        RevokeSessionResponse revoke(
            String sessionId) throws Exception;
    }


    public interface MethodCallVerifySession {
        VerifySessionResponse verify(
            String sessionId,
            Optional<? extends VerifySessionRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallCreateSessionToken {
        CreateSessionTokenResponse createSessionToken(
            String sessionId,
            Optional<? extends CreateSessionTokenRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallCreateSessionTokenFromTemplate {
        CreateSessionTokenFromTemplateResponse createTokenFromTemplate(
            String sessionId,
            String templateName,
            Optional<? extends CreateSessionTokenFromTemplateRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallGetTemplateList {
        GetTemplateListResponse list(
            TemplateType templateType) throws Exception;
    }


    public interface MethodCallRevertTemplate {
        RevertTemplateResponse revert(
            RevertTemplatePathParamTemplateType templateType,
            String slug) throws Exception;
    }


    public interface MethodCallGetTemplate {
        GetTemplateResponse get(
            PathParamTemplateType templateType,
            String slug) throws Exception;
    }


    public interface MethodCallToggleTemplateDelivery {
        ToggleTemplateDeliveryResponse toggleTemplateDelivery(
            ToggleTemplateDeliveryPathParamTemplateType templateType,
            String slug,
            Optional<? extends ToggleTemplateDeliveryRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallUpsertTemplate {
        UpsertTemplateResponse upsert(
            UpsertTemplatePathParamTemplateType templateType,
            String slug,
            Optional<? extends UpsertTemplateRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallPreviewTemplate {
        PreviewTemplateResponse preview(
            String templateType,
            String slug,
            Optional<? extends PreviewTemplateRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallGetUserList {
        GetUserListResponse list(
            GetUserListRequest request) throws Exception;
    }


    public interface MethodCallCreateUser {
        CreateUserResponse create(
            CreateUserRequestBody request) throws Exception;
    }


    public interface MethodCallGetUsersCount {
        GetUsersCountResponse count(
            GetUsersCountRequest request) throws Exception;
    }


    public interface MethodCallGetUser {
        GetUserResponse get(
            String userId) throws Exception;
    }


    public interface MethodCallUpdateUser {
        UpdateUserResponse update(
            String userId,
            UpdateUserRequestBody requestBody) throws Exception;
    }


    public interface MethodCallDeleteUser {
        DeleteUserResponse delete(
            String userId) throws Exception;
    }


    public interface MethodCallBanUser {
        BanUserResponse ban(
            String userId) throws Exception;
    }


    public interface MethodCallUnbanUser {
        UnbanUserResponse unban(
            String userId) throws Exception;
    }


    public interface MethodCallLockUser {
        LockUserResponse lock(
            String userId) throws Exception;
    }


    public interface MethodCallUnlockUser {
        UnlockUserResponse unlock(
            String userId) throws Exception;
    }


    public interface MethodCallSetUserProfileImage {
        SetUserProfileImageResponse setProfileImage(
            String userId,
            SetUserProfileImageRequestBody requestBody) throws Exception;
    }


    public interface MethodCallDeleteUserProfileImage {
        DeleteUserProfileImageResponse deleteProfileImage(
            String userId) throws Exception;
    }


    public interface MethodCallUpdateUserMetadata {
        UpdateUserMetadataResponse updateMetadata(
            String userId,
            Optional<? extends UpdateUserMetadataRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallGetOAuthAccessToken {
        GetOAuthAccessTokenResponse getOAuthAccessToken(
            String userId,
            String provider) throws Exception;
    }


    public interface MethodCallUsersGetOrganizationMemberships {
        UsersGetOrganizationMembershipsResponse getOrganizationMemberships(
            String userId,
            Optional<Long> limit,
            Optional<Long> offset) throws Exception;
    }


    public interface MethodCallUsersGetOrganizationInvitations {
        UsersGetOrganizationInvitationsResponse getOrganizationInvitations(
            String userId,
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<? extends QueryParamStatus> status) throws Exception;
    }


    public interface MethodCallVerifyPassword {
        VerifyPasswordResponse verifyPassword(
            String userId,
            Optional<? extends VerifyPasswordRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallVerifyTOTP {
        VerifyTOTPResponse verifyTOTP(
            String userId,
            Optional<? extends VerifyTOTPRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallDisableMFA {
        DisableMFAResponse disableMFA(
            String userId) throws Exception;
    }


    public interface MethodCallDeleteBackupCode {
        DeleteBackupCodeResponse deleteBackupCodes(
            String userId) throws Exception;
    }


    public interface MethodCallUserPasskeyDelete {
        UserPasskeyDeleteResponse deletePasskey(
            String userId,
            String passkeyIdentificationId) throws Exception;
    }


    public interface MethodCallUserWeb3WalletDelete {
        UserWeb3WalletDeleteResponse deleteWeb3Wallet(
            String userId,
            String web3WalletIdentificationId) throws Exception;
    }


    public interface MethodCallDeleteTOTP {
        DeleteTOTPResponse deleteTotp(
            String userId) throws Exception;
    }


    public interface MethodCallDeleteExternalAccount {
        DeleteExternalAccountResponse deleteExternalAccount(
            String userId,
            String externalAccountId) throws Exception;
    }


    public interface MethodCallCreateInvitation {
        CreateInvitationResponse create(
            Optional<? extends CreateInvitationRequestBody> request) throws Exception;
    }


    public interface MethodCallListInvitations {
        ListInvitationsResponse list(
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<? extends ListInvitationsQueryParamStatus> status,
            Optional<String> query) throws Exception;
    }


    public interface MethodCallCreateBulkInvitations {
        CreateBulkInvitationsResponse createBulkInvitations(
            Optional<? extends List<RequestBody>> request) throws Exception;
    }


    public interface MethodCallRevokeInvitation {
        RevokeInvitationResponse revoke(
            String invitationId) throws Exception;
    }


    public interface MethodCallListInstanceOrganizationInvitations {
        ListInstanceOrganizationInvitationsResponse getAll(
            ListInstanceOrganizationInvitationsRequest request) throws Exception;
    }


    public interface MethodCallCreateOrganizationInvitation {
        CreateOrganizationInvitationResponse create(
            String organizationId,
            Optional<? extends CreateOrganizationInvitationRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallListOrganizationInvitations {
        ListOrganizationInvitationsResponse list(
            String organizationId,
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<? extends ListOrganizationInvitationsQueryParamStatus> status) throws Exception;
    }


    public interface MethodCallCreateOrganizationInvitationBulk {
        CreateOrganizationInvitationBulkResponse bulkCreate(
            String organizationId,
            List<CreateOrganizationInvitationBulkRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallListPendingOrganizationInvitations {
        ListPendingOrganizationInvitationsResponse listPending(
            String organizationId,
            Optional<Long> limit,
            Optional<Long> offset) throws Exception;
    }


    public interface MethodCallGetOrganizationInvitation {
        GetOrganizationInvitationResponse get(
            String organizationId,
            String invitationId) throws Exception;
    }


    public interface MethodCallRevokeOrganizationInvitation {
        RevokeOrganizationInvitationResponse revoke(
            String organizationId,
            String invitationId,
            Optional<? extends RevokeOrganizationInvitationRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallListAllowlistIdentifiers {
        ListAllowlistIdentifiersResponse listAllowlistIdentifiersDirect() throws Exception;
    }


    public interface MethodCallCreateAllowlistIdentifier {
        CreateAllowlistIdentifierResponse createAllowlistIdentifier(
            Optional<? extends CreateAllowlistIdentifierRequestBody> request) throws Exception;
    }


    public interface MethodCallCreateBlocklistIdentifier {
        CreateBlocklistIdentifierResponse createBlocklistIdentifier(
            Optional<? extends CreateBlocklistIdentifierRequestBody> request) throws Exception;
    }


    public interface MethodCallDeleteBlocklistIdentifier {
        DeleteBlocklistIdentifierResponse deleteBlocklistIdentifier(
            String identifierId) throws Exception;
    }


    public interface MethodCallDeleteAllowlistIdentifier {
        DeleteAllowlistIdentifierResponse delete(
            String identifierId) throws Exception;
    }


    public interface MethodCallListBlocklistIdentifiers {
        ListBlocklistIdentifiersResponse listDirect() throws Exception;
    }


    public interface MethodCallUpdateInstanceAuthConfig {
        UpdateInstanceAuthConfigResponse updateInstanceSettings(
            Optional<? extends UpdateInstanceAuthConfigRequestBody> request) throws Exception;
    }


    public interface MethodCallUpdateProductionInstanceDomain {
        UpdateProductionInstanceDomainResponse updateDomain(
            Optional<? extends UpdateProductionInstanceDomainRequestBody> request) throws Exception;
    }


    public interface MethodCallChangeProductionInstanceDomain {
        ChangeProductionInstanceDomainResponse changeProductionInstanceDomain(
            Optional<? extends ChangeProductionInstanceDomainRequestBody> request) throws Exception;
    }


    public interface MethodCallCreateActorToken {
        CreateActorTokenResponse create(
            Optional<? extends CreateActorTokenRequestBody> request) throws Exception;
    }


    public interface MethodCallRevokeActorToken {
        RevokeActorTokenResponse revoke(
            String actorTokenId) throws Exception;
    }


    public interface MethodCallListDomains {
        ListDomainsResponse listDirect() throws Exception;
    }


    public interface MethodCallAddDomain {
        AddDomainResponse add(
            Optional<? extends AddDomainRequestBody> request) throws Exception;
    }


    public interface MethodCallDeleteDomain {
        DeleteDomainResponse delete(
            String domainId) throws Exception;
    }


    public interface MethodCallUpdateDomain {
        UpdateDomainResponse update(
            String domainId,
            UpdateDomainRequestBody requestBody) throws Exception;
    }


    public interface MethodCallGetInstance {
        GetInstanceResponse getInstanceDirect() throws Exception;
    }


    public interface MethodCallUpdateInstance {
        UpdateInstanceResponse update(
            Optional<? extends UpdateInstanceRequestBody> request) throws Exception;
    }


    public interface MethodCallUpdateInstanceRestrictions {
        UpdateInstanceRestrictionsResponse updateRestrictions(
            Optional<? extends UpdateInstanceRestrictionsRequestBody> request) throws Exception;
    }


    public interface MethodCallUpdateInstanceOrganizationSettings {
        UpdateInstanceOrganizationSettingsResponse updateOrganizationSettings(
            Optional<? extends UpdateInstanceOrganizationSettingsRequestBody> request) throws Exception;
    }


    public interface MethodCallCreateSvixApp {
        CreateSvixAppResponse createSvixAppDirect() throws Exception;
    }


    public interface MethodCallDeleteSvixApp {
        DeleteSvixAppResponse deleteSvixAppDirect() throws Exception;
    }


    public interface MethodCallGenerateSvixAuthURL {
        GenerateSvixAuthURLResponse generateSvixAuthURLDirect() throws Exception;
    }


    public interface MethodCallListJWTTemplates {
        ListJWTTemplatesResponse listDirect() throws Exception;
    }


    public interface MethodCallCreateJWTTemplate {
        CreateJWTTemplateResponse create(
            Optional<? extends CreateJWTTemplateRequestBody> request) throws Exception;
    }


    public interface MethodCallGetJWTTemplate {
        GetJWTTemplateResponse get(
            String templateId) throws Exception;
    }


    public interface MethodCallUpdateJWTTemplate {
        UpdateJWTTemplateResponse update(
            String templateId,
            Optional<? extends UpdateJWTTemplateRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallDeleteJWTTemplate {
        DeleteJWTTemplateResponse delete(
            String templateId) throws Exception;
    }


    public interface MethodCallListOrganizations {
        ListOrganizationsResponse list(
            ListOrganizationsRequest request) throws Exception;
    }


    public interface MethodCallCreateOrganization {
        CreateOrganizationResponse create(
            Optional<? extends CreateOrganizationRequestBody> request) throws Exception;
    }


    public interface MethodCallGetOrganization {
        GetOrganizationResponse get(
            String organizationId,
            Optional<Boolean> includeMembersCount) throws Exception;
    }


    public interface MethodCallUpdateOrganization {
        UpdateOrganizationResponse update(
            String organizationId,
            UpdateOrganizationRequestBody requestBody) throws Exception;
    }


    public interface MethodCallDeleteOrganization {
        DeleteOrganizationResponse delete(
            String organizationId) throws Exception;
    }


    public interface MethodCallMergeOrganizationMetadata {
        MergeOrganizationMetadataResponse mergeMetadata(
            String organizationId,
            MergeOrganizationMetadataRequestBody requestBody) throws Exception;
    }


    public interface MethodCallUploadOrganizationLogo {
        UploadOrganizationLogoResponse uploadLogo(
            String organizationId,
            Optional<? extends UploadOrganizationLogoRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallDeleteOrganizationLogo {
        DeleteOrganizationLogoResponse deleteLogo(
            String organizationId) throws Exception;
    }


    public interface MethodCallCreateOrganizationMembership {
        CreateOrganizationMembershipResponse create(
            String organizationId,
            CreateOrganizationMembershipRequestBody requestBody) throws Exception;
    }


    public interface MethodCallListOrganizationMemberships {
        ListOrganizationMembershipsResponse list(
            String organizationId,
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<String> orderBy) throws Exception;
    }


    public interface MethodCallUpdateOrganizationMembership {
        UpdateOrganizationMembershipResponse update(
            String organizationId,
            String userId,
            UpdateOrganizationMembershipRequestBody requestBody) throws Exception;
    }


    public interface MethodCallDeleteOrganizationMembership {
        DeleteOrganizationMembershipResponse delete(
            String organizationId,
            String userId) throws Exception;
    }


    public interface MethodCallUpdateOrganizationMembershipMetadata {
        UpdateOrganizationMembershipMetadataResponse updateMetadata(
            String organizationId,
            String userId,
            Optional<? extends UpdateOrganizationMembershipMetadataRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallInstanceGetOrganizationMemberships {
        InstanceGetOrganizationMembershipsResponse getAll(
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<String> orderBy) throws Exception;
    }


    public interface MethodCallCreateOrganizationDomain {
        CreateOrganizationDomainResponse create(
            String organizationId,
            CreateOrganizationDomainRequestBody requestBody) throws Exception;
    }


    public interface MethodCallListOrganizationDomains {
        ListOrganizationDomainsResponse list(
            ListOrganizationDomainsRequest request) throws Exception;
    }


    public interface MethodCallDeleteOrganizationDomain {
        DeleteOrganizationDomainResponse delete(
            String organizationId,
            String domainId) throws Exception;
    }


    public interface MethodCallUpdateOrganizationDomain {
        UpdateOrganizationDomainResponse update(
            String organizationId,
            String domainId,
            UpdateOrganizationDomainRequestBody requestBody) throws Exception;
    }


    public interface MethodCallVerifyDomainProxy {
        VerifyDomainProxyResponse verify(
            Optional<? extends VerifyDomainProxyRequestBody> request) throws Exception;
    }


    public interface MethodCallListRedirectURLs {
        ListRedirectURLsResponse listDirect() throws Exception;
    }


    public interface MethodCallCreateRedirectURL {
        CreateRedirectURLResponse create(
            Optional<? extends CreateRedirectURLRequestBody> request) throws Exception;
    }


    public interface MethodCallGetRedirectURL {
        GetRedirectURLResponse get(
            String id) throws Exception;
    }


    public interface MethodCallDeleteRedirectURL {
        DeleteRedirectURLResponse delete(
            String id) throws Exception;
    }


    public interface MethodCallCreateSignInToken {
        CreateSignInTokenResponse create(
            Optional<? extends CreateSignInTokenRequestBody> request) throws Exception;
    }


    public interface MethodCallRevokeSignInToken {
        RevokeSignInTokenResponse revoke(
            String signInTokenId) throws Exception;
    }


    public interface MethodCallUpdateSignUp {
        UpdateSignUpResponse update(
            String id,
            Optional<? extends UpdateSignUpRequestBody> requestBody) throws Exception;
    }


    public interface MethodCallListOAuthApplications {
        ListOAuthApplicationsResponse list(
            Optional<Long> limit,
            Optional<Long> offset) throws Exception;
    }


    public interface MethodCallCreateOAuthApplication {
        CreateOAuthApplicationResponse create(
            Optional<? extends CreateOAuthApplicationRequestBody> request) throws Exception;
    }


    public interface MethodCallGetOAuthApplication {
        GetOAuthApplicationResponse get(
            String oauthApplicationId) throws Exception;
    }


    public interface MethodCallUpdateOAuthApplication {
        UpdateOAuthApplicationResponse update(
            String oauthApplicationId,
            UpdateOAuthApplicationRequestBody requestBody) throws Exception;
    }


    public interface MethodCallDeleteOAuthApplication {
        DeleteOAuthApplicationResponse delete(
            String oauthApplicationId) throws Exception;
    }


    public interface MethodCallRotateOAuthApplicationSecret {
        RotateOAuthApplicationSecretResponse rotateSecret(
            String oauthApplicationId) throws Exception;
    }


    public interface MethodCallListSAMLConnections {
        ListSAMLConnectionsResponse list(
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<? extends List<String>> organizationId) throws Exception;
    }


    public interface MethodCallCreateSAMLConnection {
        CreateSAMLConnectionResponse create(
            Optional<? extends CreateSAMLConnectionRequestBody> request) throws Exception;
    }


    public interface MethodCallGetSAMLConnection {
        GetSAMLConnectionResponse get(
            String samlConnectionId) throws Exception;
    }


    public interface MethodCallUpdateSAMLConnection {
        UpdateSAMLConnectionResponse update(
            String samlConnectionId,
            UpdateSAMLConnectionRequestBody requestBody) throws Exception;
    }


    public interface MethodCallDeleteSAMLConnection {
        DeleteSAMLConnectionResponse delete(
            String samlConnectionId) throws Exception;
    }


    public interface MethodCallCreateTestingToken {
        CreateTestingTokenResponse createDirect() throws Exception;
    }


    public interface MethodCallListWaitlistEntries {
        ListWaitlistEntriesResponse listWaitlistEntries(
            ListWaitlistEntriesRequest request) throws Exception;
    }


    public interface MethodCallCreateWaitlistEntry {
        CreateWaitlistEntryResponse createWaitlistEntry(
            Optional<? extends CreateWaitlistEntryRequestBody> request) throws Exception;
    }


}
