/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateOAuthApplicationRequestBody {
    /**
     * The name of the new OAuth application.
     * Max length: 256
     */
    @JsonProperty("name")
    private String name;

    /**
     * An array of redirect URIs of the new OAuth application
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_uris")
    private JsonNullable<? extends List<String>> redirectUris;

    /**
     * The callback URL of the new OAuth application
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback_url")
    @Deprecated
    private JsonNullable<String> callbackUrl;

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private JsonNullable<String> scopes;

    /**
     * True to enable a consent screen to display in the authentication flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consent_screen_enabled")
    private JsonNullable<Boolean> consentScreenEnabled;

    /**
     * True to require the Proof Key of Code Exchange (PKCE) flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pkce_required")
    private JsonNullable<Boolean> pkceRequired;

    /**
     * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public")
    private JsonNullable<Boolean> public_;

    @JsonCreator
    public CreateOAuthApplicationRequestBody(
            @JsonProperty("name") String name,
            @JsonProperty("redirect_uris") JsonNullable<? extends List<String>> redirectUris,
            @JsonProperty("callback_url") JsonNullable<String> callbackUrl,
            @JsonProperty("scopes") JsonNullable<String> scopes,
            @JsonProperty("consent_screen_enabled") JsonNullable<Boolean> consentScreenEnabled,
            @JsonProperty("pkce_required") JsonNullable<Boolean> pkceRequired,
            @JsonProperty("public") JsonNullable<Boolean> public_) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(redirectUris, "redirectUris");
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        Utils.checkNotNull(scopes, "scopes");
        Utils.checkNotNull(consentScreenEnabled, "consentScreenEnabled");
        Utils.checkNotNull(pkceRequired, "pkceRequired");
        Utils.checkNotNull(public_, "public_");
        this.name = name;
        this.redirectUris = redirectUris;
        this.callbackUrl = callbackUrl;
        this.scopes = scopes;
        this.consentScreenEnabled = consentScreenEnabled;
        this.pkceRequired = pkceRequired;
        this.public_ = public_;
    }
    
    public CreateOAuthApplicationRequestBody(
            String name) {
        this(name, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * The name of the new OAuth application.
     * Max length: 256
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * An array of redirect URIs of the new OAuth application
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> redirectUris() {
        return (JsonNullable<List<String>>) redirectUris;
    }

    /**
     * The callback URL of the new OAuth application
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> callbackUrl() {
        return callbackUrl;
    }

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    @JsonIgnore
    public JsonNullable<String> scopes() {
        return scopes;
    }

    /**
     * True to enable a consent screen to display in the authentication flow.
     */
    @JsonIgnore
    public JsonNullable<Boolean> consentScreenEnabled() {
        return consentScreenEnabled;
    }

    /**
     * True to require the Proof Key of Code Exchange (PKCE) flow.
     */
    @JsonIgnore
    public JsonNullable<Boolean> pkceRequired() {
        return pkceRequired;
    }

    /**
     * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
     */
    @JsonIgnore
    public JsonNullable<Boolean> public_() {
        return public_;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the new OAuth application.
     * Max length: 256
     */
    public CreateOAuthApplicationRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * An array of redirect URIs of the new OAuth application
     */
    public CreateOAuthApplicationRequestBody withRedirectUris(List<String> redirectUris) {
        Utils.checkNotNull(redirectUris, "redirectUris");
        this.redirectUris = JsonNullable.of(redirectUris);
        return this;
    }

    /**
     * An array of redirect URIs of the new OAuth application
     */
    public CreateOAuthApplicationRequestBody withRedirectUris(JsonNullable<? extends List<String>> redirectUris) {
        Utils.checkNotNull(redirectUris, "redirectUris");
        this.redirectUris = redirectUris;
        return this;
    }

    /**
     * The callback URL of the new OAuth application
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateOAuthApplicationRequestBody withCallbackUrl(String callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = JsonNullable.of(callbackUrl);
        return this;
    }

    /**
     * The callback URL of the new OAuth application
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateOAuthApplicationRequestBody withCallbackUrl(JsonNullable<String> callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = callbackUrl;
        return this;
    }

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    public CreateOAuthApplicationRequestBody withScopes(String scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = JsonNullable.of(scopes);
        return this;
    }

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    public CreateOAuthApplicationRequestBody withScopes(JsonNullable<String> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    /**
     * True to enable a consent screen to display in the authentication flow.
     */
    public CreateOAuthApplicationRequestBody withConsentScreenEnabled(boolean consentScreenEnabled) {
        Utils.checkNotNull(consentScreenEnabled, "consentScreenEnabled");
        this.consentScreenEnabled = JsonNullable.of(consentScreenEnabled);
        return this;
    }

    /**
     * True to enable a consent screen to display in the authentication flow.
     */
    public CreateOAuthApplicationRequestBody withConsentScreenEnabled(JsonNullable<Boolean> consentScreenEnabled) {
        Utils.checkNotNull(consentScreenEnabled, "consentScreenEnabled");
        this.consentScreenEnabled = consentScreenEnabled;
        return this;
    }

    /**
     * True to require the Proof Key of Code Exchange (PKCE) flow.
     */
    public CreateOAuthApplicationRequestBody withPkceRequired(boolean pkceRequired) {
        Utils.checkNotNull(pkceRequired, "pkceRequired");
        this.pkceRequired = JsonNullable.of(pkceRequired);
        return this;
    }

    /**
     * True to require the Proof Key of Code Exchange (PKCE) flow.
     */
    public CreateOAuthApplicationRequestBody withPkceRequired(JsonNullable<Boolean> pkceRequired) {
        Utils.checkNotNull(pkceRequired, "pkceRequired");
        this.pkceRequired = pkceRequired;
        return this;
    }

    /**
     * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
     */
    public CreateOAuthApplicationRequestBody withPublic(boolean public_) {
        Utils.checkNotNull(public_, "public_");
        this.public_ = JsonNullable.of(public_);
        return this;
    }

    /**
     * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
     */
    public CreateOAuthApplicationRequestBody withPublic(JsonNullable<Boolean> public_) {
        Utils.checkNotNull(public_, "public_");
        this.public_ = public_;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOAuthApplicationRequestBody other = (CreateOAuthApplicationRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.redirectUris, other.redirectUris) &&
            Utils.enhancedDeepEquals(this.callbackUrl, other.callbackUrl) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.consentScreenEnabled, other.consentScreenEnabled) &&
            Utils.enhancedDeepEquals(this.pkceRequired, other.pkceRequired) &&
            Utils.enhancedDeepEquals(this.public_, other.public_);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, redirectUris, callbackUrl,
            scopes, consentScreenEnabled, pkceRequired,
            public_);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOAuthApplicationRequestBody.class,
                "name", name,
                "redirectUris", redirectUris,
                "callbackUrl", callbackUrl,
                "scopes", scopes,
                "consentScreenEnabled", consentScreenEnabled,
                "pkceRequired", pkceRequired,
                "public_", public_);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private JsonNullable<? extends List<String>> redirectUris = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> callbackUrl = JsonNullable.undefined();

        private JsonNullable<String> scopes;

        private JsonNullable<Boolean> consentScreenEnabled;

        private JsonNullable<Boolean> pkceRequired;

        private JsonNullable<Boolean> public_ = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the new OAuth application.
         * Max length: 256
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * An array of redirect URIs of the new OAuth application
         */
        public Builder redirectUris(List<String> redirectUris) {
            Utils.checkNotNull(redirectUris, "redirectUris");
            this.redirectUris = JsonNullable.of(redirectUris);
            return this;
        }

        /**
         * An array of redirect URIs of the new OAuth application
         */
        public Builder redirectUris(JsonNullable<? extends List<String>> redirectUris) {
            Utils.checkNotNull(redirectUris, "redirectUris");
            this.redirectUris = redirectUris;
            return this;
        }


        /**
         * The callback URL of the new OAuth application
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder callbackUrl(String callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = JsonNullable.of(callbackUrl);
            return this;
        }

        /**
         * The callback URL of the new OAuth application
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder callbackUrl(JsonNullable<String> callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = callbackUrl;
            return this;
        }


        /**
         * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
         */
        public Builder scopes(String scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = JsonNullable.of(scopes);
            return this;
        }

        /**
         * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
         */
        public Builder scopes(JsonNullable<String> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }


        /**
         * True to enable a consent screen to display in the authentication flow.
         */
        public Builder consentScreenEnabled(boolean consentScreenEnabled) {
            Utils.checkNotNull(consentScreenEnabled, "consentScreenEnabled");
            this.consentScreenEnabled = JsonNullable.of(consentScreenEnabled);
            return this;
        }

        /**
         * True to enable a consent screen to display in the authentication flow.
         */
        public Builder consentScreenEnabled(JsonNullable<Boolean> consentScreenEnabled) {
            Utils.checkNotNull(consentScreenEnabled, "consentScreenEnabled");
            this.consentScreenEnabled = consentScreenEnabled;
            return this;
        }


        /**
         * True to require the Proof Key of Code Exchange (PKCE) flow.
         */
        public Builder pkceRequired(boolean pkceRequired) {
            Utils.checkNotNull(pkceRequired, "pkceRequired");
            this.pkceRequired = JsonNullable.of(pkceRequired);
            return this;
        }

        /**
         * True to require the Proof Key of Code Exchange (PKCE) flow.
         */
        public Builder pkceRequired(JsonNullable<Boolean> pkceRequired) {
            Utils.checkNotNull(pkceRequired, "pkceRequired");
            this.pkceRequired = pkceRequired;
            return this;
        }


        /**
         * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
         */
        public Builder public_(boolean public_) {
            Utils.checkNotNull(public_, "public_");
            this.public_ = JsonNullable.of(public_);
            return this;
        }

        /**
         * If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
         */
        public Builder public_(JsonNullable<Boolean> public_) {
            Utils.checkNotNull(public_, "public_");
            this.public_ = public_;
            return this;
        }

        public CreateOAuthApplicationRequestBody build() {
            if (scopes == null) {
                scopes = _SINGLETON_VALUE_Scopes.value();
            }
            if (consentScreenEnabled == null) {
                consentScreenEnabled = _SINGLETON_VALUE_ConsentScreenEnabled.value();
            }
            if (pkceRequired == null) {
                pkceRequired = _SINGLETON_VALUE_PkceRequired.value();
            }

            return new CreateOAuthApplicationRequestBody(
                name, redirectUris, callbackUrl,
                scopes, consentScreenEnabled, pkceRequired,
                public_);
        }


        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_Scopes =
                new LazySingletonValue<>(
                        "scopes",
                        "\"profile email\"",
                        new TypeReference<JsonNullable<String>>() {});

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_ConsentScreenEnabled =
                new LazySingletonValue<>(
                        "consent_screen_enabled",
                        "true",
                        new TypeReference<JsonNullable<Boolean>>() {});

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_PkceRequired =
                new LazySingletonValue<>(
                        "pkce_required",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}
