/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * RefreshSessionRequestBody
 * 
 * <p>Refresh session parameters
 */
public class RefreshSessionRequestBody {
    /**
     * The JWT that is sent via the `__session` cookie from your frontend.
     * Note: this JWT must be associated with the supplied session ID.
     */
    @JsonProperty("expired_token")
    private String expiredToken;

    /**
     * The JWT that is sent via the `__session` cookie from your frontend.
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    /**
     * The origin of the request.
     */
    @JsonProperty("request_origin")
    private String requestOrigin;

    /**
     * The headers of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_headers")
    private JsonNullable<? extends Map<String, Object>> requestHeaders;

    /**
     * The format of the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    private JsonNullable<? extends Format> format;

    /**
     * The IP address of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_originating_ip")
    private JsonNullable<String> requestOriginatingIp;

    @JsonCreator
    public RefreshSessionRequestBody(
            @JsonProperty("expired_token") String expiredToken,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("request_origin") String requestOrigin,
            @JsonProperty("request_headers") JsonNullable<? extends Map<String, Object>> requestHeaders,
            @JsonProperty("format") JsonNullable<? extends Format> format,
            @JsonProperty("request_originating_ip") JsonNullable<String> requestOriginatingIp) {
        Utils.checkNotNull(expiredToken, "expiredToken");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(requestOrigin, "requestOrigin");
        Utils.checkNotNull(requestHeaders, "requestHeaders");
        Utils.checkNotNull(format, "format");
        Utils.checkNotNull(requestOriginatingIp, "requestOriginatingIp");
        this.expiredToken = expiredToken;
        this.refreshToken = refreshToken;
        this.requestOrigin = requestOrigin;
        this.requestHeaders = requestHeaders;
        this.format = format;
        this.requestOriginatingIp = requestOriginatingIp;
    }
    
    public RefreshSessionRequestBody(
            String expiredToken,
            String refreshToken,
            String requestOrigin) {
        this(expiredToken, refreshToken, requestOrigin,
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The JWT that is sent via the `__session` cookie from your frontend.
     * Note: this JWT must be associated with the supplied session ID.
     */
    @JsonIgnore
    public String expiredToken() {
        return expiredToken;
    }

    /**
     * The JWT that is sent via the `__session` cookie from your frontend.
     */
    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    /**
     * The origin of the request.
     */
    @JsonIgnore
    public String requestOrigin() {
        return requestOrigin;
    }

    /**
     * The headers of the request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> requestHeaders() {
        return (JsonNullable<Map<String, Object>>) requestHeaders;
    }

    /**
     * The format of the response.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Format> format() {
        return (JsonNullable<Format>) format;
    }

    /**
     * The IP address of the request.
     */
    @JsonIgnore
    public JsonNullable<String> requestOriginatingIp() {
        return requestOriginatingIp;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The JWT that is sent via the `__session` cookie from your frontend.
     * Note: this JWT must be associated with the supplied session ID.
     */
    public RefreshSessionRequestBody withExpiredToken(String expiredToken) {
        Utils.checkNotNull(expiredToken, "expiredToken");
        this.expiredToken = expiredToken;
        return this;
    }

    /**
     * The JWT that is sent via the `__session` cookie from your frontend.
     */
    public RefreshSessionRequestBody withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * The origin of the request.
     */
    public RefreshSessionRequestBody withRequestOrigin(String requestOrigin) {
        Utils.checkNotNull(requestOrigin, "requestOrigin");
        this.requestOrigin = requestOrigin;
        return this;
    }

    /**
     * The headers of the request.
     */
    public RefreshSessionRequestBody withRequestHeaders(Map<String, Object> requestHeaders) {
        Utils.checkNotNull(requestHeaders, "requestHeaders");
        this.requestHeaders = JsonNullable.of(requestHeaders);
        return this;
    }

    /**
     * The headers of the request.
     */
    public RefreshSessionRequestBody withRequestHeaders(JsonNullable<? extends Map<String, Object>> requestHeaders) {
        Utils.checkNotNull(requestHeaders, "requestHeaders");
        this.requestHeaders = requestHeaders;
        return this;
    }

    /**
     * The format of the response.
     */
    public RefreshSessionRequestBody withFormat(Format format) {
        Utils.checkNotNull(format, "format");
        this.format = JsonNullable.of(format);
        return this;
    }

    /**
     * The format of the response.
     */
    public RefreshSessionRequestBody withFormat(JsonNullable<? extends Format> format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }

    /**
     * The IP address of the request.
     */
    public RefreshSessionRequestBody withRequestOriginatingIp(String requestOriginatingIp) {
        Utils.checkNotNull(requestOriginatingIp, "requestOriginatingIp");
        this.requestOriginatingIp = JsonNullable.of(requestOriginatingIp);
        return this;
    }

    /**
     * The IP address of the request.
     */
    public RefreshSessionRequestBody withRequestOriginatingIp(JsonNullable<String> requestOriginatingIp) {
        Utils.checkNotNull(requestOriginatingIp, "requestOriginatingIp");
        this.requestOriginatingIp = requestOriginatingIp;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RefreshSessionRequestBody other = (RefreshSessionRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.expiredToken, other.expiredToken) &&
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.requestOrigin, other.requestOrigin) &&
            Utils.enhancedDeepEquals(this.requestHeaders, other.requestHeaders) &&
            Utils.enhancedDeepEquals(this.format, other.format) &&
            Utils.enhancedDeepEquals(this.requestOriginatingIp, other.requestOriginatingIp);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            expiredToken, refreshToken, requestOrigin,
            requestHeaders, format, requestOriginatingIp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RefreshSessionRequestBody.class,
                "expiredToken", expiredToken,
                "refreshToken", refreshToken,
                "requestOrigin", requestOrigin,
                "requestHeaders", requestHeaders,
                "format", format,
                "requestOriginatingIp", requestOriginatingIp);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String expiredToken;

        private String refreshToken;

        private String requestOrigin;

        private JsonNullable<? extends Map<String, Object>> requestHeaders = JsonNullable.undefined();

        private JsonNullable<? extends Format> format;

        private JsonNullable<String> requestOriginatingIp = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The JWT that is sent via the `__session` cookie from your frontend.
         * Note: this JWT must be associated with the supplied session ID.
         */
        public Builder expiredToken(String expiredToken) {
            Utils.checkNotNull(expiredToken, "expiredToken");
            this.expiredToken = expiredToken;
            return this;
        }


        /**
         * The JWT that is sent via the `__session` cookie from your frontend.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }


        /**
         * The origin of the request.
         */
        public Builder requestOrigin(String requestOrigin) {
            Utils.checkNotNull(requestOrigin, "requestOrigin");
            this.requestOrigin = requestOrigin;
            return this;
        }


        /**
         * The headers of the request.
         */
        public Builder requestHeaders(Map<String, Object> requestHeaders) {
            Utils.checkNotNull(requestHeaders, "requestHeaders");
            this.requestHeaders = JsonNullable.of(requestHeaders);
            return this;
        }

        /**
         * The headers of the request.
         */
        public Builder requestHeaders(JsonNullable<? extends Map<String, Object>> requestHeaders) {
            Utils.checkNotNull(requestHeaders, "requestHeaders");
            this.requestHeaders = requestHeaders;
            return this;
        }


        /**
         * The format of the response.
         */
        public Builder format(Format format) {
            Utils.checkNotNull(format, "format");
            this.format = JsonNullable.of(format);
            return this;
        }

        /**
         * The format of the response.
         */
        public Builder format(JsonNullable<? extends Format> format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }


        /**
         * The IP address of the request.
         */
        public Builder requestOriginatingIp(String requestOriginatingIp) {
            Utils.checkNotNull(requestOriginatingIp, "requestOriginatingIp");
            this.requestOriginatingIp = JsonNullable.of(requestOriginatingIp);
            return this;
        }

        /**
         * The IP address of the request.
         */
        public Builder requestOriginatingIp(JsonNullable<String> requestOriginatingIp) {
            Utils.checkNotNull(requestOriginatingIp, "requestOriginatingIp");
            this.requestOriginatingIp = requestOriginatingIp;
            return this;
        }

        public RefreshSessionRequestBody build() {
            if (format == null) {
                format = _SINGLETON_VALUE_Format.value();
            }

            return new RefreshSessionRequestBody(
                expiredToken, refreshToken, requestOrigin,
                requestHeaders, format, requestOriginatingIp);
        }


        private static final LazySingletonValue<JsonNullable<? extends Format>> _SINGLETON_VALUE_Format =
                new LazySingletonValue<>(
                        "format",
                        "\"token\"",
                        new TypeReference<JsonNullable<? extends Format>>() {});
    }
}
