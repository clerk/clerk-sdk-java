/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.clerk.backend_api.models.operations;
import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class GetPublicInterstitialRequest {

    /**
     * Please use `frontend_api` instead
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=frontendApi")
    @Deprecated
    private Optional<String> frontendApiQueryParameter;

    /**
     * The Frontend API key of your instance
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=frontend_api")
    private Optional<String> frontendApiQueryParameter1;

    /**
     * The publishable key of your instance
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=publishable_key")
    private Optional<String> publishableKey;

    /**
     * The proxy URL of your instance
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=proxy_url")
    private Optional<String> proxyUrl;

    /**
     * The domain of your instance
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=domain")
    private Optional<String> domain;

    /**
     * The sign in URL of your instance
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sign_in_url")
    private Optional<String> signInUrl;

    /**
     * Whether to use the domain for the script URL
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=use_domain_for_script")
    private Optional<Boolean> useDomainForScript;

    @JsonCreator
    public GetPublicInterstitialRequest(
            Optional<String> frontendApiQueryParameter,
            Optional<String> frontendApiQueryParameter1,
            Optional<String> publishableKey,
            Optional<String> proxyUrl,
            Optional<String> domain,
            Optional<String> signInUrl,
            Optional<Boolean> useDomainForScript) {
        Utils.checkNotNull(frontendApiQueryParameter, "frontendApiQueryParameter");
        Utils.checkNotNull(frontendApiQueryParameter1, "frontendApiQueryParameter1");
        Utils.checkNotNull(publishableKey, "publishableKey");
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(signInUrl, "signInUrl");
        Utils.checkNotNull(useDomainForScript, "useDomainForScript");
        this.frontendApiQueryParameter = frontendApiQueryParameter;
        this.frontendApiQueryParameter1 = frontendApiQueryParameter1;
        this.publishableKey = publishableKey;
        this.proxyUrl = proxyUrl;
        this.domain = domain;
        this.signInUrl = signInUrl;
        this.useDomainForScript = useDomainForScript;
    }
    
    public GetPublicInterstitialRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Please use `frontend_api` instead
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> frontendApiQueryParameter() {
        return frontendApiQueryParameter;
    }

    /**
     * The Frontend API key of your instance
     */
    @JsonIgnore
    public Optional<String> frontendApiQueryParameter1() {
        return frontendApiQueryParameter1;
    }

    /**
     * The publishable key of your instance
     */
    @JsonIgnore
    public Optional<String> publishableKey() {
        return publishableKey;
    }

    /**
     * The proxy URL of your instance
     */
    @JsonIgnore
    public Optional<String> proxyUrl() {
        return proxyUrl;
    }

    /**
     * The domain of your instance
     */
    @JsonIgnore
    public Optional<String> domain() {
        return domain;
    }

    /**
     * The sign in URL of your instance
     */
    @JsonIgnore
    public Optional<String> signInUrl() {
        return signInUrl;
    }

    /**
     * Whether to use the domain for the script URL
     */
    @JsonIgnore
    public Optional<Boolean> useDomainForScript() {
        return useDomainForScript;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Please use `frontend_api` instead
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetPublicInterstitialRequest withFrontendApiQueryParameter(String frontendApiQueryParameter) {
        Utils.checkNotNull(frontendApiQueryParameter, "frontendApiQueryParameter");
        this.frontendApiQueryParameter = Optional.ofNullable(frontendApiQueryParameter);
        return this;
    }

    /**
     * Please use `frontend_api` instead
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetPublicInterstitialRequest withFrontendApiQueryParameter(Optional<String> frontendApiQueryParameter) {
        Utils.checkNotNull(frontendApiQueryParameter, "frontendApiQueryParameter");
        this.frontendApiQueryParameter = frontendApiQueryParameter;
        return this;
    }

    /**
     * The Frontend API key of your instance
     */
    public GetPublicInterstitialRequest withFrontendApiQueryParameter1(String frontendApiQueryParameter1) {
        Utils.checkNotNull(frontendApiQueryParameter1, "frontendApiQueryParameter1");
        this.frontendApiQueryParameter1 = Optional.ofNullable(frontendApiQueryParameter1);
        return this;
    }

    /**
     * The Frontend API key of your instance
     */
    public GetPublicInterstitialRequest withFrontendApiQueryParameter1(Optional<String> frontendApiQueryParameter1) {
        Utils.checkNotNull(frontendApiQueryParameter1, "frontendApiQueryParameter1");
        this.frontendApiQueryParameter1 = frontendApiQueryParameter1;
        return this;
    }

    /**
     * The publishable key of your instance
     */
    public GetPublicInterstitialRequest withPublishableKey(String publishableKey) {
        Utils.checkNotNull(publishableKey, "publishableKey");
        this.publishableKey = Optional.ofNullable(publishableKey);
        return this;
    }

    /**
     * The publishable key of your instance
     */
    public GetPublicInterstitialRequest withPublishableKey(Optional<String> publishableKey) {
        Utils.checkNotNull(publishableKey, "publishableKey");
        this.publishableKey = publishableKey;
        return this;
    }

    /**
     * The proxy URL of your instance
     */
    public GetPublicInterstitialRequest withProxyUrl(String proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = Optional.ofNullable(proxyUrl);
        return this;
    }

    /**
     * The proxy URL of your instance
     */
    public GetPublicInterstitialRequest withProxyUrl(Optional<String> proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = proxyUrl;
        return this;
    }

    /**
     * The domain of your instance
     */
    public GetPublicInterstitialRequest withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = Optional.ofNullable(domain);
        return this;
    }

    /**
     * The domain of your instance
     */
    public GetPublicInterstitialRequest withDomain(Optional<String> domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    /**
     * The sign in URL of your instance
     */
    public GetPublicInterstitialRequest withSignInUrl(String signInUrl) {
        Utils.checkNotNull(signInUrl, "signInUrl");
        this.signInUrl = Optional.ofNullable(signInUrl);
        return this;
    }

    /**
     * The sign in URL of your instance
     */
    public GetPublicInterstitialRequest withSignInUrl(Optional<String> signInUrl) {
        Utils.checkNotNull(signInUrl, "signInUrl");
        this.signInUrl = signInUrl;
        return this;
    }

    /**
     * Whether to use the domain for the script URL
     */
    public GetPublicInterstitialRequest withUseDomainForScript(boolean useDomainForScript) {
        Utils.checkNotNull(useDomainForScript, "useDomainForScript");
        this.useDomainForScript = Optional.ofNullable(useDomainForScript);
        return this;
    }

    /**
     * Whether to use the domain for the script URL
     */
    public GetPublicInterstitialRequest withUseDomainForScript(Optional<Boolean> useDomainForScript) {
        Utils.checkNotNull(useDomainForScript, "useDomainForScript");
        this.useDomainForScript = useDomainForScript;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPublicInterstitialRequest other = (GetPublicInterstitialRequest) o;
        return 
            Objects.deepEquals(this.frontendApiQueryParameter, other.frontendApiQueryParameter) &&
            Objects.deepEquals(this.frontendApiQueryParameter1, other.frontendApiQueryParameter1) &&
            Objects.deepEquals(this.publishableKey, other.publishableKey) &&
            Objects.deepEquals(this.proxyUrl, other.proxyUrl) &&
            Objects.deepEquals(this.domain, other.domain) &&
            Objects.deepEquals(this.signInUrl, other.signInUrl) &&
            Objects.deepEquals(this.useDomainForScript, other.useDomainForScript);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            frontendApiQueryParameter,
            frontendApiQueryParameter1,
            publishableKey,
            proxyUrl,
            domain,
            signInUrl,
            useDomainForScript);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPublicInterstitialRequest.class,
                "frontendApiQueryParameter", frontendApiQueryParameter,
                "frontendApiQueryParameter1", frontendApiQueryParameter1,
                "publishableKey", publishableKey,
                "proxyUrl", proxyUrl,
                "domain", domain,
                "signInUrl", signInUrl,
                "useDomainForScript", useDomainForScript);
    }
    
    public final static class Builder {
 
        @Deprecated
        private Optional<String> frontendApiQueryParameter = Optional.empty();
 
        private Optional<String> frontendApiQueryParameter1 = Optional.empty();
 
        private Optional<String> publishableKey = Optional.empty();
 
        private Optional<String> proxyUrl = Optional.empty();
 
        private Optional<String> domain = Optional.empty();
 
        private Optional<String> signInUrl = Optional.empty();
 
        private Optional<Boolean> useDomainForScript = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Please use `frontend_api` instead
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder frontendApiQueryParameter(String frontendApiQueryParameter) {
            Utils.checkNotNull(frontendApiQueryParameter, "frontendApiQueryParameter");
            this.frontendApiQueryParameter = Optional.ofNullable(frontendApiQueryParameter);
            return this;
        }

        /**
         * Please use `frontend_api` instead
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder frontendApiQueryParameter(Optional<String> frontendApiQueryParameter) {
            Utils.checkNotNull(frontendApiQueryParameter, "frontendApiQueryParameter");
            this.frontendApiQueryParameter = frontendApiQueryParameter;
            return this;
        }

        /**
         * The Frontend API key of your instance
         */
        public Builder frontendApiQueryParameter1(String frontendApiQueryParameter1) {
            Utils.checkNotNull(frontendApiQueryParameter1, "frontendApiQueryParameter1");
            this.frontendApiQueryParameter1 = Optional.ofNullable(frontendApiQueryParameter1);
            return this;
        }

        /**
         * The Frontend API key of your instance
         */
        public Builder frontendApiQueryParameter1(Optional<String> frontendApiQueryParameter1) {
            Utils.checkNotNull(frontendApiQueryParameter1, "frontendApiQueryParameter1");
            this.frontendApiQueryParameter1 = frontendApiQueryParameter1;
            return this;
        }

        /**
         * The publishable key of your instance
         */
        public Builder publishableKey(String publishableKey) {
            Utils.checkNotNull(publishableKey, "publishableKey");
            this.publishableKey = Optional.ofNullable(publishableKey);
            return this;
        }

        /**
         * The publishable key of your instance
         */
        public Builder publishableKey(Optional<String> publishableKey) {
            Utils.checkNotNull(publishableKey, "publishableKey");
            this.publishableKey = publishableKey;
            return this;
        }

        /**
         * The proxy URL of your instance
         */
        public Builder proxyUrl(String proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = Optional.ofNullable(proxyUrl);
            return this;
        }

        /**
         * The proxy URL of your instance
         */
        public Builder proxyUrl(Optional<String> proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = proxyUrl;
            return this;
        }

        /**
         * The domain of your instance
         */
        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = Optional.ofNullable(domain);
            return this;
        }

        /**
         * The domain of your instance
         */
        public Builder domain(Optional<String> domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        /**
         * The sign in URL of your instance
         */
        public Builder signInUrl(String signInUrl) {
            Utils.checkNotNull(signInUrl, "signInUrl");
            this.signInUrl = Optional.ofNullable(signInUrl);
            return this;
        }

        /**
         * The sign in URL of your instance
         */
        public Builder signInUrl(Optional<String> signInUrl) {
            Utils.checkNotNull(signInUrl, "signInUrl");
            this.signInUrl = signInUrl;
            return this;
        }

        /**
         * Whether to use the domain for the script URL
         */
        public Builder useDomainForScript(boolean useDomainForScript) {
            Utils.checkNotNull(useDomainForScript, "useDomainForScript");
            this.useDomainForScript = Optional.ofNullable(useDomainForScript);
            return this;
        }

        /**
         * Whether to use the domain for the script URL
         */
        public Builder useDomainForScript(Optional<Boolean> useDomainForScript) {
            Utils.checkNotNull(useDomainForScript, "useDomainForScript");
            this.useDomainForScript = useDomainForScript;
            return this;
        }
        
        public GetPublicInterstitialRequest build() {
            return new GetPublicInterstitialRequest(
                frontendApiQueryParameter,
                frontendApiQueryParameter1,
                publishableKey,
                proxyUrl,
                domain,
                signInUrl,
                useDomainForScript);
        }
    }
}

