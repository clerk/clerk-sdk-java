/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class InviteWaitlistEntryRequestBody {
    /**
     * Whether an invitation should be created if there is already an existing invitation for this email
     * address, or it's claimed by another user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignore_existing")
    private JsonNullable<Boolean> ignoreExisting;

    @JsonCreator
    public InviteWaitlistEntryRequestBody(
            @JsonProperty("ignore_existing") JsonNullable<Boolean> ignoreExisting) {
        Utils.checkNotNull(ignoreExisting, "ignoreExisting");
        this.ignoreExisting = ignoreExisting;
    }
    
    public InviteWaitlistEntryRequestBody() {
        this(JsonNullable.undefined());
    }

    /**
     * Whether an invitation should be created if there is already an existing invitation for this email
     * address, or it's claimed by another user.
     */
    @JsonIgnore
    public JsonNullable<Boolean> ignoreExisting() {
        return ignoreExisting;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Whether an invitation should be created if there is already an existing invitation for this email
     * address, or it's claimed by another user.
     */
    public InviteWaitlistEntryRequestBody withIgnoreExisting(boolean ignoreExisting) {
        Utils.checkNotNull(ignoreExisting, "ignoreExisting");
        this.ignoreExisting = JsonNullable.of(ignoreExisting);
        return this;
    }

    /**
     * Whether an invitation should be created if there is already an existing invitation for this email
     * address, or it's claimed by another user.
     */
    public InviteWaitlistEntryRequestBody withIgnoreExisting(JsonNullable<Boolean> ignoreExisting) {
        Utils.checkNotNull(ignoreExisting, "ignoreExisting");
        this.ignoreExisting = ignoreExisting;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InviteWaitlistEntryRequestBody other = (InviteWaitlistEntryRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.ignoreExisting, other.ignoreExisting);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ignoreExisting);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InviteWaitlistEntryRequestBody.class,
                "ignoreExisting", ignoreExisting);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<Boolean> ignoreExisting;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Whether an invitation should be created if there is already an existing invitation for this email
         * address, or it's claimed by another user.
         */
        public Builder ignoreExisting(boolean ignoreExisting) {
            Utils.checkNotNull(ignoreExisting, "ignoreExisting");
            this.ignoreExisting = JsonNullable.of(ignoreExisting);
            return this;
        }

        /**
         * Whether an invitation should be created if there is already an existing invitation for this email
         * address, or it's claimed by another user.
         */
        public Builder ignoreExisting(JsonNullable<Boolean> ignoreExisting) {
            Utils.checkNotNull(ignoreExisting, "ignoreExisting");
            this.ignoreExisting = ignoreExisting;
            return this;
        }

        public InviteWaitlistEntryRequestBody build() {
            if (ignoreExisting == null) {
                ignoreExisting = _SINGLETON_VALUE_IgnoreExisting.value();
            }

            return new InviteWaitlistEntryRequestBody(
                ignoreExisting);
        }


        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_IgnoreExisting =
                new LazySingletonValue<>(
                        "ignore_existing",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}
