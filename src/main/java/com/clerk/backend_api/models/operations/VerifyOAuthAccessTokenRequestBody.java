/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class VerifyOAuthAccessTokenRequestBody {
    /**
     * The access token to verify.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_token")
    private Optional<String> accessToken;

    /**
     * The access token to verify. This is deprecated, use `access_token` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    @Deprecated
    private Optional<String> secret;

    @JsonCreator
    public VerifyOAuthAccessTokenRequestBody(
            @JsonProperty("access_token") Optional<String> accessToken,
            @JsonProperty("secret") Optional<String> secret) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(secret, "secret");
        this.accessToken = accessToken;
        this.secret = secret;
    }
    
    public VerifyOAuthAccessTokenRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The access token to verify.
     */
    @JsonIgnore
    public Optional<String> accessToken() {
        return accessToken;
    }

    /**
     * The access token to verify. This is deprecated, use `access_token` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> secret() {
        return secret;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The access token to verify.
     */
    public VerifyOAuthAccessTokenRequestBody withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = Optional.ofNullable(accessToken);
        return this;
    }


    /**
     * The access token to verify.
     */
    public VerifyOAuthAccessTokenRequestBody withAccessToken(Optional<String> accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * The access token to verify. This is deprecated, use `access_token` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public VerifyOAuthAccessTokenRequestBody withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = Optional.ofNullable(secret);
        return this;
    }


    /**
     * The access token to verify. This is deprecated, use `access_token` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public VerifyOAuthAccessTokenRequestBody withSecret(Optional<String> secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerifyOAuthAccessTokenRequestBody other = (VerifyOAuthAccessTokenRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.secret, other.secret);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accessToken, secret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerifyOAuthAccessTokenRequestBody.class,
                "accessToken", accessToken,
                "secret", secret);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> accessToken = Optional.empty();

        @Deprecated
        private Optional<String> secret = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The access token to verify.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        /**
         * The access token to verify.
         */
        public Builder accessToken(Optional<String> accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }


        /**
         * The access token to verify. This is deprecated, use `access_token` instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = Optional.ofNullable(secret);
            return this;
        }

        /**
         * The access token to verify. This is deprecated, use `access_token` instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder secret(Optional<String> secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }

        public VerifyOAuthAccessTokenRequestBody build() {

            return new VerifyOAuthAccessTokenRequestBody(
                accessToken, secret);
        }

    }
}
