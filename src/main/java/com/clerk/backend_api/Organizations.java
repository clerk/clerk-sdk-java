/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateOrganizationRequestBody;
import com.clerk.backend_api.models.operations.CreateOrganizationRequestBuilder;
import com.clerk.backend_api.models.operations.CreateOrganizationResponse;
import com.clerk.backend_api.models.operations.DeleteOrganizationLogoRequest;
import com.clerk.backend_api.models.operations.DeleteOrganizationLogoRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteOrganizationLogoResponse;
import com.clerk.backend_api.models.operations.DeleteOrganizationRequest;
import com.clerk.backend_api.models.operations.DeleteOrganizationRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteOrganizationResponse;
import com.clerk.backend_api.models.operations.GetOrganizationRequest;
import com.clerk.backend_api.models.operations.GetOrganizationRequestBuilder;
import com.clerk.backend_api.models.operations.GetOrganizationResponse;
import com.clerk.backend_api.models.operations.ListOrganizationsRequest;
import com.clerk.backend_api.models.operations.ListOrganizationsRequestBuilder;
import com.clerk.backend_api.models.operations.ListOrganizationsResponse;
import com.clerk.backend_api.models.operations.MergeOrganizationMetadataRequest;
import com.clerk.backend_api.models.operations.MergeOrganizationMetadataRequestBody;
import com.clerk.backend_api.models.operations.MergeOrganizationMetadataRequestBuilder;
import com.clerk.backend_api.models.operations.MergeOrganizationMetadataResponse;
import com.clerk.backend_api.models.operations.UpdateOrganizationRequest;
import com.clerk.backend_api.models.operations.UpdateOrganizationRequestBody;
import com.clerk.backend_api.models.operations.UpdateOrganizationRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateOrganizationResponse;
import com.clerk.backend_api.models.operations.UploadOrganizationLogoRequest;
import com.clerk.backend_api.models.operations.UploadOrganizationLogoRequestBody;
import com.clerk.backend_api.models.operations.UploadOrganizationLogoRequestBuilder;
import com.clerk.backend_api.models.operations.UploadOrganizationLogoResponse;
import com.clerk.backend_api.operations.CreateOrganizationOperation;
import com.clerk.backend_api.operations.DeleteOrganizationLogoOperation;
import com.clerk.backend_api.operations.DeleteOrganizationOperation;
import com.clerk.backend_api.operations.GetOrganizationOperation;
import com.clerk.backend_api.operations.ListOrganizationsOperation;
import com.clerk.backend_api.operations.MergeOrganizationMetadataOperation;
import com.clerk.backend_api.operations.UpdateOrganizationOperation;
import com.clerk.backend_api.operations.UploadOrganizationLogoOperation;
import com.clerk.backend_api.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Organizations {
    private final SDKConfiguration sdkConfiguration;

    Organizations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Get a list of organizations for an instance
     * 
     * <p>This request returns the list of organizations for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organizations are ordered by descending creation date.
     * Most recent organizations will be returned first.
     * 
     * @return The call builder
     */
    public ListOrganizationsRequestBuilder list() {
        return new ListOrganizationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a list of organizations for an instance
     * 
     * <p>This request returns the list of organizations for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organizations are ordered by descending creation date.
     * Most recent organizations will be returned first.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrganizationsResponse list(ListOrganizationsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * Get a list of organizations for an instance
     * 
     * <p>This request returns the list of organizations for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organizations are ordered by descending creation date.
     * Most recent organizations will be returned first.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrganizationsResponse list(
            ListOrganizationsRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<ListOrganizationsRequest, ListOrganizationsResponse> operation
              = new ListOrganizationsOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create an organization
     * 
     * <p>Creates a new organization with the given name for an instance.
     * You can specify an optional slug for the new organization.
     * If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash "-".
     * Organization slugs must be unique for the instance.
     * You can provide additional metadata for the organization and set any custom attribute you want.
     * Organizations support private and public metadata.
     * Private metadata can only be accessed from the Backend API.
     * Public metadata can be accessed from the Backend API, and are read-only from the Frontend API.
     * The `created_by` user will see this as their [active organization] (https://clerk.com/docs/organizations/overview#active-organization)
     * the next time they create a session, presuming they don't explicitly set a different organization as active before then.
     * 
     * @return The call builder
     */
    public CreateOrganizationRequestBuilder create() {
        return new CreateOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an organization
     * 
     * <p>Creates a new organization with the given name for an instance.
     * You can specify an optional slug for the new organization.
     * If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash "-".
     * Organization slugs must be unique for the instance.
     * You can provide additional metadata for the organization and set any custom attribute you want.
     * Organizations support private and public metadata.
     * Private metadata can only be accessed from the Backend API.
     * Public metadata can be accessed from the Backend API, and are read-only from the Frontend API.
     * The `created_by` user will see this as their [active organization] (https://clerk.com/docs/organizations/overview#active-organization)
     * the next time they create a session, presuming they don't explicitly set a different organization as active before then.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create an organization
     * 
     * <p>Creates a new organization with the given name for an instance.
     * You can specify an optional slug for the new organization.
     * If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash "-".
     * Organization slugs must be unique for the instance.
     * You can provide additional metadata for the organization and set any custom attribute you want.
     * Organizations support private and public metadata.
     * Private metadata can only be accessed from the Backend API.
     * Public metadata can be accessed from the Backend API, and are read-only from the Frontend API.
     * The `created_by` user will see this as their [active organization] (https://clerk.com/docs/organizations/overview#active-organization)
     * the next time they create a session, presuming they don't explicitly set a different organization as active before then.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationResponse create(
            Optional<? extends CreateOrganizationRequestBody> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateOrganizationRequestBody>, CreateOrganizationResponse> operation
              = new CreateOrganizationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve an organization by ID or slug
     * 
     * <p>Fetches the organization whose ID or slug matches the provided `id_or_slug` URL query parameter.
     * 
     * @return The call builder
     */
    public GetOrganizationRequestBuilder get() {
        return new GetOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an organization by ID or slug
     * 
     * <p>Fetches the organization whose ID or slug matches the provided `id_or_slug` URL query parameter.
     * 
     * @param organizationId The ID or slug of the organization
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOrganizationResponse get(String organizationId) throws Exception {
        return get(organizationId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Retrieve an organization by ID or slug
     * 
     * <p>Fetches the organization whose ID or slug matches the provided `id_or_slug` URL query parameter.
     * 
     * @param organizationId The ID or slug of the organization
     * @param includeMembersCount Flag to denote whether or not the organization's members count should be included in the response.
     * @param includeMissingMemberWithElevatedPermissions Flag to denote whether or not to include a member with elevated permissions who is not currently a member of the organization.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOrganizationResponse get(
            String organizationId,
            Optional<Boolean> includeMembersCount,
            Optional<Boolean> includeMissingMemberWithElevatedPermissions,
            Optional<Options> options) throws Exception {
        GetOrganizationRequest request =
            GetOrganizationRequest
                .builder()
                .organizationId(organizationId)
                .includeMembersCount(includeMembersCount)
                .includeMissingMemberWithElevatedPermissions(includeMissingMemberWithElevatedPermissions)
                .build();
        RequestOperation<GetOrganizationRequest, GetOrganizationResponse> operation
              = new GetOrganizationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an organization
     * 
     * <p>Updates an existing organization
     * 
     * @return The call builder
     */
    public UpdateOrganizationRequestBuilder update() {
        return new UpdateOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an organization
     * 
     * <p>Updates an existing organization
     * 
     * @param organizationId The ID of the organization to update
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateOrganizationResponse update(
            String organizationId,
            UpdateOrganizationRequestBody requestBody) throws Exception {
        return update(organizationId, requestBody, Optional.empty());
    }

    /**
     * Update an organization
     * 
     * <p>Updates an existing organization
     * 
     * @param organizationId The ID of the organization to update
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateOrganizationResponse update(
            String organizationId,
            UpdateOrganizationRequestBody requestBody,
            Optional<Options> options) throws Exception {
        UpdateOrganizationRequest request =
            UpdateOrganizationRequest
                .builder()
                .organizationId(organizationId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateOrganizationRequest, UpdateOrganizationResponse> operation
              = new UpdateOrganizationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete an organization
     * 
     * <p>Deletes the given organization.
     * Please note that deleting an organization will also delete all memberships and invitations.
     * This is not reversible.
     * 
     * @return The call builder
     */
    public DeleteOrganizationRequestBuilder delete() {
        return new DeleteOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete an organization
     * 
     * <p>Deletes the given organization.
     * Please note that deleting an organization will also delete all memberships and invitations.
     * This is not reversible.
     * 
     * @param organizationId The ID of the organization to delete
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteOrganizationResponse delete(String organizationId) throws Exception {
        return delete(organizationId, Optional.empty());
    }

    /**
     * Delete an organization
     * 
     * <p>Deletes the given organization.
     * Please note that deleting an organization will also delete all memberships and invitations.
     * This is not reversible.
     * 
     * @param organizationId The ID of the organization to delete
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteOrganizationResponse delete(
            String organizationId,
            Optional<Options> options) throws Exception {
        DeleteOrganizationRequest request =
            DeleteOrganizationRequest
                .builder()
                .organizationId(organizationId)
                .build();
        RequestOperation<DeleteOrganizationRequest, DeleteOrganizationResponse> operation
              = new DeleteOrganizationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Merge and update metadata for an organization
     * 
     * <p>Update organization metadata attributes by merging existing values with the provided parameters.
     * Metadata values will be updated via a deep merge.
     * Deep meaning that any nested JSON objects will be merged as well.
     * You can remove metadata keys at any level by setting their value to `null`.
     * 
     * @return The call builder
     */
    public MergeOrganizationMetadataRequestBuilder mergeMetadata() {
        return new MergeOrganizationMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Merge and update metadata for an organization
     * 
     * <p>Update organization metadata attributes by merging existing values with the provided parameters.
     * Metadata values will be updated via a deep merge.
     * Deep meaning that any nested JSON objects will be merged as well.
     * You can remove metadata keys at any level by setting their value to `null`.
     * 
     * @param organizationId The ID of the organization for which metadata will be merged or updated
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public MergeOrganizationMetadataResponse mergeMetadata(
            String organizationId,
            MergeOrganizationMetadataRequestBody requestBody) throws Exception {
        return mergeMetadata(organizationId, requestBody, Optional.empty());
    }

    /**
     * Merge and update metadata for an organization
     * 
     * <p>Update organization metadata attributes by merging existing values with the provided parameters.
     * Metadata values will be updated via a deep merge.
     * Deep meaning that any nested JSON objects will be merged as well.
     * You can remove metadata keys at any level by setting their value to `null`.
     * 
     * @param organizationId The ID of the organization for which metadata will be merged or updated
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public MergeOrganizationMetadataResponse mergeMetadata(
            String organizationId,
            MergeOrganizationMetadataRequestBody requestBody,
            Optional<Options> options) throws Exception {
        MergeOrganizationMetadataRequest request =
            MergeOrganizationMetadataRequest
                .builder()
                .organizationId(organizationId)
                .requestBody(requestBody)
                .build();
        RequestOperation<MergeOrganizationMetadataRequest, MergeOrganizationMetadataResponse> operation
              = new MergeOrganizationMetadataOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Upload a logo for the organization
     * 
     * <p>Set or replace an organization's logo, by uploading an image file.
     * This endpoint uses the `multipart/form-data` request content type and accepts a file of image type.
     * The file size cannot exceed 10MB.
     * Only the following file content types are supported: `image/jpeg`, `image/png`, `image/gif`, `image/webp`, `image/x-icon`, `image/vnd.microsoft.icon`.
     * 
     * @return The call builder
     */
    public UploadOrganizationLogoRequestBuilder uploadLogo() {
        return new UploadOrganizationLogoRequestBuilder(sdkConfiguration);
    }

    /**
     * Upload a logo for the organization
     * 
     * <p>Set or replace an organization's logo, by uploading an image file.
     * This endpoint uses the `multipart/form-data` request content type and accepts a file of image type.
     * The file size cannot exceed 10MB.
     * Only the following file content types are supported: `image/jpeg`, `image/png`, `image/gif`, `image/webp`, `image/x-icon`, `image/vnd.microsoft.icon`.
     * 
     * @param organizationId The ID of the organization for which to upload a logo
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UploadOrganizationLogoResponse uploadLogo(String organizationId) throws Exception {
        return uploadLogo(organizationId, Optional.empty(), Optional.empty());
    }

    /**
     * Upload a logo for the organization
     * 
     * <p>Set or replace an organization's logo, by uploading an image file.
     * This endpoint uses the `multipart/form-data` request content type and accepts a file of image type.
     * The file size cannot exceed 10MB.
     * Only the following file content types are supported: `image/jpeg`, `image/png`, `image/gif`, `image/webp`, `image/x-icon`, `image/vnd.microsoft.icon`.
     * 
     * @param organizationId The ID of the organization for which to upload a logo
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UploadOrganizationLogoResponse uploadLogo(
            String organizationId,
            Optional<? extends UploadOrganizationLogoRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        UploadOrganizationLogoRequest request =
            UploadOrganizationLogoRequest
                .builder()
                .organizationId(organizationId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UploadOrganizationLogoRequest, UploadOrganizationLogoResponse> operation
              = new UploadOrganizationLogoOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete the organization's logo.
     * 
     * <p>Delete the organization's logo.
     * 
     * @return The call builder
     */
    public DeleteOrganizationLogoRequestBuilder deleteLogo() {
        return new DeleteOrganizationLogoRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete the organization's logo.
     * 
     * <p>Delete the organization's logo.
     * 
     * @param organizationId The ID of the organization for which the logo will be deleted.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteOrganizationLogoResponse deleteLogo(String organizationId) throws Exception {
        return deleteLogo(organizationId, Optional.empty());
    }

    /**
     * Delete the organization's logo.
     * 
     * <p>Delete the organization's logo.
     * 
     * @param organizationId The ID of the organization for which the logo will be deleted.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteOrganizationLogoResponse deleteLogo(
            String organizationId,
            Optional<Options> options) throws Exception {
        DeleteOrganizationLogoRequest request =
            DeleteOrganizationLogoRequest
                .builder()
                .organizationId(organizationId)
                .build();
        RequestOperation<DeleteOrganizationLogoRequest, DeleteOrganizationLogoResponse> operation
              = new DeleteOrganizationLogoOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
