/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateOrganizationInvitationBulkRequest;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationBulkRequestBody;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationBulkRequestBuilder;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationBulkResponse;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationRequest;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationRequestBody;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationRequestBuilder;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationResponse;
import com.clerk.backend_api.models.operations.GetOrganizationInvitationRequest;
import com.clerk.backend_api.models.operations.GetOrganizationInvitationRequestBuilder;
import com.clerk.backend_api.models.operations.GetOrganizationInvitationResponse;
import com.clerk.backend_api.models.operations.ListInstanceOrganizationInvitationsRequest;
import com.clerk.backend_api.models.operations.ListInstanceOrganizationInvitationsRequestBuilder;
import com.clerk.backend_api.models.operations.ListInstanceOrganizationInvitationsResponse;
import com.clerk.backend_api.models.operations.ListOrganizationInvitationsQueryParamStatus;
import com.clerk.backend_api.models.operations.ListOrganizationInvitationsRequest;
import com.clerk.backend_api.models.operations.ListOrganizationInvitationsRequestBuilder;
import com.clerk.backend_api.models.operations.ListOrganizationInvitationsResponse;
import com.clerk.backend_api.models.operations.ListPendingOrganizationInvitationsRequest;
import com.clerk.backend_api.models.operations.ListPendingOrganizationInvitationsRequestBuilder;
import com.clerk.backend_api.models.operations.ListPendingOrganizationInvitationsResponse;
import com.clerk.backend_api.models.operations.RevokeOrganizationInvitationRequest;
import com.clerk.backend_api.models.operations.RevokeOrganizationInvitationRequestBody;
import com.clerk.backend_api.models.operations.RevokeOrganizationInvitationRequestBuilder;
import com.clerk.backend_api.models.operations.RevokeOrganizationInvitationResponse;
import com.clerk.backend_api.operations.CreateOrganizationInvitationBulkOperation;
import com.clerk.backend_api.operations.CreateOrganizationInvitationOperation;
import com.clerk.backend_api.operations.GetOrganizationInvitationOperation;
import com.clerk.backend_api.operations.ListInstanceOrganizationInvitationsOperation;
import com.clerk.backend_api.operations.ListOrganizationInvitationsOperation;
import com.clerk.backend_api.operations.ListPendingOrganizationInvitationsOperation;
import com.clerk.backend_api.operations.RevokeOrganizationInvitationOperation;
import com.clerk.backend_api.utils.Options;
import java.lang.Deprecated;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class OrganizationInvitations {
    private final SDKConfiguration sdkConfiguration;

    OrganizationInvitations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Get a list of organization invitations for the current instance
     * 
     * <p>This request returns the list of organization invitations for the instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * You can change the order by providing the 'order' query parameter, that accepts multiple values.
     * You can filter by the invited user email address providing the `query` query parameter.
     * The organization invitations are ordered by descending creation date by default.
     * 
     * @return The call builder
     */
    public ListInstanceOrganizationInvitationsRequestBuilder getAll() {
        return new ListInstanceOrganizationInvitationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a list of organization invitations for the current instance
     * 
     * <p>This request returns the list of organization invitations for the instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * You can change the order by providing the 'order' query parameter, that accepts multiple values.
     * You can filter by the invited user email address providing the `query` query parameter.
     * The organization invitations are ordered by descending creation date by default.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListInstanceOrganizationInvitationsResponse getAll(ListInstanceOrganizationInvitationsRequest request) throws Exception {
        return getAll(request, Optional.empty());
    }

    /**
     * Get a list of organization invitations for the current instance
     * 
     * <p>This request returns the list of organization invitations for the instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * You can change the order by providing the 'order' query parameter, that accepts multiple values.
     * You can filter by the invited user email address providing the `query` query parameter.
     * The organization invitations are ordered by descending creation date by default.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListInstanceOrganizationInvitationsResponse getAll(
            ListInstanceOrganizationInvitationsRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<ListInstanceOrganizationInvitationsRequest, ListInstanceOrganizationInvitationsResponse> operation
              = new ListInstanceOrganizationInvitationsOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create and send an organization invitation
     * 
     * <p>Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
     * You can specify the `role` for the invited organization member.
     * 
     * <p>New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * 
     * <p>The request body supports passing an optional `redirect_url` parameter.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
     * Use this parameter to implement a custom invitation acceptance flow.
     * 
     * <p>You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
     * That user must be a member with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * 
     * <p>You can optionally provide public and private metadata for the organization invitation.
     * The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @return The call builder
     */
    public CreateOrganizationInvitationRequestBuilder create() {
        return new CreateOrganizationInvitationRequestBuilder(sdkConfiguration);
    }

    /**
     * Create and send an organization invitation
     * 
     * <p>Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
     * You can specify the `role` for the invited organization member.
     * 
     * <p>New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * 
     * <p>The request body supports passing an optional `redirect_url` parameter.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
     * Use this parameter to implement a custom invitation acceptance flow.
     * 
     * <p>You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
     * That user must be a member with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * 
     * <p>You can optionally provide public and private metadata for the organization invitation.
     * The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @param organizationId The ID of the organization for which to send the invitation
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationInvitationResponse create(String organizationId) throws Exception {
        return create(organizationId, Optional.empty(), Optional.empty());
    }

    /**
     * Create and send an organization invitation
     * 
     * <p>Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
     * You can specify the `role` for the invited organization member.
     * 
     * <p>New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * 
     * <p>The request body supports passing an optional `redirect_url` parameter.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
     * Use this parameter to implement a custom invitation acceptance flow.
     * 
     * <p>You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
     * That user must be a member with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * 
     * <p>You can optionally provide public and private metadata for the organization invitation.
     * The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @param organizationId The ID of the organization for which to send the invitation
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationInvitationResponse create(
            String organizationId,
            Optional<? extends CreateOrganizationInvitationRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CreateOrganizationInvitationRequest request =
            CreateOrganizationInvitationRequest
                .builder()
                .organizationId(organizationId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateOrganizationInvitationRequest, CreateOrganizationInvitationResponse> operation
              = new CreateOrganizationInvitationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a list of organization invitations
     * 
     * <p>This request returns the list of organization invitations.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @return The call builder
     */
    public ListOrganizationInvitationsRequestBuilder list() {
        return new ListOrganizationInvitationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a list of organization invitations
     * 
     * <p>This request returns the list of organization invitations.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @param organizationId The organization ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrganizationInvitationsResponse list(String organizationId) throws Exception {
        return list(organizationId, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Get a list of organization invitations
     * 
     * <p>This request returns the list of organization invitations.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @param organizationId The organization ID.
     * @param status Filter organization invitations based on their status
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrganizationInvitationsResponse list(
            String organizationId,
            Optional<? extends ListOrganizationInvitationsQueryParamStatus> status,
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<Options> options) throws Exception {
        ListOrganizationInvitationsRequest request =
            ListOrganizationInvitationsRequest
                .builder()
                .organizationId(organizationId)
                .status(status)
                .limit(limit)
                .offset(offset)
                .build();
        RequestOperation<ListOrganizationInvitationsRequest, ListOrganizationInvitationsResponse> operation
              = new ListOrganizationInvitationsOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Bulk create and send organization invitations
     * 
     * <p>Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
     * You can specify a different `role` for each invited organization member.
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * The request body supports passing an optional `redirect_url` parameter for each invitation.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
     * Use this parameter to implement a custom invitation acceptance flow.
     * You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
     * can have a different inviter user.
     * Inviter users must be members with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
     * by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @return The call builder
     */
    public CreateOrganizationInvitationBulkRequestBuilder bulkCreate() {
        return new CreateOrganizationInvitationBulkRequestBuilder(sdkConfiguration);
    }

    /**
     * Bulk create and send organization invitations
     * 
     * <p>Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
     * You can specify a different `role` for each invited organization member.
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * The request body supports passing an optional `redirect_url` parameter for each invitation.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
     * Use this parameter to implement a custom invitation acceptance flow.
     * You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
     * can have a different inviter user.
     * Inviter users must be members with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
     * by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @param organizationId The organization ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationInvitationBulkResponse bulkCreate(
            String organizationId,
            List<CreateOrganizationInvitationBulkRequestBody> requestBody) throws Exception {
        return bulkCreate(organizationId, requestBody, Optional.empty());
    }

    /**
     * Bulk create and send organization invitations
     * 
     * <p>Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
     * You can specify a different `role` for each invited organization member.
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * The request body supports passing an optional `redirect_url` parameter for each invitation.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
     * Use this parameter to implement a custom invitation acceptance flow.
     * You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
     * can have a different inviter user.
     * Inviter users must be members with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
     * by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @param organizationId The organization ID.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationInvitationBulkResponse bulkCreate(
            String organizationId,
            List<CreateOrganizationInvitationBulkRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CreateOrganizationInvitationBulkRequest request =
            CreateOrganizationInvitationBulkRequest
                .builder()
                .organizationId(organizationId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateOrganizationInvitationBulkRequest, CreateOrganizationInvitationBulkResponse> operation
              = new CreateOrganizationInvitationBulkOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a list of pending organization invitations
     * 
     * <p>This request returns the list of organization invitations with "pending" status.
     * These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListPendingOrganizationInvitationsRequestBuilder listPending() {
        return new ListPendingOrganizationInvitationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a list of pending organization invitations
     * 
     * <p>This request returns the list of organization invitations with "pending" status.
     * These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @param organizationId The organization ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListPendingOrganizationInvitationsResponse listPending(String organizationId) throws Exception {
        return listPending(organizationId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Get a list of pending organization invitations
     * 
     * <p>This request returns the list of organization invitations with "pending" status.
     * These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @param organizationId The organization ID.
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListPendingOrganizationInvitationsResponse listPending(
            String organizationId,
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<Options> options) throws Exception {
        ListPendingOrganizationInvitationsRequest request =
            ListPendingOrganizationInvitationsRequest
                .builder()
                .organizationId(organizationId)
                .limit(limit)
                .offset(offset)
                .build();
        RequestOperation<ListPendingOrganizationInvitationsRequest, ListPendingOrganizationInvitationsResponse> operation
              = new ListPendingOrganizationInvitationsOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve an organization invitation by ID
     * 
     * <p>Use this request to get an existing organization invitation by ID.
     * 
     * @return The call builder
     */
    public GetOrganizationInvitationRequestBuilder get() {
        return new GetOrganizationInvitationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an organization invitation by ID
     * 
     * <p>Use this request to get an existing organization invitation by ID.
     * 
     * @param organizationId The organization ID.
     * @param invitationId The organization invitation ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOrganizationInvitationResponse get(
            String organizationId,
            String invitationId) throws Exception {
        return get(organizationId, invitationId, Optional.empty());
    }

    /**
     * Retrieve an organization invitation by ID
     * 
     * <p>Use this request to get an existing organization invitation by ID.
     * 
     * @param organizationId The organization ID.
     * @param invitationId The organization invitation ID.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOrganizationInvitationResponse get(
            String organizationId,
            String invitationId,
            Optional<Options> options) throws Exception {
        GetOrganizationInvitationRequest request =
            GetOrganizationInvitationRequest
                .builder()
                .organizationId(organizationId)
                .invitationId(invitationId)
                .build();
        RequestOperation<GetOrganizationInvitationRequest, GetOrganizationInvitationResponse> operation
              = new GetOrganizationInvitationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revoke a pending organization invitation
     * 
     * <p>Use this request to revoke a previously issued organization invitation.
     * Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
     * Only organization invitations with "pending" status can be revoked.
     * The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation.
     * Only users with "admin" role can revoke invitations.
     * 
     * @return The call builder
     */
    public RevokeOrganizationInvitationRequestBuilder revoke() {
        return new RevokeOrganizationInvitationRequestBuilder(sdkConfiguration);
    }

    /**
     * Revoke a pending organization invitation
     * 
     * <p>Use this request to revoke a previously issued organization invitation.
     * Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
     * Only organization invitations with "pending" status can be revoked.
     * The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation.
     * Only users with "admin" role can revoke invitations.
     * 
     * @param organizationId The organization ID.
     * @param invitationId The organization invitation ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeOrganizationInvitationResponse revoke(
            String organizationId,
            String invitationId) throws Exception {
        return revoke(organizationId, invitationId, Optional.empty(),
            Optional.empty());
    }

    /**
     * Revoke a pending organization invitation
     * 
     * <p>Use this request to revoke a previously issued organization invitation.
     * Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
     * Only organization invitations with "pending" status can be revoked.
     * The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation.
     * Only users with "admin" role can revoke invitations.
     * 
     * @param organizationId The organization ID.
     * @param invitationId The organization invitation ID.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeOrganizationInvitationResponse revoke(
            String organizationId,
            String invitationId,
            Optional<? extends RevokeOrganizationInvitationRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        RevokeOrganizationInvitationRequest request =
            RevokeOrganizationInvitationRequest
                .builder()
                .organizationId(organizationId)
                .invitationId(invitationId)
                .requestBody(requestBody)
                .build();
        RequestOperation<RevokeOrganizationInvitationRequest, RevokeOrganizationInvitationResponse> operation
              = new RevokeOrganizationInvitationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
