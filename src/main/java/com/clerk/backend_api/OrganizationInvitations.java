/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import com.clerk.backend_api.models.components.OrganizationInvitation;
import com.clerk.backend_api.models.components.OrganizationInvitationsWithPublicOrganizationData;
import com.clerk.backend_api.models.errors.ClerkErrors;
import com.clerk.backend_api.models.errors.SDKError;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationBulkRequest;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationBulkRequestBody;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationBulkRequestBuilder;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationBulkResponse;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationRequest;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationRequestBody;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationRequestBuilder;
import com.clerk.backend_api.models.operations.CreateOrganizationInvitationResponse;
import com.clerk.backend_api.models.operations.GetOrganizationInvitationRequest;
import com.clerk.backend_api.models.operations.GetOrganizationInvitationRequestBuilder;
import com.clerk.backend_api.models.operations.GetOrganizationInvitationResponse;
import com.clerk.backend_api.models.operations.ListInstanceOrganizationInvitationsRequest;
import com.clerk.backend_api.models.operations.ListInstanceOrganizationInvitationsRequestBuilder;
import com.clerk.backend_api.models.operations.ListInstanceOrganizationInvitationsResponse;
import com.clerk.backend_api.models.operations.ListOrganizationInvitationsQueryParamStatus;
import com.clerk.backend_api.models.operations.ListOrganizationInvitationsRequest;
import com.clerk.backend_api.models.operations.ListOrganizationInvitationsRequestBuilder;
import com.clerk.backend_api.models.operations.ListOrganizationInvitationsResponse;
import com.clerk.backend_api.models.operations.ListPendingOrganizationInvitationsRequest;
import com.clerk.backend_api.models.operations.ListPendingOrganizationInvitationsRequestBuilder;
import com.clerk.backend_api.models.operations.ListPendingOrganizationInvitationsResponse;
import com.clerk.backend_api.models.operations.RevokeOrganizationInvitationRequest;
import com.clerk.backend_api.models.operations.RevokeOrganizationInvitationRequestBody;
import com.clerk.backend_api.models.operations.RevokeOrganizationInvitationRequestBuilder;
import com.clerk.backend_api.models.operations.RevokeOrganizationInvitationResponse;
import com.clerk.backend_api.models.operations.SDKMethodInterfaces.*;
import com.clerk.backend_api.utils.BackoffStrategy;
import com.clerk.backend_api.utils.HTTPClient;
import com.clerk.backend_api.utils.HTTPRequest;
import com.clerk.backend_api.utils.Hook.AfterErrorContextImpl;
import com.clerk.backend_api.utils.Hook.AfterSuccessContextImpl;
import com.clerk.backend_api.utils.Hook.BeforeRequestContextImpl;
import com.clerk.backend_api.utils.Options;
import com.clerk.backend_api.utils.Retries.NonRetryableException;
import com.clerk.backend_api.utils.Retries;
import com.clerk.backend_api.utils.RetryConfig;
import com.clerk.backend_api.utils.SerializedBody;
import com.clerk.backend_api.utils.Utils.JsonShape;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

 

public class OrganizationInvitations implements
            MethodCallListInstanceOrganizationInvitations,
            MethodCallCreateOrganizationInvitation,
            MethodCallListOrganizationInvitations,
            MethodCallCreateOrganizationInvitationBulk,
            MethodCallListPendingOrganizationInvitations,
            MethodCallGetOrganizationInvitation,
            MethodCallRevokeOrganizationInvitation {

    private final SDKConfiguration sdkConfiguration;

    OrganizationInvitations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get a list of organization invitations for the current instance
     * 
     * <p>This request returns the list of organization invitations for the instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * You can change the order by providing the 'order' query parameter, that accepts multiple values.
     * You can filter by the invited user email address providing the `query` query parameter.
     * The organization invitations are ordered by descending creation date by default.
     * 
     * @return The call builder
     */
    public ListInstanceOrganizationInvitationsRequestBuilder getAll() {
        return new ListInstanceOrganizationInvitationsRequestBuilder(this);
    }

    /**
     * Get a list of organization invitations for the current instance
     * 
     * <p>This request returns the list of organization invitations for the instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * You can change the order by providing the 'order' query parameter, that accepts multiple values.
     * You can filter by the invited user email address providing the `query` query parameter.
     * The organization invitations are ordered by descending creation date by default.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListInstanceOrganizationInvitationsResponse getAll(
            ListInstanceOrganizationInvitationsRequest request) throws Exception {
        return getAll(request, Optional.empty());
    }
    
    /**
     * Get a list of organization invitations for the current instance
     * 
     * <p>This request returns the list of organization invitations for the instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * You can change the order by providing the 'order' query parameter, that accepts multiple values.
     * You can filter by the invited user email address providing the `query` query parameter.
     * The organization invitations are ordered by descending creation date by default.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListInstanceOrganizationInvitationsResponse getAll(
            ListInstanceOrganizationInvitationsRequest request,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/organization_invitations");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListInstanceOrganizationInvitationsRequest.class,
                request, 
                null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                _baseUrl,
                                "ListInstanceOrganizationInvitations", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                _baseUrl,
                                "ListInstanceOrganizationInvitations",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                          _baseUrl,
                         "ListInstanceOrganizationInvitations", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListInstanceOrganizationInvitationsResponse.Builder _resBuilder = 
            ListInstanceOrganizationInvitationsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListInstanceOrganizationInvitationsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                OrganizationInvitationsWithPublicOrganizationData _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<OrganizationInvitationsWithPublicOrganizationData>() {});
                _res.withOrganizationInvitationsWithPublicOrganizationData(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "404", "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ClerkErrors _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClerkErrors>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ClerkErrors _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClerkErrors>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create and send an organization invitation
     * 
     * <p>Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
     * You can specify the `role` for the invited organization member.
     * 
     * <p>New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * 
     * <p>The request body supports passing an optional `redirect_url` parameter.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
     * Use this parameter to implement a custom invitation acceptance flow.
     * 
     * <p>You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
     * That user must be a member with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * 
     * <p>You can optionally provide public and private metadata for the organization invitation.
     * The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @return The call builder
     */
    public CreateOrganizationInvitationRequestBuilder create() {
        return new CreateOrganizationInvitationRequestBuilder(this);
    }

    /**
     * Create and send an organization invitation
     * 
     * <p>Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
     * You can specify the `role` for the invited organization member.
     * 
     * <p>New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * 
     * <p>The request body supports passing an optional `redirect_url` parameter.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
     * Use this parameter to implement a custom invitation acceptance flow.
     * 
     * <p>You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
     * That user must be a member with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * 
     * <p>You can optionally provide public and private metadata for the organization invitation.
     * The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @param organizationId The ID of the organization for which to send the invitation
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationInvitationResponse create(
            String organizationId) throws Exception {
        return create(organizationId, Optional.empty(), Optional.empty());
    }
    
    /**
     * Create and send an organization invitation
     * 
     * <p>Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
     * You can specify the `role` for the invited organization member.
     * 
     * <p>New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * 
     * <p>The request body supports passing an optional `redirect_url` parameter.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
     * Use this parameter to implement a custom invitation acceptance flow.
     * 
     * <p>You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
     * That user must be a member with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * 
     * <p>You can optionally provide public and private metadata for the organization invitation.
     * The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @param organizationId The ID of the organization for which to send the invitation
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationInvitationResponse create(
            String organizationId,
            Optional<? extends CreateOrganizationInvitationRequestBody> requestBody,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        CreateOrganizationInvitationRequest request =
            CreateOrganizationInvitationRequest
                .builder()
                .organizationId(organizationId)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                CreateOrganizationInvitationRequest.class,
                _baseUrl,
                "/organizations/{organization_id}/invitations",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                _baseUrl,
                                "CreateOrganizationInvitation", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                _baseUrl,
                                "CreateOrganizationInvitation",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                          _baseUrl,
                         "CreateOrganizationInvitation", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateOrganizationInvitationResponse.Builder _resBuilder = 
            CreateOrganizationInvitationResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateOrganizationInvitationResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                OrganizationInvitation _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<OrganizationInvitation>() {});
                _res.withOrganizationInvitation(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "403", "404", "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ClerkErrors _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClerkErrors>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a list of organization invitations
     * 
     * <p>This request returns the list of organization invitations.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @return The call builder
     */
    public ListOrganizationInvitationsRequestBuilder list() {
        return new ListOrganizationInvitationsRequestBuilder(this);
    }

    /**
     * Get a list of organization invitations
     * 
     * <p>This request returns the list of organization invitations.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @param organizationId The organization ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrganizationInvitationsResponse list(
            String organizationId) throws Exception {
        return list(organizationId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get a list of organization invitations
     * 
     * <p>This request returns the list of organization invitations.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @param organizationId The organization ID.
     * @param status Filter organization invitations based on their status
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrganizationInvitationsResponse list(
            String organizationId,
            Optional<? extends ListOrganizationInvitationsQueryParamStatus> status,
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        ListOrganizationInvitationsRequest request =
            ListOrganizationInvitationsRequest
                .builder()
                .organizationId(organizationId)
                .status(status)
                .limit(limit)
                .offset(offset)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                ListOrganizationInvitationsRequest.class,
                _baseUrl,
                "/organizations/{organization_id}/invitations",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListOrganizationInvitationsRequest.class,
                request, 
                null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                _baseUrl,
                                "ListOrganizationInvitations", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                _baseUrl,
                                "ListOrganizationInvitations",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                          _baseUrl,
                         "ListOrganizationInvitations", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListOrganizationInvitationsResponse.Builder _resBuilder = 
            ListOrganizationInvitationsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListOrganizationInvitationsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.clerk.backend_api.models.components.OrganizationInvitations _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.clerk.backend_api.models.components.OrganizationInvitations>() {});
                _res.withOrganizationInvitations(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "404")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ClerkErrors _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClerkErrors>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Bulk create and send organization invitations
     * 
     * <p>Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
     * You can specify a different `role` for each invited organization member.
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * The request body supports passing an optional `redirect_url` parameter for each invitation.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
     * Use this parameter to implement a custom invitation acceptance flow.
     * You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
     * can have a different inviter user.
     * Inviter users must be members with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
     * by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @return The call builder
     */
    public CreateOrganizationInvitationBulkRequestBuilder bulkCreate() {
        return new CreateOrganizationInvitationBulkRequestBuilder(this);
    }

    /**
     * Bulk create and send organization invitations
     * 
     * <p>Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
     * You can specify a different `role` for each invited organization member.
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * The request body supports passing an optional `redirect_url` parameter for each invitation.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
     * Use this parameter to implement a custom invitation acceptance flow.
     * You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
     * can have a different inviter user.
     * Inviter users must be members with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
     * by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @param organizationId The organization ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationInvitationBulkResponse bulkCreate(
            String organizationId,
            List<CreateOrganizationInvitationBulkRequestBody> requestBody) throws Exception {
        return bulkCreate(organizationId, requestBody, Optional.empty());
    }
    
    /**
     * Bulk create and send organization invitations
     * 
     * <p>Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
     * You can specify a different `role` for each invited organization member.
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * The request body supports passing an optional `redirect_url` parameter for each invitation.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
     * Use this parameter to implement a custom invitation acceptance flow.
     * You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
     * can have a different inviter user.
     * Inviter users must be members with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
     * by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     * 
     * @param organizationId The organization ID.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationInvitationBulkResponse bulkCreate(
            String organizationId,
            List<CreateOrganizationInvitationBulkRequestBody> requestBody,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        CreateOrganizationInvitationBulkRequest request =
            CreateOrganizationInvitationBulkRequest
                .builder()
                .organizationId(organizationId)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                CreateOrganizationInvitationBulkRequest.class,
                _baseUrl,
                "/organizations/{organization_id}/invitations/bulk",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                _baseUrl,
                                "CreateOrganizationInvitationBulk", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                _baseUrl,
                                "CreateOrganizationInvitationBulk",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                          _baseUrl,
                         "CreateOrganizationInvitationBulk", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateOrganizationInvitationBulkResponse.Builder _resBuilder = 
            CreateOrganizationInvitationBulkResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateOrganizationInvitationBulkResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.clerk.backend_api.models.components.OrganizationInvitations _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.clerk.backend_api.models.components.OrganizationInvitations>() {});
                _res.withOrganizationInvitations(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "403", "404", "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ClerkErrors _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClerkErrors>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a list of pending organization invitations
     * 
     * <p>This request returns the list of organization invitations with "pending" status.
     * These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListPendingOrganizationInvitationsRequestBuilder listPending() {
        return new ListPendingOrganizationInvitationsRequestBuilder(this);
    }

    /**
     * Get a list of pending organization invitations
     * 
     * <p>This request returns the list of organization invitations with "pending" status.
     * These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @param organizationId The organization ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListPendingOrganizationInvitationsResponse listPending(
            String organizationId) throws Exception {
        return listPending(organizationId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get a list of pending organization invitations
     * 
     * <p>This request returns the list of organization invitations with "pending" status.
     * These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     * 
     * @param organizationId The organization ID.
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListPendingOrganizationInvitationsResponse listPending(
            String organizationId,
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        ListPendingOrganizationInvitationsRequest request =
            ListPendingOrganizationInvitationsRequest
                .builder()
                .organizationId(organizationId)
                .limit(limit)
                .offset(offset)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                ListPendingOrganizationInvitationsRequest.class,
                _baseUrl,
                "/organizations/{organization_id}/invitations/pending",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListPendingOrganizationInvitationsRequest.class,
                request, 
                null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                _baseUrl,
                                "ListPendingOrganizationInvitations", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                _baseUrl,
                                "ListPendingOrganizationInvitations",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                          _baseUrl,
                         "ListPendingOrganizationInvitations", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListPendingOrganizationInvitationsResponse.Builder _resBuilder = 
            ListPendingOrganizationInvitationsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListPendingOrganizationInvitationsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.clerk.backend_api.models.components.OrganizationInvitations _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.clerk.backend_api.models.components.OrganizationInvitations>() {});
                _res.withOrganizationInvitations(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "404")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ClerkErrors _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClerkErrors>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Retrieve an organization invitation by ID
     * 
     * <p>Use this request to get an existing organization invitation by ID.
     * 
     * @return The call builder
     */
    public GetOrganizationInvitationRequestBuilder get() {
        return new GetOrganizationInvitationRequestBuilder(this);
    }

    /**
     * Retrieve an organization invitation by ID
     * 
     * <p>Use this request to get an existing organization invitation by ID.
     * 
     * @param organizationId The organization ID.
     * @param invitationId The organization invitation ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOrganizationInvitationResponse get(
            String organizationId,
            String invitationId) throws Exception {
        return get(organizationId, invitationId, Optional.empty());
    }
    
    /**
     * Retrieve an organization invitation by ID
     * 
     * <p>Use this request to get an existing organization invitation by ID.
     * 
     * @param organizationId The organization ID.
     * @param invitationId The organization invitation ID.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOrganizationInvitationResponse get(
            String organizationId,
            String invitationId,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        GetOrganizationInvitationRequest request =
            GetOrganizationInvitationRequest
                .builder()
                .organizationId(organizationId)
                .invitationId(invitationId)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetOrganizationInvitationRequest.class,
                _baseUrl,
                "/organizations/{organization_id}/invitations/{invitation_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                _baseUrl,
                                "GetOrganizationInvitation", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                _baseUrl,
                                "GetOrganizationInvitation",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                          _baseUrl,
                         "GetOrganizationInvitation", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetOrganizationInvitationResponse.Builder _resBuilder = 
            GetOrganizationInvitationResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetOrganizationInvitationResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                OrganizationInvitation _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<OrganizationInvitation>() {});
                _res.withOrganizationInvitation(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "403", "404")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ClerkErrors _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClerkErrors>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Revoke a pending organization invitation
     * 
     * <p>Use this request to revoke a previously issued organization invitation.
     * Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
     * Only organization invitations with "pending" status can be revoked.
     * The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation.
     * Only users with "admin" role can revoke invitations.
     * 
     * @return The call builder
     */
    public RevokeOrganizationInvitationRequestBuilder revoke() {
        return new RevokeOrganizationInvitationRequestBuilder(this);
    }

    /**
     * Revoke a pending organization invitation
     * 
     * <p>Use this request to revoke a previously issued organization invitation.
     * Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
     * Only organization invitations with "pending" status can be revoked.
     * The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation.
     * Only users with "admin" role can revoke invitations.
     * 
     * @param organizationId The organization ID.
     * @param invitationId The organization invitation ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeOrganizationInvitationResponse revoke(
            String organizationId,
            String invitationId) throws Exception {
        return revoke(organizationId, invitationId, Optional.empty(), Optional.empty());
    }
    
    /**
     * Revoke a pending organization invitation
     * 
     * <p>Use this request to revoke a previously issued organization invitation.
     * Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
     * Only organization invitations with "pending" status can be revoked.
     * The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation.
     * Only users with "admin" role can revoke invitations.
     * 
     * @param organizationId The organization ID.
     * @param invitationId The organization invitation ID.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeOrganizationInvitationResponse revoke(
            String organizationId,
            String invitationId,
            Optional<? extends RevokeOrganizationInvitationRequestBody> requestBody,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        RevokeOrganizationInvitationRequest request =
            RevokeOrganizationInvitationRequest
                .builder()
                .organizationId(organizationId)
                .invitationId(invitationId)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                RevokeOrganizationInvitationRequest.class,
                _baseUrl,
                "/organizations/{organization_id}/invitations/{invitation_id}/revoke",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                _baseUrl,
                                "RevokeOrganizationInvitation", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                _baseUrl,
                                "RevokeOrganizationInvitation",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                          _baseUrl,
                         "RevokeOrganizationInvitation", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        RevokeOrganizationInvitationResponse.Builder _resBuilder = 
            RevokeOrganizationInvitationResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        RevokeOrganizationInvitationResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                OrganizationInvitation _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<OrganizationInvitation>() {});
                _res.withOrganizationInvitation(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "403", "404")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ClerkErrors _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClerkErrors>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
