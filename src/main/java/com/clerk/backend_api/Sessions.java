/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateSessionRequestBody;
import com.clerk.backend_api.models.operations.CreateSessionRequestBuilder;
import com.clerk.backend_api.models.operations.CreateSessionResponse;
import com.clerk.backend_api.models.operations.CreateSessionTokenFromTemplateRequest;
import com.clerk.backend_api.models.operations.CreateSessionTokenFromTemplateRequestBody;
import com.clerk.backend_api.models.operations.CreateSessionTokenFromTemplateRequestBuilder;
import com.clerk.backend_api.models.operations.CreateSessionTokenFromTemplateResponse;
import com.clerk.backend_api.models.operations.CreateSessionTokenRequest;
import com.clerk.backend_api.models.operations.CreateSessionTokenRequestBody;
import com.clerk.backend_api.models.operations.CreateSessionTokenRequestBuilder;
import com.clerk.backend_api.models.operations.CreateSessionTokenResponse;
import com.clerk.backend_api.models.operations.GetSessionListRequest;
import com.clerk.backend_api.models.operations.GetSessionListRequestBuilder;
import com.clerk.backend_api.models.operations.GetSessionListResponse;
import com.clerk.backend_api.models.operations.GetSessionRequest;
import com.clerk.backend_api.models.operations.GetSessionRequestBuilder;
import com.clerk.backend_api.models.operations.GetSessionResponse;
import com.clerk.backend_api.models.operations.RefreshSessionRequest;
import com.clerk.backend_api.models.operations.RefreshSessionRequestBody;
import com.clerk.backend_api.models.operations.RefreshSessionRequestBuilder;
import com.clerk.backend_api.models.operations.RefreshSessionResponse;
import com.clerk.backend_api.models.operations.RevokeSessionRequest;
import com.clerk.backend_api.models.operations.RevokeSessionRequestBuilder;
import com.clerk.backend_api.models.operations.RevokeSessionResponse;
import com.clerk.backend_api.operations.CreateSession;
import com.clerk.backend_api.operations.CreateSessionToken;
import com.clerk.backend_api.operations.CreateSessionTokenFromTemplate;
import com.clerk.backend_api.operations.GetSession;
import com.clerk.backend_api.operations.GetSessionList;
import com.clerk.backend_api.operations.RefreshSession;
import com.clerk.backend_api.operations.RevokeSession;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import java.lang.String;
import java.util.Optional;


public class Sessions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    Sessions(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List all sessions
     * 
     * <p>Returns a list of all sessions.
     * The sessions are returned sorted by creation date, with the newest sessions appearing first.
     * **Deprecation Notice (2024-01-01):** All parameters were initially considered optional, however
     * moving forward at least one of `client_id` or `user_id` parameters should be provided.
     * 
     * @return The call builder
     */
    public GetSessionListRequestBuilder list() {
        return new GetSessionListRequestBuilder(sdkConfiguration);
    }

    /**
     * List all sessions
     * 
     * <p>Returns a list of all sessions.
     * The sessions are returned sorted by creation date, with the newest sessions appearing first.
     * **Deprecation Notice (2024-01-01):** All parameters were initially considered optional, however
     * moving forward at least one of `client_id` or `user_id` parameters should be provided.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetSessionListResponse list(GetSessionListRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List all sessions
     * 
     * <p>Returns a list of all sessions.
     * The sessions are returned sorted by creation date, with the newest sessions appearing first.
     * **Deprecation Notice (2024-01-01):** All parameters were initially considered optional, however
     * moving forward at least one of `client_id` or `user_id` parameters should be provided.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetSessionListResponse list(GetSessionListRequest request, Optional<Options> options) {
        RequestOperation<GetSessionListRequest, GetSessionListResponse> operation
              = new GetSessionList.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a new active session
     * 
     * <p>Create a new active session for the provided user ID.
     * 
     * <p>**This operation is intended only for use in testing, and is not available for production
     * instances.** If you are looking to generate a user session from the backend,
     * we recommend using the [Sign-in
     * Tokens](https://clerk.com/docs/reference/backend-api/tag/Sign-in-Tokens#operation/CreateSignInToken)
     * resource instead.
     * 
     * @return The call builder
     */
    public CreateSessionRequestBuilder create() {
        return new CreateSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new active session
     * 
     * <p>Create a new active session for the provided user ID.
     * 
     * <p>**This operation is intended only for use in testing, and is not available for production
     * instances.** If you are looking to generate a user session from the backend,
     * we recommend using the [Sign-in
     * Tokens](https://clerk.com/docs/reference/backend-api/tag/Sign-in-Tokens#operation/CreateSignInToken)
     * resource instead.
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateSessionResponse createDirect() {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create a new active session
     * 
     * <p>Create a new active session for the provided user ID.
     * 
     * <p>**This operation is intended only for use in testing, and is not available for production
     * instances.** If you are looking to generate a user session from the backend,
     * we recommend using the [Sign-in
     * Tokens](https://clerk.com/docs/reference/backend-api/tag/Sign-in-Tokens#operation/CreateSignInToken)
     * resource instead.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateSessionResponse create(Optional<? extends CreateSessionRequestBody> request, Optional<Options> options) {
        RequestOperation<Optional<? extends CreateSessionRequestBody>, CreateSessionResponse> operation
              = new CreateSession.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a session
     * 
     * <p>Retrieve the details of a session
     * 
     * @return The call builder
     */
    public GetSessionRequestBuilder get() {
        return new GetSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a session
     * 
     * <p>Retrieve the details of a session
     * 
     * @param sessionId The ID of the session
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetSessionResponse get(String sessionId) {
        return get(sessionId, Optional.empty());
    }

    /**
     * Retrieve a session
     * 
     * <p>Retrieve the details of a session
     * 
     * @param sessionId The ID of the session
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetSessionResponse get(String sessionId, Optional<Options> options) {
        GetSessionRequest request =
            GetSessionRequest
                .builder()
                .sessionId(sessionId)
                .build();
        RequestOperation<GetSessionRequest, GetSessionResponse> operation
              = new GetSession.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Refresh a session
     * 
     * <p>Refreshes a session by creating a new session token. A 401 is returned when there
     * are validation errors, which signals the SDKs to fall back to the handshake flow.
     * 
     * @return The call builder
     */
    public RefreshSessionRequestBuilder refresh() {
        return new RefreshSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Refresh a session
     * 
     * <p>Refreshes a session by creating a new session token. A 401 is returned when there
     * are validation errors, which signals the SDKs to fall back to the handshake flow.
     * 
     * @param sessionId The ID of the session
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RefreshSessionResponse refresh(String sessionId) {
        return refresh(sessionId, Optional.empty(), Optional.empty());
    }

    /**
     * Refresh a session
     * 
     * <p>Refreshes a session by creating a new session token. A 401 is returned when there
     * are validation errors, which signals the SDKs to fall back to the handshake flow.
     * 
     * @param sessionId The ID of the session
     * @param requestBody Refresh session parameters
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RefreshSessionResponse refresh(
            String sessionId, Optional<? extends RefreshSessionRequestBody> requestBody,
            Optional<Options> options) {
        RefreshSessionRequest request =
            RefreshSessionRequest
                .builder()
                .sessionId(sessionId)
                .requestBody(requestBody)
                .build();
        RequestOperation<RefreshSessionRequest, RefreshSessionResponse> operation
              = new RefreshSession.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revoke a session
     * 
     * <p>Sets the status of a session as "revoked", which is an unauthenticated state.
     * In multi-session mode, a revoked session will still be returned along with its client object,
     * however the user will need to sign in again.
     * 
     * @return The call builder
     */
    public RevokeSessionRequestBuilder revoke() {
        return new RevokeSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Revoke a session
     * 
     * <p>Sets the status of a session as "revoked", which is an unauthenticated state.
     * In multi-session mode, a revoked session will still be returned along with its client object,
     * however the user will need to sign in again.
     * 
     * @param sessionId The ID of the session
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RevokeSessionResponse revoke(String sessionId) {
        return revoke(sessionId, Optional.empty());
    }

    /**
     * Revoke a session
     * 
     * <p>Sets the status of a session as "revoked", which is an unauthenticated state.
     * In multi-session mode, a revoked session will still be returned along with its client object,
     * however the user will need to sign in again.
     * 
     * @param sessionId The ID of the session
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RevokeSessionResponse revoke(String sessionId, Optional<Options> options) {
        RevokeSessionRequest request =
            RevokeSessionRequest
                .builder()
                .sessionId(sessionId)
                .build();
        RequestOperation<RevokeSessionRequest, RevokeSessionResponse> operation
              = new RevokeSession.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a session token
     * 
     * <p>Creates a session JSON Web Token (JWT) based on a session.
     * 
     * @return The call builder
     */
    public CreateSessionTokenRequestBuilder createToken() {
        return new CreateSessionTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a session token
     * 
     * <p>Creates a session JSON Web Token (JWT) based on a session.
     * 
     * @param sessionId The ID of the session
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateSessionTokenResponse createToken(String sessionId) {
        return createToken(sessionId, Optional.empty(), Optional.empty());
    }

    /**
     * Create a session token
     * 
     * <p>Creates a session JSON Web Token (JWT) based on a session.
     * 
     * @param sessionId The ID of the session
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateSessionTokenResponse createToken(
            String sessionId, Optional<? extends CreateSessionTokenRequestBody> requestBody,
            Optional<Options> options) {
        CreateSessionTokenRequest request =
            CreateSessionTokenRequest
                .builder()
                .sessionId(sessionId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateSessionTokenRequest, CreateSessionTokenResponse> operation
              = new CreateSessionToken.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a session token from a JWT template
     * 
     * <p>Creates a JSON Web Token (JWT) based on a session and a JWT Template name defined for your instance
     * 
     * @return The call builder
     */
    public CreateSessionTokenFromTemplateRequestBuilder createTokenFromTemplate() {
        return new CreateSessionTokenFromTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a session token from a JWT template
     * 
     * <p>Creates a JSON Web Token (JWT) based on a session and a JWT Template name defined for your instance
     * 
     * @param sessionId The ID of the session
     * @param templateName The name of the JWT template defined in your instance (e.g. `custom_hasura`).
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateSessionTokenFromTemplateResponse createTokenFromTemplate(String sessionId, String templateName) {
        return createTokenFromTemplate(sessionId, templateName, Optional.empty(),
            Optional.empty());
    }

    /**
     * Create a session token from a JWT template
     * 
     * <p>Creates a JSON Web Token (JWT) based on a session and a JWT Template name defined for your instance
     * 
     * @param sessionId The ID of the session
     * @param templateName The name of the JWT template defined in your instance (e.g. `custom_hasura`).
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateSessionTokenFromTemplateResponse createTokenFromTemplate(
            String sessionId, String templateName,
            Optional<? extends CreateSessionTokenFromTemplateRequestBody> requestBody, Optional<Options> options) {
        CreateSessionTokenFromTemplateRequest request =
            CreateSessionTokenFromTemplateRequest
                .builder()
                .sessionId(sessionId)
                .templateName(templateName)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateSessionTokenFromTemplateRequest, CreateSessionTokenFromTemplateResponse> operation
              = new CreateSessionTokenFromTemplate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
