/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateEmailAddressRequestBody;
import com.clerk.backend_api.models.operations.CreateEmailAddressRequestBuilder;
import com.clerk.backend_api.models.operations.CreateEmailAddressResponse;
import com.clerk.backend_api.models.operations.DeleteEmailAddressRequest;
import com.clerk.backend_api.models.operations.DeleteEmailAddressRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteEmailAddressResponse;
import com.clerk.backend_api.models.operations.GetEmailAddressRequest;
import com.clerk.backend_api.models.operations.GetEmailAddressRequestBuilder;
import com.clerk.backend_api.models.operations.GetEmailAddressResponse;
import com.clerk.backend_api.models.operations.UpdateEmailAddressRequest;
import com.clerk.backend_api.models.operations.UpdateEmailAddressRequestBody;
import com.clerk.backend_api.models.operations.UpdateEmailAddressRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateEmailAddressResponse;
import com.clerk.backend_api.operations.CreateEmailAddress;
import com.clerk.backend_api.operations.DeleteEmailAddress;
import com.clerk.backend_api.operations.GetEmailAddress;
import com.clerk.backend_api.operations.UpdateEmailAddress;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import java.lang.String;
import java.util.Optional;


public class EmailAddresses {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    EmailAddresses(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create an email address
     * 
     * <p>Create a new email address
     * 
     * @return The call builder
     */
    public CreateEmailAddressRequestBuilder create() {
        return new CreateEmailAddressRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an email address
     * 
     * <p>Create a new email address
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateEmailAddressResponse createDirect() {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create an email address
     * 
     * <p>Create a new email address
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateEmailAddressResponse create(Optional<? extends CreateEmailAddressRequestBody> request, Optional<Options> options) {
        RequestOperation<Optional<? extends CreateEmailAddressRequestBody>, CreateEmailAddressResponse> operation
              = new CreateEmailAddress.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve an email address
     * 
     * <p>Returns the details of an email address.
     * 
     * @return The call builder
     */
    public GetEmailAddressRequestBuilder get() {
        return new GetEmailAddressRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an email address
     * 
     * <p>Returns the details of an email address.
     * 
     * @param emailAddressId The ID of the email address to retrieve
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetEmailAddressResponse get(String emailAddressId) {
        return get(emailAddressId, Optional.empty());
    }

    /**
     * Retrieve an email address
     * 
     * <p>Returns the details of an email address.
     * 
     * @param emailAddressId The ID of the email address to retrieve
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetEmailAddressResponse get(String emailAddressId, Optional<Options> options) {
        GetEmailAddressRequest request =
            GetEmailAddressRequest
                .builder()
                .emailAddressId(emailAddressId)
                .build();
        RequestOperation<GetEmailAddressRequest, GetEmailAddressResponse> operation
              = new GetEmailAddress.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete an email address
     * 
     * <p>Delete the email address with the given ID
     * 
     * @return The call builder
     */
    public DeleteEmailAddressRequestBuilder delete() {
        return new DeleteEmailAddressRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete an email address
     * 
     * <p>Delete the email address with the given ID
     * 
     * @param emailAddressId The ID of the email address to delete
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeleteEmailAddressResponse delete(String emailAddressId) {
        return delete(emailAddressId, Optional.empty());
    }

    /**
     * Delete an email address
     * 
     * <p>Delete the email address with the given ID
     * 
     * @param emailAddressId The ID of the email address to delete
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeleteEmailAddressResponse delete(String emailAddressId, Optional<Options> options) {
        DeleteEmailAddressRequest request =
            DeleteEmailAddressRequest
                .builder()
                .emailAddressId(emailAddressId)
                .build();
        RequestOperation<DeleteEmailAddressRequest, DeleteEmailAddressResponse> operation
              = new DeleteEmailAddress.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an email address
     * 
     * <p>Updates an email address.
     * 
     * @return The call builder
     */
    public UpdateEmailAddressRequestBuilder update() {
        return new UpdateEmailAddressRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an email address
     * 
     * <p>Updates an email address.
     * 
     * @param emailAddressId The ID of the email address to update
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateEmailAddressResponse update(String emailAddressId) {
        return update(emailAddressId, Optional.empty(), Optional.empty());
    }

    /**
     * Update an email address
     * 
     * <p>Updates an email address.
     * 
     * @param emailAddressId The ID of the email address to update
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateEmailAddressResponse update(
            String emailAddressId, Optional<? extends UpdateEmailAddressRequestBody> requestBody,
            Optional<Options> options) {
        UpdateEmailAddressRequest request =
            UpdateEmailAddressRequest
                .builder()
                .emailAddressId(emailAddressId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateEmailAddressRequest, UpdateEmailAddressResponse> operation
              = new UpdateEmailAddress.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
