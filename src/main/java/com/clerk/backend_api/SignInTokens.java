/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateSignInTokenRequestBody;
import com.clerk.backend_api.models.operations.CreateSignInTokenRequestBuilder;
import com.clerk.backend_api.models.operations.CreateSignInTokenResponse;
import com.clerk.backend_api.models.operations.RevokeSignInTokenRequest;
import com.clerk.backend_api.models.operations.RevokeSignInTokenRequestBuilder;
import com.clerk.backend_api.models.operations.RevokeSignInTokenResponse;
import com.clerk.backend_api.operations.CreateSignInTokenOperation;
import com.clerk.backend_api.operations.RevokeSignInTokenOperation;
import com.clerk.backend_api.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class SignInTokens {
    private final SDKConfiguration sdkConfiguration;

    SignInTokens(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Create sign-in token
     * 
     * <p>Creates a new sign-in token and associates it with the given user.
     * By default, sign-in tokens expire in 30 days.
     * You can optionally supply a different duration in seconds using the `expires_in_seconds` property.
     * 
     * @return The call builder
     */
    public CreateSignInTokenRequestBuilder create() {
        return new CreateSignInTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Create sign-in token
     * 
     * <p>Creates a new sign-in token and associates it with the given user.
     * By default, sign-in tokens expire in 30 days.
     * You can optionally supply a different duration in seconds using the `expires_in_seconds` property.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateSignInTokenResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create sign-in token
     * 
     * <p>Creates a new sign-in token and associates it with the given user.
     * By default, sign-in tokens expire in 30 days.
     * You can optionally supply a different duration in seconds using the `expires_in_seconds` property.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateSignInTokenResponse create(
            Optional<? extends CreateSignInTokenRequestBody> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateSignInTokenRequestBody>, CreateSignInTokenResponse> operation
              = new CreateSignInTokenOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revoke the given sign-in token
     * 
     * <p>Revokes a pending sign-in token
     * 
     * @return The call builder
     */
    public RevokeSignInTokenRequestBuilder revoke() {
        return new RevokeSignInTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Revoke the given sign-in token
     * 
     * <p>Revokes a pending sign-in token
     * 
     * @param signInTokenId The ID of the sign-in token to be revoked
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeSignInTokenResponse revoke(String signInTokenId) throws Exception {
        return revoke(signInTokenId, Optional.empty());
    }

    /**
     * Revoke the given sign-in token
     * 
     * <p>Revokes a pending sign-in token
     * 
     * @param signInTokenId The ID of the sign-in token to be revoked
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeSignInTokenResponse revoke(
            String signInTokenId,
            Optional<Options> options) throws Exception {
        RevokeSignInTokenRequest request =
            RevokeSignInTokenRequest
                .builder()
                .signInTokenId(signInTokenId)
                .build();
        RequestOperation<RevokeSignInTokenRequest, RevokeSignInTokenResponse> operation
              = new RevokeSignInTokenOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
