/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.GetClientListRequest;
import com.clerk.backend_api.models.operations.GetClientListRequestBuilder;
import com.clerk.backend_api.models.operations.GetClientListResponse;
import com.clerk.backend_api.models.operations.GetClientRequest;
import com.clerk.backend_api.models.operations.GetClientRequestBuilder;
import com.clerk.backend_api.models.operations.GetClientResponse;
import com.clerk.backend_api.models.operations.VerifyClientRequestBody;
import com.clerk.backend_api.models.operations.VerifyClientRequestBuilder;
import com.clerk.backend_api.models.operations.VerifyClientResponse;
import com.clerk.backend_api.operations.GetClient;
import com.clerk.backend_api.operations.GetClientList;
import com.clerk.backend_api.operations.VerifyClient;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;


public class Clients {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    Clients(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List all clients
     * 
     * <p>Returns a list of all clients. The clients are returned sorted by creation date,
     * with the newest clients appearing first.
     * Warning: the endpoint is being deprecated and will be removed in future versions.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetClientListRequestBuilder list() {
        return new GetClientListRequestBuilder(sdkConfiguration);
    }

    /**
     * List all clients
     * 
     * <p>Returns a list of all clients. The clients are returned sorted by creation date,
     * with the newest clients appearing first.
     * Warning: the endpoint is being deprecated and will be removed in future versions.
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetClientListResponse listDirect() {
        return list(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * List all clients
     * 
     * <p>Returns a list of all clients. The clients are returned sorted by creation date,
     * with the newest clients appearing first.
     * Warning: the endpoint is being deprecated and will be removed in future versions.
     * 
     * @param paginated Whether to paginate the results.
     *         If true, the results will be paginated.
     *         If false, the results will not be paginated.
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetClientListResponse list(
            Optional<Boolean> paginated, Optional<Long> limit,
            Optional<Long> offset, Optional<Options> options) {
        GetClientListRequest request =
            GetClientListRequest
                .builder()
                .paginated(paginated)
                .limit(limit)
                .offset(offset)
                .build();
        RequestOperation<GetClientListRequest, GetClientListResponse> operation
              = new GetClientList.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Verify a client
     * 
     * <p>Verifies the client in the provided token
     * 
     * @return The call builder
     */
    public VerifyClientRequestBuilder verify() {
        return new VerifyClientRequestBuilder(sdkConfiguration);
    }

    /**
     * Verify a client
     * 
     * <p>Verifies the client in the provided token
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public VerifyClientResponse verifyDirect() {
        return verify(Optional.empty(), Optional.empty());
    }

    /**
     * Verify a client
     * 
     * <p>Verifies the client in the provided token
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public VerifyClientResponse verify(Optional<? extends VerifyClientRequestBody> request, Optional<Options> options) {
        RequestOperation<Optional<? extends VerifyClientRequestBody>, VerifyClientResponse> operation
              = new VerifyClient.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a client
     * 
     * <p>Returns the details of a client.
     * 
     * @return The call builder
     */
    public GetClientRequestBuilder get() {
        return new GetClientRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a client
     * 
     * <p>Returns the details of a client.
     * 
     * @param clientId Client ID.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetClientResponse get(String clientId) {
        return get(clientId, Optional.empty());
    }

    /**
     * Get a client
     * 
     * <p>Returns the details of a client.
     * 
     * @param clientId Client ID.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetClientResponse get(String clientId, Optional<Options> options) {
        GetClientRequest request =
            GetClientRequest
                .builder()
                .clientId(clientId)
                .build();
        RequestOperation<GetClientRequest, GetClientResponse> operation
              = new GetClient.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
