/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api.operations;

import static com.clerk.backend_api.operations.Operations.RequestOperation;
import static com.clerk.backend_api.utils.Retries.NonRetryableException;
import static com.clerk.backend_api.utils.Exceptions.unchecked;

import com.clerk.backend_api.SDKConfiguration;
import com.clerk.backend_api.SecuritySource;
import com.clerk.backend_api.models.errors.GetM2MTokensM2mResponseBody;
import com.clerk.backend_api.models.errors.GetM2MTokensM2mResponseResponseBody;
import com.clerk.backend_api.models.errors.SDKError;
import com.clerk.backend_api.models.operations.GetM2MTokensRequest;
import com.clerk.backend_api.models.operations.GetM2MTokensResponse;
import com.clerk.backend_api.models.operations.GetM2MTokensResponseBody;
import com.clerk.backend_api.utils.BackoffStrategy;
import com.clerk.backend_api.utils.HTTPClient;
import com.clerk.backend_api.utils.HTTPRequest;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Hook.AfterErrorContextImpl;
import com.clerk.backend_api.utils.Hook.AfterSuccessContextImpl;
import com.clerk.backend_api.utils.Hook.BeforeRequestContextImpl;
import com.clerk.backend_api.utils.Options;
import com.clerk.backend_api.utils.Retries;
import com.clerk.backend_api.utils.RetryConfig;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;


public class GetM2MTokens {

    static abstract class Base {
        final SDKConfiguration sdkConfiguration;
        final String baseUrl;
        final SecuritySource securitySource;
        final List<String> retryStatusCodes;
        final RetryConfig retryConfig;
        final HTTPClient client;
        final Headers _headers;

        public Base(
                SDKConfiguration sdkConfiguration, Optional<Options> options,
                Headers _headers) {
            this.sdkConfiguration = sdkConfiguration;
            this._headers =_headers;
            this.baseUrl = this.sdkConfiguration.serverUrl();
            this.securitySource = this.sdkConfiguration.securitySource();
            options
                    .ifPresent(o -> o.validate(List.of(Options.Option.RETRY_CONFIG)));
            this.retryStatusCodes = List.of("5XX");
            this.retryConfig = options
                    .flatMap(Options::retryConfig)
                    .or(sdkConfiguration::retryConfig)
                    .orElse(RetryConfig.builder().backoff(BackoffStrategy.builder()
                                    .initialInterval(500, TimeUnit.MILLISECONDS)
                                    .maxInterval(60000, TimeUnit.MILLISECONDS)
                                    .baseFactor((double) (1.5))
                                    .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                                    .retryConnectError(true)
                                    .build())
                            .build());
            this.client = this.sdkConfiguration.client();
        }

        Optional<SecuritySource> securitySource() {
            return Optional.ofNullable(this.securitySource);
        }

        BeforeRequestContextImpl createBeforeRequestContext() {
            return new BeforeRequestContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "getM2MTokens",
                    java.util.Optional.empty(),
                    securitySource());
        }

        AfterSuccessContextImpl createAfterSuccessContext() {
            return new AfterSuccessContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "getM2MTokens",
                    java.util.Optional.empty(),
                    securitySource());
        }

        AfterErrorContextImpl createAfterErrorContext() {
            return new AfterErrorContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "getM2MTokens",
                    java.util.Optional.empty(),
                    securitySource());
        }
        <T>HttpRequest buildRequest(T request, Class<T> klass) throws Exception {
            String url = Utils.generateURL(
                    this.baseUrl,
                    "/m2m_tokens");
            HTTPRequest req = new HTTPRequest(url, "GET");
            req.addHeader("Accept", "application/json")
                    .addHeader("user-agent", SDKConfiguration.USER_AGENT);
            _headers.forEach((k, list) -> list.forEach(v -> req.addHeader(k, v)));

            req.addQueryParams(Utils.getQueryParams(
                    klass,
                    request,
                    null));
            Utils.configureSecurity(req, this.sdkConfiguration.securitySource().getSecurity());

            return req.build();
        }
    }

    public static class Sync extends Base
            implements RequestOperation<GetM2MTokensRequest, GetM2MTokensResponse> {
        public Sync(
                SDKConfiguration sdkConfiguration, Optional<Options> options,
                Headers _headers) {
            super(
                  sdkConfiguration, options,
                  _headers);
        }

        private HttpRequest onBuildRequest(GetM2MTokensRequest request) throws Exception {
            HttpRequest req = buildRequest(request, GetM2MTokensRequest.class);
            return sdkConfiguration.hooks().beforeRequest(createBeforeRequestContext(), req);
        }

        private HttpResponse<InputStream> onError(HttpResponse<InputStream> response, Exception error) throws Exception {
            return sdkConfiguration.hooks().afterError(
                    createAfterErrorContext(),
                    Optional.ofNullable(response),
                    Optional.ofNullable(error));
        }

        private HttpResponse<InputStream> onSuccess(HttpResponse<InputStream> response) throws Exception {
            return sdkConfiguration.hooks().afterSuccess(createAfterSuccessContext(), response);
        }

        @Override
        public HttpResponse<InputStream> doRequest(GetM2MTokensRequest request) {
            Retries retries = Retries.builder()
                    .action(() -> {
                        HttpRequest r;
                        try {
                            r = onBuildRequest(request);
                        } catch (Exception e) {
                            throw new NonRetryableException(e);
                        }
                        try {
                            HttpResponse<InputStream> httpRes = client.send(r);
                            if (Utils.statusCodeMatches(httpRes.statusCode(), "400", "403", "404", "4XX", "5XX")) {
                                return onError(httpRes, null);
                            }
                            return httpRes;
                        } catch (Exception e) {
                            return onError(null, e);
                        }
                    })
                    .retryConfig(retryConfig)
                    .statusCodes(retryStatusCodes)
                    .build();
            return unchecked(() -> onSuccess(retries.run())).get();
        }


        @Override
        public GetM2MTokensResponse handleResponse(HttpResponse<InputStream> response) {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            GetM2MTokensResponse.Builder resBuilder =
                    GetM2MTokensResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            GetM2MTokensResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "200")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    return res.withObject(Utils.unmarshal(response, new TypeReference<GetM2MTokensResponseBody>() {}));
                } else {
                    throw SDKError.from("Unexpected content-type received: " + contentType, response);
                }
            }
            if (Utils.statusCodeMatches(response.statusCode(), "400")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    throw com.clerk.backend_api.models.errors.GetM2MTokensResponseBody.from(response);
                } else {
                    throw SDKError.from("Unexpected content-type received: " + contentType, response);
                }
            }
            if (Utils.statusCodeMatches(response.statusCode(), "403")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    throw GetM2MTokensM2mResponseBody.from(response);
                } else {
                    throw SDKError.from("Unexpected content-type received: " + contentType, response);
                }
            }
            if (Utils.statusCodeMatches(response.statusCode(), "404")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    throw GetM2MTokensM2mResponseResponseBody.from(response);
                } else {
                    throw SDKError.from("Unexpected content-type received: " + contentType, response);
                }
            }
            if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
                // no content
                throw SDKError.from("API error occurred", response);
            }
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                // no content
                throw SDKError.from("API error occurred", response);
            }
            throw SDKError.from("Unexpected status code received: " + response.statusCode(), response);
        }
    }
}
