/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.VerifyOAuthAccessTokenRequestBody;
import com.clerk.backend_api.models.operations.VerifyOAuthAccessTokenRequestBuilder;
import com.clerk.backend_api.models.operations.VerifyOAuthAccessTokenResponse;
import com.clerk.backend_api.operations.VerifyOAuthAccessToken;
import com.clerk.backend_api.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class OauthAccessTokens {
    private final SDKConfiguration sdkConfiguration;

    OauthAccessTokens(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Verify an OAuth Access Token
     * 
     * @return The call builder
     */
    public VerifyOAuthAccessTokenRequestBuilder verify() {
        return new VerifyOAuthAccessTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Verify an OAuth Access Token
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifyOAuthAccessTokenResponse verify(VerifyOAuthAccessTokenRequestBody request) throws Exception {
        return verify(request, Optional.empty());
    }

    /**
     * Verify an OAuth Access Token
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifyOAuthAccessTokenResponse verify(VerifyOAuthAccessTokenRequestBody request, Optional<Options> options) throws Exception {
        RequestOperation<VerifyOAuthAccessTokenRequestBody, VerifyOAuthAccessTokenResponse> operation
              = new VerifyOAuthAccessToken.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
