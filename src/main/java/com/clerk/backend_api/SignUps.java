/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.GetSignUpRequest;
import com.clerk.backend_api.models.operations.GetSignUpRequestBuilder;
import com.clerk.backend_api.models.operations.GetSignUpResponse;
import com.clerk.backend_api.models.operations.UpdateSignUpRequest;
import com.clerk.backend_api.models.operations.UpdateSignUpRequestBody;
import com.clerk.backend_api.models.operations.UpdateSignUpRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateSignUpResponse;
import com.clerk.backend_api.operations.GetSignUp;
import com.clerk.backend_api.operations.UpdateSignUp;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import java.lang.String;
import java.util.Optional;


public class SignUps {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    SignUps(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Retrieve a sign-up by ID
     * 
     * <p>Retrieve the details of the sign-up with the given ID
     * 
     * @return The call builder
     */
    public GetSignUpRequestBuilder get() {
        return new GetSignUpRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a sign-up by ID
     * 
     * <p>Retrieve the details of the sign-up with the given ID
     * 
     * @param id The ID of the sign-up to retrieve
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetSignUpResponse get(String id) {
        return get(id, Optional.empty());
    }

    /**
     * Retrieve a sign-up by ID
     * 
     * <p>Retrieve the details of the sign-up with the given ID
     * 
     * @param id The ID of the sign-up to retrieve
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetSignUpResponse get(String id, Optional<Options> options) {
        GetSignUpRequest request =
            GetSignUpRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<GetSignUpRequest, GetSignUpResponse> operation
              = new GetSignUp.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a sign-up
     * 
     * <p>Update the sign-up with the given ID
     * 
     * @return The call builder
     */
    public UpdateSignUpRequestBuilder update() {
        return new UpdateSignUpRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a sign-up
     * 
     * <p>Update the sign-up with the given ID
     * 
     * @param id The ID of the sign-up to update
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateSignUpResponse update(String id) {
        return update(id, Optional.empty(), Optional.empty());
    }

    /**
     * Update a sign-up
     * 
     * <p>Update the sign-up with the given ID
     * 
     * @param id The ID of the sign-up to update
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateSignUpResponse update(
            String id, Optional<? extends UpdateSignUpRequestBody> requestBody,
            Optional<Options> options) {
        UpdateSignUpRequest request =
            UpdateSignUpRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateSignUpRequest, UpdateSignUpResponse> operation
              = new UpdateSignUp.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
