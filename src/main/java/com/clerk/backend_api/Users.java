/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.BanUserRequest;
import com.clerk.backend_api.models.operations.BanUserRequestBuilder;
import com.clerk.backend_api.models.operations.BanUserResponse;
import com.clerk.backend_api.models.operations.CreateUserRequestBody;
import com.clerk.backend_api.models.operations.CreateUserRequestBuilder;
import com.clerk.backend_api.models.operations.CreateUserResponse;
import com.clerk.backend_api.models.operations.DeleteBackupCodeRequest;
import com.clerk.backend_api.models.operations.DeleteBackupCodeRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteBackupCodeResponse;
import com.clerk.backend_api.models.operations.DeleteExternalAccountRequest;
import com.clerk.backend_api.models.operations.DeleteExternalAccountRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteExternalAccountResponse;
import com.clerk.backend_api.models.operations.DeleteTOTPRequest;
import com.clerk.backend_api.models.operations.DeleteTOTPRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteTOTPResponse;
import com.clerk.backend_api.models.operations.DeleteUserProfileImageRequest;
import com.clerk.backend_api.models.operations.DeleteUserProfileImageRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteUserProfileImageResponse;
import com.clerk.backend_api.models.operations.DeleteUserRequest;
import com.clerk.backend_api.models.operations.DeleteUserRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteUserResponse;
import com.clerk.backend_api.models.operations.DisableMFARequest;
import com.clerk.backend_api.models.operations.DisableMFARequestBuilder;
import com.clerk.backend_api.models.operations.DisableMFAResponse;
import com.clerk.backend_api.models.operations.GetOAuthAccessTokenRequest;
import com.clerk.backend_api.models.operations.GetOAuthAccessTokenRequestBuilder;
import com.clerk.backend_api.models.operations.GetOAuthAccessTokenResponse;
import com.clerk.backend_api.models.operations.GetUserBillingSubscriptionRequest;
import com.clerk.backend_api.models.operations.GetUserBillingSubscriptionRequestBuilder;
import com.clerk.backend_api.models.operations.GetUserBillingSubscriptionResponse;
import com.clerk.backend_api.models.operations.GetUserListRequest;
import com.clerk.backend_api.models.operations.GetUserListRequestBuilder;
import com.clerk.backend_api.models.operations.GetUserListResponse;
import com.clerk.backend_api.models.operations.GetUserRequest;
import com.clerk.backend_api.models.operations.GetUserRequestBuilder;
import com.clerk.backend_api.models.operations.GetUserResponse;
import com.clerk.backend_api.models.operations.GetUsersCountRequest;
import com.clerk.backend_api.models.operations.GetUsersCountRequestBuilder;
import com.clerk.backend_api.models.operations.GetUsersCountResponse;
import com.clerk.backend_api.models.operations.InstanceGetOrganizationMembershipsRequest;
import com.clerk.backend_api.models.operations.InstanceGetOrganizationMembershipsRequestBuilder;
import com.clerk.backend_api.models.operations.InstanceGetOrganizationMembershipsResponse;
import com.clerk.backend_api.models.operations.LockUserRequest;
import com.clerk.backend_api.models.operations.LockUserRequestBuilder;
import com.clerk.backend_api.models.operations.LockUserResponse;
import com.clerk.backend_api.models.operations.QueryParamStatus;
import com.clerk.backend_api.models.operations.SetUserProfileImageRequest;
import com.clerk.backend_api.models.operations.SetUserProfileImageRequestBody;
import com.clerk.backend_api.models.operations.SetUserProfileImageRequestBuilder;
import com.clerk.backend_api.models.operations.SetUserProfileImageResponse;
import com.clerk.backend_api.models.operations.UnbanUserRequest;
import com.clerk.backend_api.models.operations.UnbanUserRequestBuilder;
import com.clerk.backend_api.models.operations.UnbanUserResponse;
import com.clerk.backend_api.models.operations.UnlockUserRequest;
import com.clerk.backend_api.models.operations.UnlockUserRequestBuilder;
import com.clerk.backend_api.models.operations.UnlockUserResponse;
import com.clerk.backend_api.models.operations.UpdateUserMetadataRequest;
import com.clerk.backend_api.models.operations.UpdateUserMetadataRequestBody;
import com.clerk.backend_api.models.operations.UpdateUserMetadataRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateUserMetadataResponse;
import com.clerk.backend_api.models.operations.UpdateUserRequest;
import com.clerk.backend_api.models.operations.UpdateUserRequestBody;
import com.clerk.backend_api.models.operations.UpdateUserRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateUserResponse;
import com.clerk.backend_api.models.operations.UserPasskeyDeleteRequest;
import com.clerk.backend_api.models.operations.UserPasskeyDeleteRequestBuilder;
import com.clerk.backend_api.models.operations.UserPasskeyDeleteResponse;
import com.clerk.backend_api.models.operations.UserWeb3WalletDeleteRequest;
import com.clerk.backend_api.models.operations.UserWeb3WalletDeleteRequestBuilder;
import com.clerk.backend_api.models.operations.UserWeb3WalletDeleteResponse;
import com.clerk.backend_api.models.operations.UsersBanRequestBody;
import com.clerk.backend_api.models.operations.UsersBanRequestBuilder;
import com.clerk.backend_api.models.operations.UsersBanResponse;
import com.clerk.backend_api.models.operations.UsersGetOrganizationInvitationsRequest;
import com.clerk.backend_api.models.operations.UsersGetOrganizationInvitationsRequestBuilder;
import com.clerk.backend_api.models.operations.UsersGetOrganizationInvitationsResponse;
import com.clerk.backend_api.models.operations.UsersGetOrganizationMembershipsRequest;
import com.clerk.backend_api.models.operations.UsersGetOrganizationMembershipsRequestBuilder;
import com.clerk.backend_api.models.operations.UsersGetOrganizationMembershipsResponse;
import com.clerk.backend_api.models.operations.UsersUnbanRequestBody;
import com.clerk.backend_api.models.operations.UsersUnbanRequestBuilder;
import com.clerk.backend_api.models.operations.UsersUnbanResponse;
import com.clerk.backend_api.models.operations.VerifyPasswordRequest;
import com.clerk.backend_api.models.operations.VerifyPasswordRequestBody;
import com.clerk.backend_api.models.operations.VerifyPasswordRequestBuilder;
import com.clerk.backend_api.models.operations.VerifyPasswordResponse;
import com.clerk.backend_api.models.operations.VerifyTOTPRequest;
import com.clerk.backend_api.models.operations.VerifyTOTPRequestBody;
import com.clerk.backend_api.models.operations.VerifyTOTPRequestBuilder;
import com.clerk.backend_api.models.operations.VerifyTOTPResponse;
import com.clerk.backend_api.operations.BanUser;
import com.clerk.backend_api.operations.CreateUser;
import com.clerk.backend_api.operations.DeleteBackupCode;
import com.clerk.backend_api.operations.DeleteExternalAccount;
import com.clerk.backend_api.operations.DeleteTOTP;
import com.clerk.backend_api.operations.DeleteUser;
import com.clerk.backend_api.operations.DeleteUserProfileImage;
import com.clerk.backend_api.operations.DisableMFA;
import com.clerk.backend_api.operations.GetOAuthAccessToken;
import com.clerk.backend_api.operations.GetUser;
import com.clerk.backend_api.operations.GetUserBillingSubscription;
import com.clerk.backend_api.operations.GetUserList;
import com.clerk.backend_api.operations.GetUsersCount;
import com.clerk.backend_api.operations.InstanceGetOrganizationMemberships;
import com.clerk.backend_api.operations.LockUser;
import com.clerk.backend_api.operations.SetUserProfileImage;
import com.clerk.backend_api.operations.UnbanUser;
import com.clerk.backend_api.operations.UnlockUser;
import com.clerk.backend_api.operations.UpdateUser;
import com.clerk.backend_api.operations.UpdateUserMetadata;
import com.clerk.backend_api.operations.UserPasskeyDelete;
import com.clerk.backend_api.operations.UserWeb3WalletDelete;
import com.clerk.backend_api.operations.UsersBan;
import com.clerk.backend_api.operations.UsersGetOrganizationInvitations;
import com.clerk.backend_api.operations.UsersGetOrganizationMemberships;
import com.clerk.backend_api.operations.UsersUnban;
import com.clerk.backend_api.operations.VerifyPassword;
import com.clerk.backend_api.operations.VerifyTOTP;
import com.clerk.backend_api.utils.Options;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;


public class Users {
    private final SDKConfiguration sdkConfiguration;

    Users(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List all users
     * 
     * <p>Returns a list of all users.
     * The users are returned sorted by creation date, with the newest users appearing first.
     * 
     * @return The call builder
     */
    public GetUserListRequestBuilder list() {
        return new GetUserListRequestBuilder(sdkConfiguration);
    }

    /**
     * List all users
     * 
     * <p>Returns a list of all users.
     * The users are returned sorted by creation date, with the newest users appearing first.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserListResponse list(GetUserListRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List all users
     * 
     * <p>Returns a list of all users.
     * The users are returned sorted by creation date, with the newest users appearing first.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserListResponse list(GetUserListRequest request, Optional<Options> options) throws Exception {
        RequestOperation<GetUserListRequest, GetUserListResponse> operation
              = new GetUserList.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a new user
     * 
     * <p>Creates a new user. Your user management settings determine how you should setup your user model.
     * 
     * <p>Any email address and phone number created using this method will be marked as verified.
     * 
     * <p>Note: If you are performing a migration, check out our guide on [zero downtime migrations](https://clerk.com/docs/deployments/migrate-overview).
     * 
     * <p>The following rate limit rules apply to this endpoint: 1000 requests per 10 seconds for production instances and 100 requests per 10 seconds for development instances
     * 
     * @return The call builder
     */
    public CreateUserRequestBuilder create() {
        return new CreateUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new user
     * 
     * <p>Creates a new user. Your user management settings determine how you should setup your user model.
     * 
     * <p>Any email address and phone number created using this method will be marked as verified.
     * 
     * <p>Note: If you are performing a migration, check out our guide on [zero downtime migrations](https://clerk.com/docs/deployments/migrate-overview).
     * 
     * <p>The following rate limit rules apply to this endpoint: 1000 requests per 10 seconds for production instances and 100 requests per 10 seconds for development instances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateUserResponse create(CreateUserRequestBody request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create a new user
     * 
     * <p>Creates a new user. Your user management settings determine how you should setup your user model.
     * 
     * <p>Any email address and phone number created using this method will be marked as verified.
     * 
     * <p>Note: If you are performing a migration, check out our guide on [zero downtime migrations](https://clerk.com/docs/deployments/migrate-overview).
     * 
     * <p>The following rate limit rules apply to this endpoint: 1000 requests per 10 seconds for production instances and 100 requests per 10 seconds for development instances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateUserResponse create(CreateUserRequestBody request, Optional<Options> options) throws Exception {
        RequestOperation<CreateUserRequestBody, CreateUserResponse> operation
              = new CreateUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Count users
     * 
     * <p>Returns a total count of all users that match the given filtering criteria.
     * 
     * @return The call builder
     */
    public GetUsersCountRequestBuilder count() {
        return new GetUsersCountRequestBuilder(sdkConfiguration);
    }

    /**
     * Count users
     * 
     * <p>Returns a total count of all users that match the given filtering criteria.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUsersCountResponse count(GetUsersCountRequest request) throws Exception {
        return count(request, Optional.empty());
    }

    /**
     * Count users
     * 
     * <p>Returns a total count of all users that match the given filtering criteria.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUsersCountResponse count(GetUsersCountRequest request, Optional<Options> options) throws Exception {
        RequestOperation<GetUsersCountRequest, GetUsersCountResponse> operation
              = new GetUsersCount.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a user
     * 
     * <p>Retrieve the details of a user
     * 
     * @return The call builder
     */
    public GetUserRequestBuilder get() {
        return new GetUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a user
     * 
     * <p>Retrieve the details of a user
     * 
     * @param userId The ID of the user to retrieve
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserResponse get(String userId) throws Exception {
        return get(userId, Optional.empty());
    }

    /**
     * Retrieve a user
     * 
     * <p>Retrieve the details of a user
     * 
     * @param userId The ID of the user to retrieve
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserResponse get(String userId, Optional<Options> options) throws Exception {
        GetUserRequest request =
            GetUserRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<GetUserRequest, GetUserResponse> operation
              = new GetUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a user
     * 
     * <p>Update a user's attributes.
     * 
     * <p>You can set the user's primary contact identifiers (email address and phone numbers) by updating the `primary_email_address_id` and `primary_phone_number_id` attributes respectively.
     * Both IDs should correspond to verified identifications that belong to the user.
     * 
     * <p>You can remove a user's username by setting the username attribute to null or the blank string "".
     * This is a destructive action; the identification will be deleted forever.
     * Usernames can be removed only if they are optional in your instance settings and there's at least one other identifier which can be used for authentication.
     * 
     * <p>This endpoint allows changing a user's password. When passing the `password` parameter directly you have two further options.
     * You can ignore the password policy checks for your instance by setting the `skip_password_checks` parameter to `true`.
     * You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set `sign_out_of_other_sessions` to `true`.
     * 
     * @return The call builder
     */
    public UpdateUserRequestBuilder update() {
        return new UpdateUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a user
     * 
     * <p>Update a user's attributes.
     * 
     * <p>You can set the user's primary contact identifiers (email address and phone numbers) by updating the `primary_email_address_id` and `primary_phone_number_id` attributes respectively.
     * Both IDs should correspond to verified identifications that belong to the user.
     * 
     * <p>You can remove a user's username by setting the username attribute to null or the blank string "".
     * This is a destructive action; the identification will be deleted forever.
     * Usernames can be removed only if they are optional in your instance settings and there's at least one other identifier which can be used for authentication.
     * 
     * <p>This endpoint allows changing a user's password. When passing the `password` parameter directly you have two further options.
     * You can ignore the password policy checks for your instance by setting the `skip_password_checks` parameter to `true`.
     * You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set `sign_out_of_other_sessions` to `true`.
     * 
     * @param userId The ID of the user to update
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUserResponse update(String userId, UpdateUserRequestBody requestBody) throws Exception {
        return update(userId, requestBody, Optional.empty());
    }

    /**
     * Update a user
     * 
     * <p>Update a user's attributes.
     * 
     * <p>You can set the user's primary contact identifiers (email address and phone numbers) by updating the `primary_email_address_id` and `primary_phone_number_id` attributes respectively.
     * Both IDs should correspond to verified identifications that belong to the user.
     * 
     * <p>You can remove a user's username by setting the username attribute to null or the blank string "".
     * This is a destructive action; the identification will be deleted forever.
     * Usernames can be removed only if they are optional in your instance settings and there's at least one other identifier which can be used for authentication.
     * 
     * <p>This endpoint allows changing a user's password. When passing the `password` parameter directly you have two further options.
     * You can ignore the password policy checks for your instance by setting the `skip_password_checks` parameter to `true`.
     * You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set `sign_out_of_other_sessions` to `true`.
     * 
     * @param userId The ID of the user to update
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUserResponse update(
            String userId, UpdateUserRequestBody requestBody,
            Optional<Options> options) throws Exception {
        UpdateUserRequest request =
            UpdateUserRequest
                .builder()
                .userId(userId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateUserRequest, UpdateUserResponse> operation
              = new UpdateUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a user
     * 
     * <p>Delete the specified user
     * 
     * @return The call builder
     */
    public DeleteUserRequestBuilder delete() {
        return new DeleteUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a user
     * 
     * <p>Delete the specified user
     * 
     * @param userId The ID of the user to delete
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteUserResponse delete(String userId) throws Exception {
        return delete(userId, Optional.empty());
    }

    /**
     * Delete a user
     * 
     * <p>Delete the specified user
     * 
     * @param userId The ID of the user to delete
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteUserResponse delete(String userId, Optional<Options> options) throws Exception {
        DeleteUserRequest request =
            DeleteUserRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<DeleteUserRequest, DeleteUserResponse> operation
              = new DeleteUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Ban a user
     * 
     * <p>Marks the given user as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
     * 
     * @return The call builder
     */
    public BanUserRequestBuilder ban() {
        return new BanUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Ban a user
     * 
     * <p>Marks the given user as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
     * 
     * @param userId The ID of the user to ban
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public BanUserResponse ban(String userId) throws Exception {
        return ban(userId, Optional.empty());
    }

    /**
     * Ban a user
     * 
     * <p>Marks the given user as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
     * 
     * @param userId The ID of the user to ban
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public BanUserResponse ban(String userId, Optional<Options> options) throws Exception {
        BanUserRequest request =
            BanUserRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<BanUserRequest, BanUserResponse> operation
              = new BanUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Unban a user
     * 
     * <p>Removes the ban mark from the given user.
     * 
     * @return The call builder
     */
    public UnbanUserRequestBuilder unban() {
        return new UnbanUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Unban a user
     * 
     * <p>Removes the ban mark from the given user.
     * 
     * @param userId The ID of the user to unban
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UnbanUserResponse unban(String userId) throws Exception {
        return unban(userId, Optional.empty());
    }

    /**
     * Unban a user
     * 
     * <p>Removes the ban mark from the given user.
     * 
     * @param userId The ID of the user to unban
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UnbanUserResponse unban(String userId, Optional<Options> options) throws Exception {
        UnbanUserRequest request =
            UnbanUserRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<UnbanUserRequest, UnbanUserResponse> operation
              = new UnbanUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Ban multiple users
     * 
     * <p>Marks multiple users as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
     * 
     * @return The call builder
     */
    public UsersBanRequestBuilder bulkBan() {
        return new UsersBanRequestBuilder(sdkConfiguration);
    }

    /**
     * Ban multiple users
     * 
     * <p>Marks multiple users as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UsersBanResponse bulkBan(UsersBanRequestBody request) throws Exception {
        return bulkBan(request, Optional.empty());
    }

    /**
     * Ban multiple users
     * 
     * <p>Marks multiple users as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UsersBanResponse bulkBan(UsersBanRequestBody request, Optional<Options> options) throws Exception {
        RequestOperation<UsersBanRequestBody, UsersBanResponse> operation
              = new UsersBan.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Unban multiple users
     * 
     * <p>Removes the ban mark from multiple users.
     * 
     * @return The call builder
     */
    public UsersUnbanRequestBuilder bulkUnban() {
        return new UsersUnbanRequestBuilder(sdkConfiguration);
    }

    /**
     * Unban multiple users
     * 
     * <p>Removes the ban mark from multiple users.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UsersUnbanResponse bulkUnban(UsersUnbanRequestBody request) throws Exception {
        return bulkUnban(request, Optional.empty());
    }

    /**
     * Unban multiple users
     * 
     * <p>Removes the ban mark from multiple users.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UsersUnbanResponse bulkUnban(UsersUnbanRequestBody request, Optional<Options> options) throws Exception {
        RequestOperation<UsersUnbanRequestBody, UsersUnbanResponse> operation
              = new UsersUnban.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Lock a user
     * 
     * <p>Marks the given user as locked, which means they are not allowed to sign in again until the lock expires.
     * Lock duration can be configured in the instance's restrictions settings.
     * 
     * @return The call builder
     */
    public LockUserRequestBuilder lock() {
        return new LockUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Lock a user
     * 
     * <p>Marks the given user as locked, which means they are not allowed to sign in again until the lock expires.
     * Lock duration can be configured in the instance's restrictions settings.
     * 
     * @param userId The ID of the user to lock
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LockUserResponse lock(String userId) throws Exception {
        return lock(userId, Optional.empty());
    }

    /**
     * Lock a user
     * 
     * <p>Marks the given user as locked, which means they are not allowed to sign in again until the lock expires.
     * Lock duration can be configured in the instance's restrictions settings.
     * 
     * @param userId The ID of the user to lock
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LockUserResponse lock(String userId, Optional<Options> options) throws Exception {
        LockUserRequest request =
            LockUserRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<LockUserRequest, LockUserResponse> operation
              = new LockUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Unlock a user
     * 
     * <p>Removes the lock from the given user.
     * 
     * @return The call builder
     */
    public UnlockUserRequestBuilder unlock() {
        return new UnlockUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Unlock a user
     * 
     * <p>Removes the lock from the given user.
     * 
     * @param userId The ID of the user to unlock
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UnlockUserResponse unlock(String userId) throws Exception {
        return unlock(userId, Optional.empty());
    }

    /**
     * Unlock a user
     * 
     * <p>Removes the lock from the given user.
     * 
     * @param userId The ID of the user to unlock
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UnlockUserResponse unlock(String userId, Optional<Options> options) throws Exception {
        UnlockUserRequest request =
            UnlockUserRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<UnlockUserRequest, UnlockUserResponse> operation
              = new UnlockUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Set user profile image
     * 
     * <p>Update a user's profile image
     * 
     * @return The call builder
     */
    public SetUserProfileImageRequestBuilder setProfileImage() {
        return new SetUserProfileImageRequestBuilder(sdkConfiguration);
    }

    /**
     * Set user profile image
     * 
     * <p>Update a user's profile image
     * 
     * @param userId The ID of the user to update the profile image for
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SetUserProfileImageResponse setProfileImage(String userId, SetUserProfileImageRequestBody requestBody) throws Exception {
        return setProfileImage(userId, requestBody, Optional.empty());
    }

    /**
     * Set user profile image
     * 
     * <p>Update a user's profile image
     * 
     * @param userId The ID of the user to update the profile image for
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SetUserProfileImageResponse setProfileImage(
            String userId, SetUserProfileImageRequestBody requestBody,
            Optional<Options> options) throws Exception {
        SetUserProfileImageRequest request =
            SetUserProfileImageRequest
                .builder()
                .userId(userId)
                .requestBody(requestBody)
                .build();
        RequestOperation<SetUserProfileImageRequest, SetUserProfileImageResponse> operation
              = new SetUserProfileImage.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete user profile image
     * 
     * <p>Delete a user's profile image
     * 
     * @return The call builder
     */
    public DeleteUserProfileImageRequestBuilder deleteProfileImage() {
        return new DeleteUserProfileImageRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete user profile image
     * 
     * <p>Delete a user's profile image
     * 
     * @param userId The ID of the user to delete the profile image for
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteUserProfileImageResponse deleteProfileImage(String userId) throws Exception {
        return deleteProfileImage(userId, Optional.empty());
    }

    /**
     * Delete user profile image
     * 
     * <p>Delete a user's profile image
     * 
     * @param userId The ID of the user to delete the profile image for
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteUserProfileImageResponse deleteProfileImage(String userId, Optional<Options> options) throws Exception {
        DeleteUserProfileImageRequest request =
            DeleteUserProfileImageRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<DeleteUserProfileImageRequest, DeleteUserProfileImageResponse> operation
              = new DeleteUserProfileImage.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Merge and update a user's metadata
     * 
     * <p>Update a user's metadata attributes by merging existing values with the provided parameters.
     * 
     * <p>This endpoint behaves differently than the *Update a user* endpoint.
     * Metadata values will not be replaced entirely.
     * Instead, a deep merge will be performed.
     * Deep means that any nested JSON objects will be merged as well.
     * 
     * <p>You can remove metadata keys at any level by setting their value to `null`.
     * 
     * @return The call builder
     */
    public UpdateUserMetadataRequestBuilder updateMetadata() {
        return new UpdateUserMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Merge and update a user's metadata
     * 
     * <p>Update a user's metadata attributes by merging existing values with the provided parameters.
     * 
     * <p>This endpoint behaves differently than the *Update a user* endpoint.
     * Metadata values will not be replaced entirely.
     * Instead, a deep merge will be performed.
     * Deep means that any nested JSON objects will be merged as well.
     * 
     * <p>You can remove metadata keys at any level by setting their value to `null`.
     * 
     * @param userId The ID of the user whose metadata will be updated and merged
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUserMetadataResponse updateMetadata(String userId) throws Exception {
        return updateMetadata(userId, Optional.empty(), Optional.empty());
    }

    /**
     * Merge and update a user's metadata
     * 
     * <p>Update a user's metadata attributes by merging existing values with the provided parameters.
     * 
     * <p>This endpoint behaves differently than the *Update a user* endpoint.
     * Metadata values will not be replaced entirely.
     * Instead, a deep merge will be performed.
     * Deep means that any nested JSON objects will be merged as well.
     * 
     * <p>You can remove metadata keys at any level by setting their value to `null`.
     * 
     * @param userId The ID of the user whose metadata will be updated and merged
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUserMetadataResponse updateMetadata(
            String userId, Optional<? extends UpdateUserMetadataRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        UpdateUserMetadataRequest request =
            UpdateUserMetadataRequest
                .builder()
                .userId(userId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateUserMetadataRequest, UpdateUserMetadataResponse> operation
              = new UpdateUserMetadata.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a user's billing subscription
     * 
     * <p>Retrieves the billing subscription for the specified user.
     * This includes subscription details, active plans, billing information, and payment status.
     * The subscription contains subscription items which represent the individual plans the user is subscribed to.
     * 
     * @return The call builder
     */
    public GetUserBillingSubscriptionRequestBuilder getBillingSubscription() {
        return new GetUserBillingSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a user's billing subscription
     * 
     * <p>Retrieves the billing subscription for the specified user.
     * This includes subscription details, active plans, billing information, and payment status.
     * The subscription contains subscription items which represent the individual plans the user is subscribed to.
     * 
     * @param userId The ID of the user whose subscription to retrieve
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserBillingSubscriptionResponse getBillingSubscription(String userId) throws Exception {
        return getBillingSubscription(userId, Optional.empty());
    }

    /**
     * Retrieve a user's billing subscription
     * 
     * <p>Retrieves the billing subscription for the specified user.
     * This includes subscription details, active plans, billing information, and payment status.
     * The subscription contains subscription items which represent the individual plans the user is subscribed to.
     * 
     * @param userId The ID of the user whose subscription to retrieve
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserBillingSubscriptionResponse getBillingSubscription(String userId, Optional<Options> options) throws Exception {
        GetUserBillingSubscriptionRequest request =
            GetUserBillingSubscriptionRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<GetUserBillingSubscriptionRequest, GetUserBillingSubscriptionResponse> operation
              = new GetUserBillingSubscription.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve the OAuth access token of a user
     * 
     * <p>Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider.
     * For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.
     * 
     * @return The call builder
     */
    public GetOAuthAccessTokenRequestBuilder getOAuthAccessToken() {
        return new GetOAuthAccessTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve the OAuth access token of a user
     * 
     * <p>Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider.
     * For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOAuthAccessTokenResponse getOAuthAccessToken(GetOAuthAccessTokenRequest request) throws Exception {
        return getOAuthAccessToken(request, Optional.empty());
    }

    /**
     * Retrieve the OAuth access token of a user
     * 
     * <p>Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider.
     * For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOAuthAccessTokenResponse getOAuthAccessToken(GetOAuthAccessTokenRequest request, Optional<Options> options) throws Exception {
        RequestOperation<GetOAuthAccessTokenRequest, GetOAuthAccessTokenResponse> operation
              = new GetOAuthAccessToken.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve all memberships for a user
     * 
     * <p>Retrieve a paginated list of the user's organization memberships
     * 
     * @return The call builder
     */
    public UsersGetOrganizationMembershipsRequestBuilder getOrganizationMemberships() {
        return new UsersGetOrganizationMembershipsRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve all memberships for a user
     * 
     * <p>Retrieve a paginated list of the user's organization memberships
     * 
     * @param userId The ID of the user whose organization memberships we want to retrieve
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UsersGetOrganizationMembershipsResponse getOrganizationMemberships(String userId) throws Exception {
        return getOrganizationMemberships(userId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Retrieve all memberships for a user
     * 
     * <p>Retrieve a paginated list of the user's organization memberships
     * 
     * @param userId The ID of the user whose organization memberships we want to retrieve
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UsersGetOrganizationMembershipsResponse getOrganizationMemberships(
            String userId, Optional<Long> limit,
            Optional<Long> offset, Optional<Options> options) throws Exception {
        UsersGetOrganizationMembershipsRequest request =
            UsersGetOrganizationMembershipsRequest
                .builder()
                .userId(userId)
                .limit(limit)
                .offset(offset)
                .build();
        RequestOperation<UsersGetOrganizationMembershipsRequest, UsersGetOrganizationMembershipsResponse> operation
              = new UsersGetOrganizationMemberships.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve all invitations for a user
     * 
     * <p>Retrieve a paginated list of the user's organization invitations
     * 
     * @return The call builder
     */
    public UsersGetOrganizationInvitationsRequestBuilder getOrganizationInvitations() {
        return new UsersGetOrganizationInvitationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve all invitations for a user
     * 
     * <p>Retrieve a paginated list of the user's organization invitations
     * 
     * @param userId The ID of the user whose organization invitations we want to retrieve
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UsersGetOrganizationInvitationsResponse getOrganizationInvitations(String userId) throws Exception {
        return getOrganizationInvitations(userId, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Retrieve all invitations for a user
     * 
     * <p>Retrieve a paginated list of the user's organization invitations
     * 
     * @param userId The ID of the user whose organization invitations we want to retrieve
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param status Filter organization invitations based on their status
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UsersGetOrganizationInvitationsResponse getOrganizationInvitations(
            String userId, Optional<Long> limit,
            Optional<Long> offset, Optional<? extends QueryParamStatus> status,
            Optional<Options> options) throws Exception {
        UsersGetOrganizationInvitationsRequest request =
            UsersGetOrganizationInvitationsRequest
                .builder()
                .userId(userId)
                .limit(limit)
                .offset(offset)
                .status(status)
                .build();
        RequestOperation<UsersGetOrganizationInvitationsRequest, UsersGetOrganizationInvitationsResponse> operation
              = new UsersGetOrganizationInvitations.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Verify the password of a user
     * 
     * <p>Check that the user's password matches the supplied input.
     * Useful for custom auth flows and re-verification.
     * 
     * @return The call builder
     */
    public VerifyPasswordRequestBuilder verifyPassword() {
        return new VerifyPasswordRequestBuilder(sdkConfiguration);
    }

    /**
     * Verify the password of a user
     * 
     * <p>Check that the user's password matches the supplied input.
     * Useful for custom auth flows and re-verification.
     * 
     * @param userId The ID of the user for whom to verify the password
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifyPasswordResponse verifyPassword(String userId) throws Exception {
        return verifyPassword(userId, Optional.empty(), Optional.empty());
    }

    /**
     * Verify the password of a user
     * 
     * <p>Check that the user's password matches the supplied input.
     * Useful for custom auth flows and re-verification.
     * 
     * @param userId The ID of the user for whom to verify the password
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifyPasswordResponse verifyPassword(
            String userId, Optional<? extends VerifyPasswordRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        VerifyPasswordRequest request =
            VerifyPasswordRequest
                .builder()
                .userId(userId)
                .requestBody(requestBody)
                .build();
        RequestOperation<VerifyPasswordRequest, VerifyPasswordResponse> operation
              = new VerifyPassword.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Verify a TOTP or backup code for a user
     * 
     * <p>Verify that the provided TOTP or backup code is valid for the user.
     * Verifying a backup code will result it in being consumed (i.e. it will
     * become invalid).
     * Useful for custom auth flows and re-verification.
     * 
     * @return The call builder
     */
    public VerifyTOTPRequestBuilder verifyTotp() {
        return new VerifyTOTPRequestBuilder(sdkConfiguration);
    }

    /**
     * Verify a TOTP or backup code for a user
     * 
     * <p>Verify that the provided TOTP or backup code is valid for the user.
     * Verifying a backup code will result it in being consumed (i.e. it will
     * become invalid).
     * Useful for custom auth flows and re-verification.
     * 
     * @param userId The ID of the user for whom to verify the TOTP
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifyTOTPResponse verifyTotp(String userId) throws Exception {
        return verifyTotp(userId, Optional.empty(), Optional.empty());
    }

    /**
     * Verify a TOTP or backup code for a user
     * 
     * <p>Verify that the provided TOTP or backup code is valid for the user.
     * Verifying a backup code will result it in being consumed (i.e. it will
     * become invalid).
     * Useful for custom auth flows and re-verification.
     * 
     * @param userId The ID of the user for whom to verify the TOTP
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifyTOTPResponse verifyTotp(
            String userId, Optional<? extends VerifyTOTPRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        VerifyTOTPRequest request =
            VerifyTOTPRequest
                .builder()
                .userId(userId)
                .requestBody(requestBody)
                .build();
        RequestOperation<VerifyTOTPRequest, VerifyTOTPResponse> operation
              = new VerifyTOTP.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Disable a user's MFA methods
     * 
     * <p>Disable all of a user's MFA methods (e.g. OTP sent via SMS, TOTP on their authenticator app) at once.
     * 
     * @return The call builder
     */
    public DisableMFARequestBuilder disableMfa() {
        return new DisableMFARequestBuilder(sdkConfiguration);
    }

    /**
     * Disable a user's MFA methods
     * 
     * <p>Disable all of a user's MFA methods (e.g. OTP sent via SMS, TOTP on their authenticator app) at once.
     * 
     * @param userId The ID of the user whose MFA methods are to be disabled
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DisableMFAResponse disableMfa(String userId) throws Exception {
        return disableMfa(userId, Optional.empty());
    }

    /**
     * Disable a user's MFA methods
     * 
     * <p>Disable all of a user's MFA methods (e.g. OTP sent via SMS, TOTP on their authenticator app) at once.
     * 
     * @param userId The ID of the user whose MFA methods are to be disabled
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DisableMFAResponse disableMfa(String userId, Optional<Options> options) throws Exception {
        DisableMFARequest request =
            DisableMFARequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<DisableMFARequest, DisableMFAResponse> operation
              = new DisableMFA.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Disable all user's Backup codes
     * 
     * <p>Disable all of a user's backup codes.
     * 
     * @return The call builder
     */
    public DeleteBackupCodeRequestBuilder deleteBackupCodes() {
        return new DeleteBackupCodeRequestBuilder(sdkConfiguration);
    }

    /**
     * Disable all user's Backup codes
     * 
     * <p>Disable all of a user's backup codes.
     * 
     * @param userId The ID of the user whose backup codes are to be deleted.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteBackupCodeResponse deleteBackupCodes(String userId) throws Exception {
        return deleteBackupCodes(userId, Optional.empty());
    }

    /**
     * Disable all user's Backup codes
     * 
     * <p>Disable all of a user's backup codes.
     * 
     * @param userId The ID of the user whose backup codes are to be deleted.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteBackupCodeResponse deleteBackupCodes(String userId, Optional<Options> options) throws Exception {
        DeleteBackupCodeRequest request =
            DeleteBackupCodeRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<DeleteBackupCodeRequest, DeleteBackupCodeResponse> operation
              = new DeleteBackupCode.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a user passkey
     * 
     * <p>Delete the passkey identification for a given user and notify them through email.
     * 
     * @return The call builder
     */
    public UserPasskeyDeleteRequestBuilder deletePasskey() {
        return new UserPasskeyDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a user passkey
     * 
     * <p>Delete the passkey identification for a given user and notify them through email.
     * 
     * @param userId The ID of the user that owns the passkey identity
     * @param passkeyIdentificationId The ID of the passkey identity to be deleted
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UserPasskeyDeleteResponse deletePasskey(String userId, String passkeyIdentificationId) throws Exception {
        return deletePasskey(userId, passkeyIdentificationId, Optional.empty());
    }

    /**
     * Delete a user passkey
     * 
     * <p>Delete the passkey identification for a given user and notify them through email.
     * 
     * @param userId The ID of the user that owns the passkey identity
     * @param passkeyIdentificationId The ID of the passkey identity to be deleted
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UserPasskeyDeleteResponse deletePasskey(
            String userId, String passkeyIdentificationId,
            Optional<Options> options) throws Exception {
        UserPasskeyDeleteRequest request =
            UserPasskeyDeleteRequest
                .builder()
                .userId(userId)
                .passkeyIdentificationId(passkeyIdentificationId)
                .build();
        RequestOperation<UserPasskeyDeleteRequest, UserPasskeyDeleteResponse> operation
              = new UserPasskeyDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a user web3 wallet
     * 
     * <p>Delete the web3 wallet identification for a given user.
     * 
     * @return The call builder
     */
    public UserWeb3WalletDeleteRequestBuilder deleteWeb3Wallet() {
        return new UserWeb3WalletDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a user web3 wallet
     * 
     * <p>Delete the web3 wallet identification for a given user.
     * 
     * @param userId The ID of the user that owns the web3 wallet
     * @param web3WalletIdentificationId The ID of the web3 wallet identity to be deleted
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UserWeb3WalletDeleteResponse deleteWeb3Wallet(String userId, String web3WalletIdentificationId) throws Exception {
        return deleteWeb3Wallet(userId, web3WalletIdentificationId, Optional.empty());
    }

    /**
     * Delete a user web3 wallet
     * 
     * <p>Delete the web3 wallet identification for a given user.
     * 
     * @param userId The ID of the user that owns the web3 wallet
     * @param web3WalletIdentificationId The ID of the web3 wallet identity to be deleted
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UserWeb3WalletDeleteResponse deleteWeb3Wallet(
            String userId, String web3WalletIdentificationId,
            Optional<Options> options) throws Exception {
        UserWeb3WalletDeleteRequest request =
            UserWeb3WalletDeleteRequest
                .builder()
                .userId(userId)
                .web3WalletIdentificationId(web3WalletIdentificationId)
                .build();
        RequestOperation<UserWeb3WalletDeleteRequest, UserWeb3WalletDeleteResponse> operation
              = new UserWeb3WalletDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete all the user's TOTPs
     * 
     * <p>Deletes all of the user's TOTPs.
     * 
     * @return The call builder
     */
    public DeleteTOTPRequestBuilder deleteTOTP() {
        return new DeleteTOTPRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete all the user's TOTPs
     * 
     * <p>Deletes all of the user's TOTPs.
     * 
     * @param userId The ID of the user whose TOTPs are to be deleted
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteTOTPResponse deleteTOTP(String userId) throws Exception {
        return deleteTOTP(userId, Optional.empty());
    }

    /**
     * Delete all the user's TOTPs
     * 
     * <p>Deletes all of the user's TOTPs.
     * 
     * @param userId The ID of the user whose TOTPs are to be deleted
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteTOTPResponse deleteTOTP(String userId, Optional<Options> options) throws Exception {
        DeleteTOTPRequest request =
            DeleteTOTPRequest
                .builder()
                .userId(userId)
                .build();
        RequestOperation<DeleteTOTPRequest, DeleteTOTPResponse> operation
              = new DeleteTOTP.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete External Account
     * 
     * <p>Delete an external account by ID.
     * 
     * @return The call builder
     */
    public DeleteExternalAccountRequestBuilder deleteExternalAccount() {
        return new DeleteExternalAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete External Account
     * 
     * <p>Delete an external account by ID.
     * 
     * @param userId The ID of the user's external account
     * @param externalAccountId The ID of the external account to delete
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteExternalAccountResponse deleteExternalAccount(String userId, String externalAccountId) throws Exception {
        return deleteExternalAccount(userId, externalAccountId, Optional.empty());
    }

    /**
     * Delete External Account
     * 
     * <p>Delete an external account by ID.
     * 
     * @param userId The ID of the user's external account
     * @param externalAccountId The ID of the external account to delete
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteExternalAccountResponse deleteExternalAccount(
            String userId, String externalAccountId,
            Optional<Options> options) throws Exception {
        DeleteExternalAccountRequest request =
            DeleteExternalAccountRequest
                .builder()
                .userId(userId)
                .externalAccountId(externalAccountId)
                .build();
        RequestOperation<DeleteExternalAccountRequest, DeleteExternalAccountResponse> operation
              = new DeleteExternalAccount.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a list of all organization memberships within an instance.
     * 
     * <p>Retrieves all organization user memberships for the given instance.
     * 
     * @return The call builder
     */
    public InstanceGetOrganizationMembershipsRequestBuilder getInstanceOrganizationMemberships() {
        return new InstanceGetOrganizationMembershipsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a list of all organization memberships within an instance.
     * 
     * <p>Retrieves all organization user memberships for the given instance.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public InstanceGetOrganizationMembershipsResponse getInstanceOrganizationMembershipsDirect() throws Exception {
        return getInstanceOrganizationMemberships(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Get a list of all organization memberships within an instance.
     * 
     * <p>Retrieves all organization user memberships for the given instance.
     * 
     * @param orderBy Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
     *         By prepending one of those values with + or -,
     *         we can choose to sort in ascending (ASC) or descending (DESC) order.
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public InstanceGetOrganizationMembershipsResponse getInstanceOrganizationMemberships(
            Optional<String> orderBy, Optional<Long> limit,
            Optional<Long> offset, Optional<Options> options) throws Exception {
        InstanceGetOrganizationMembershipsRequest request =
            InstanceGetOrganizationMembershipsRequest
                .builder()
                .orderBy(orderBy)
                .limit(limit)
                .offset(offset)
                .build();
        RequestOperation<InstanceGetOrganizationMembershipsRequest, InstanceGetOrganizationMembershipsResponse> operation
              = new InstanceGetOrganizationMemberships.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
