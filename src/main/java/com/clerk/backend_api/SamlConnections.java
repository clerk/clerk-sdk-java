/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateSAMLConnectionRequestBody;
import com.clerk.backend_api.models.operations.CreateSAMLConnectionRequestBuilder;
import com.clerk.backend_api.models.operations.CreateSAMLConnectionResponse;
import com.clerk.backend_api.models.operations.DeleteSAMLConnectionRequest;
import com.clerk.backend_api.models.operations.DeleteSAMLConnectionRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteSAMLConnectionResponse;
import com.clerk.backend_api.models.operations.GetSAMLConnectionRequest;
import com.clerk.backend_api.models.operations.GetSAMLConnectionRequestBuilder;
import com.clerk.backend_api.models.operations.GetSAMLConnectionResponse;
import com.clerk.backend_api.models.operations.ListSAMLConnectionsRequest;
import com.clerk.backend_api.models.operations.ListSAMLConnectionsRequestBuilder;
import com.clerk.backend_api.models.operations.ListSAMLConnectionsResponse;
import com.clerk.backend_api.models.operations.UpdateSAMLConnectionRequest;
import com.clerk.backend_api.models.operations.UpdateSAMLConnectionRequestBody;
import com.clerk.backend_api.models.operations.UpdateSAMLConnectionRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateSAMLConnectionResponse;
import com.clerk.backend_api.operations.CreateSAMLConnection;
import com.clerk.backend_api.operations.DeleteSAMLConnection;
import com.clerk.backend_api.operations.GetSAMLConnection;
import com.clerk.backend_api.operations.ListSAMLConnections;
import com.clerk.backend_api.operations.UpdateSAMLConnection;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import java.lang.String;
import java.util.Optional;


public class SamlConnections {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    SamlConnections(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Get a list of SAML Connections for an instance
     * 
     * <p>Returns the list of SAML Connections for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The SAML Connections are ordered by descending creation date and the most recent will be returned
     * first.
     * 
     * @return The call builder
     */
    public ListSAMLConnectionsRequestBuilder list() {
        return new ListSAMLConnectionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a list of SAML Connections for an instance
     * 
     * <p>Returns the list of SAML Connections for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The SAML Connections are ordered by descending creation date and the most recent will be returned
     * first.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListSAMLConnectionsResponse list(ListSAMLConnectionsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * Get a list of SAML Connections for an instance
     * 
     * <p>Returns the list of SAML Connections for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The SAML Connections are ordered by descending creation date and the most recent will be returned
     * first.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListSAMLConnectionsResponse list(ListSAMLConnectionsRequest request, Optional<Options> options) {
        RequestOperation<ListSAMLConnectionsRequest, ListSAMLConnectionsResponse> operation
              = new ListSAMLConnections.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a SAML Connection
     * 
     * <p>Create a new SAML Connection.
     * 
     * @return The call builder
     */
    public CreateSAMLConnectionRequestBuilder create() {
        return new CreateSAMLConnectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a SAML Connection
     * 
     * <p>Create a new SAML Connection.
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateSAMLConnectionResponse createDirect() {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create a SAML Connection
     * 
     * <p>Create a new SAML Connection.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateSAMLConnectionResponse create(Optional<? extends CreateSAMLConnectionRequestBody> request, Optional<Options> options) {
        RequestOperation<Optional<? extends CreateSAMLConnectionRequestBody>, CreateSAMLConnectionResponse> operation
              = new CreateSAMLConnection.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a SAML Connection by ID
     * 
     * <p>Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.
     * 
     * @return The call builder
     */
    public GetSAMLConnectionRequestBuilder get() {
        return new GetSAMLConnectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a SAML Connection by ID
     * 
     * <p>Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.
     * 
     * @param samlConnectionId The ID of the SAML Connection
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetSAMLConnectionResponse get(String samlConnectionId) {
        return get(samlConnectionId, Optional.empty());
    }

    /**
     * Retrieve a SAML Connection by ID
     * 
     * <p>Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.
     * 
     * @param samlConnectionId The ID of the SAML Connection
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetSAMLConnectionResponse get(String samlConnectionId, Optional<Options> options) {
        GetSAMLConnectionRequest request =
            GetSAMLConnectionRequest
                .builder()
                .samlConnectionId(samlConnectionId)
                .build();
        RequestOperation<GetSAMLConnectionRequest, GetSAMLConnectionResponse> operation
              = new GetSAMLConnection.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a SAML Connection
     * 
     * <p>Updates the SAML Connection whose ID matches the provided `id` in the path.
     * 
     * @return The call builder
     */
    public UpdateSAMLConnectionRequestBuilder update() {
        return new UpdateSAMLConnectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a SAML Connection
     * 
     * <p>Updates the SAML Connection whose ID matches the provided `id` in the path.
     * 
     * @param samlConnectionId The ID of the SAML Connection to update
     * @param requestBody 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateSAMLConnectionResponse update(String samlConnectionId, UpdateSAMLConnectionRequestBody requestBody) {
        return update(samlConnectionId, requestBody, Optional.empty());
    }

    /**
     * Update a SAML Connection
     * 
     * <p>Updates the SAML Connection whose ID matches the provided `id` in the path.
     * 
     * @param samlConnectionId The ID of the SAML Connection to update
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateSAMLConnectionResponse update(
            String samlConnectionId, UpdateSAMLConnectionRequestBody requestBody,
            Optional<Options> options) {
        UpdateSAMLConnectionRequest request =
            UpdateSAMLConnectionRequest
                .builder()
                .samlConnectionId(samlConnectionId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateSAMLConnectionRequest, UpdateSAMLConnectionResponse> operation
              = new UpdateSAMLConnection.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a SAML Connection
     * 
     * <p>Deletes the SAML Connection whose ID matches the provided `id` in the path.
     * 
     * @return The call builder
     */
    public DeleteSAMLConnectionRequestBuilder delete() {
        return new DeleteSAMLConnectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a SAML Connection
     * 
     * <p>Deletes the SAML Connection whose ID matches the provided `id` in the path.
     * 
     * @param samlConnectionId The ID of the SAML Connection to delete
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeleteSAMLConnectionResponse delete(String samlConnectionId) {
        return delete(samlConnectionId, Optional.empty());
    }

    /**
     * Delete a SAML Connection
     * 
     * <p>Deletes the SAML Connection whose ID matches the provided `id` in the path.
     * 
     * @param samlConnectionId The ID of the SAML Connection to delete
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeleteSAMLConnectionResponse delete(String samlConnectionId, Optional<Options> options) {
        DeleteSAMLConnectionRequest request =
            DeleteSAMLConnectionRequest
                .builder()
                .samlConnectionId(samlConnectionId)
                .build();
        RequestOperation<DeleteSAMLConnectionRequest, DeleteSAMLConnectionResponse> operation
              = new DeleteSAMLConnection.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
