/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api;

import com.clerk.backend_api.utils.HTTPClient;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Hook.SdkInitData;
import com.clerk.backend_api.utils.RetryConfig;
import com.clerk.backend_api.utils.SpeakeasyHTTPClient;
import com.clerk.backend_api.utils.Utils;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

/**
 * Clerk Backend API: The Clerk REST Backend API, meant to be accessed by backend servers.
 * 
 * <p>### Versions
 * 
 * <p>When the API changes in a way that isn't compatible with older versions, a new version is released.
 * Each version is identified by its release date, e.g. `2025-04-10`.
 * 
 * <p>For more information, please see [Clerk API
 * Versions](https://clerk.com/docs/versioning/available-versions).
 * 
 * <p>Please see https://clerk.com/docs for more information.
 * 
 * <p><a href="https://clerk.com/docs">https://clerk.com/docs</a>
 */
public class Clerk {
    private static final Headers _headers = Headers.EMPTY;


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {

        "https://api.clerk.com/v1",
    };


    private final Miscellaneous miscellaneous;


    private final Jwks jwks;


    private final Clients clients;


    private final EmailAddresses emailAddresses;


    private final PhoneNumbers phoneNumbers;


    private final Sessions sessions;


    private final EmailSMSTemplates emailSMSTemplates;


    private final EmailAndSmsTemplates emailAndSmsTemplates;


    private final Templates templates;


    private final Users users;


    private final Invitations invitations;


    private final OrganizationInvitations organizationInvitations;


    private final AllowlistIdentifiers allowlistIdentifiers;


    private final BlocklistIdentifiers blocklistIdentifiers;


    private final BetaFeatures betaFeatures;


    private final ActorTokens actorTokens;


    private final Domains domains;


    private final InstanceSettings instanceSettings;


    private final Webhooks webhooks;


    private final JwtTemplates jwtTemplates;


    private final Machines machines;


    private final Organizations organizations;


    private final OrganizationMemberships organizationMemberships;


    private final OrganizationDomains organizationDomains;


    private final ProxyChecks proxyChecks;


    private final RedirectUrls redirectUrls;


    private final SignInTokens signInTokens;


    private final SignUps signUps;


    private final OauthApplications oauthApplications;


    private final SamlConnections samlConnections;


    private final TestingTokens testingTokens;


    private final WaitlistEntries waitlistEntries;


    private final Commerce commerce;


    private final Billing billing;


    private final M2m m2m;


    private final OauthAccessTokens oauthAccessTokens;


    public Miscellaneous miscellaneous() {
        return miscellaneous;
    }


    public Jwks jwks() {
        return jwks;
    }


    public Clients clients() {
        return clients;
    }


    public EmailAddresses emailAddresses() {
        return emailAddresses;
    }


    public PhoneNumbers phoneNumbers() {
        return phoneNumbers;
    }


    public Sessions sessions() {
        return sessions;
    }


    public EmailSMSTemplates emailSMSTemplates() {
        return emailSMSTemplates;
    }


    public EmailAndSmsTemplates emailAndSmsTemplates() {
        return emailAndSmsTemplates;
    }


    public Templates templates() {
        return templates;
    }


    public Users users() {
        return users;
    }


    public Invitations invitations() {
        return invitations;
    }


    public OrganizationInvitations organizationInvitations() {
        return organizationInvitations;
    }


    public AllowlistIdentifiers allowlistIdentifiers() {
        return allowlistIdentifiers;
    }


    public BlocklistIdentifiers blocklistIdentifiers() {
        return blocklistIdentifiers;
    }


    public BetaFeatures betaFeatures() {
        return betaFeatures;
    }


    public ActorTokens actorTokens() {
        return actorTokens;
    }


    public Domains domains() {
        return domains;
    }


    public InstanceSettings instanceSettings() {
        return instanceSettings;
    }


    public Webhooks webhooks() {
        return webhooks;
    }


    public JwtTemplates jwtTemplates() {
        return jwtTemplates;
    }


    public Machines machines() {
        return machines;
    }


    public Organizations organizations() {
        return organizations;
    }


    public OrganizationMemberships organizationMemberships() {
        return organizationMemberships;
    }


    public OrganizationDomains organizationDomains() {
        return organizationDomains;
    }


    public ProxyChecks proxyChecks() {
        return proxyChecks;
    }


    public RedirectUrls redirectUrls() {
        return redirectUrls;
    }


    public SignInTokens signInTokens() {
        return signInTokens;
    }


    public SignUps signUps() {
        return signUps;
    }


    public OauthApplications oauthApplications() {
        return oauthApplications;
    }


    public SamlConnections samlConnections() {
        return samlConnections;
    }


    public TestingTokens testingTokens() {
        return testingTokens;
    }


    public WaitlistEntries waitlistEntries() {
        return waitlistEntries;
    }


    public Commerce commerce() {
        return commerce;
    }


    public Billing billing() {
        return billing;
    }


    public M2m m2m() {
        return m2m;
    }


    public OauthAccessTokens oauthAccessTokens() {
        return oauthAccessTokens;
    }

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param bearerAuth The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder bearerAuth(String bearerAuth) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(com.clerk.backend_api.models.components.Security.builder()
              .bearerAuth(bearerAuth)
              .build()));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.setServerIdx(serverIdx);
            this.serverUrl= SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }

        /**
         * Enables debug logging for HTTP requests and responses, including JSON body content.
         * <p>
         * Convenience method that calls {@link HTTPClient#enableDebugLogging(boolean)}.
         * {@link SpeakeasyHTTPClient} honors this setting. If you are using a custom HTTP client,
         * it is up to the custom client to honor this setting.
         * </p>
         *
         * @param enabled Whether to enable debug logging.
         * @return The builder instance.
         */
        public Builder enableHTTPDebugLogging(boolean enabled) {
            this.sdkConfiguration.client().enableDebugLogging(enabled);
            return this;
        }

        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(com.clerk.backend_api.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super com.clerk.backend_api.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }

        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public Clerk build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS[0];
                sdkConfiguration.setServerIdx(0);
            }
            sdkConfiguration.setServerUrl(serverUrl);
            return new Clerk(sdkConfiguration);
        }
    }

    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    public Clerk(SDKConfiguration sdkConfiguration) {
        sdkConfiguration.initialize();
        this.miscellaneous = new Miscellaneous(sdkConfiguration);
        this.jwks = new Jwks(sdkConfiguration);
        this.clients = new Clients(sdkConfiguration);
        this.emailAddresses = new EmailAddresses(sdkConfiguration);
        this.phoneNumbers = new PhoneNumbers(sdkConfiguration);
        this.sessions = new Sessions(sdkConfiguration);
        this.emailSMSTemplates = new EmailSMSTemplates(sdkConfiguration);
        this.emailAndSmsTemplates = new EmailAndSmsTemplates(sdkConfiguration);
        this.templates = new Templates(sdkConfiguration);
        this.users = new Users(sdkConfiguration);
        this.invitations = new Invitations(sdkConfiguration);
        this.organizationInvitations = new OrganizationInvitations(sdkConfiguration);
        this.allowlistIdentifiers = new AllowlistIdentifiers(sdkConfiguration);
        this.blocklistIdentifiers = new BlocklistIdentifiers(sdkConfiguration);
        this.betaFeatures = new BetaFeatures(sdkConfiguration);
        this.actorTokens = new ActorTokens(sdkConfiguration);
        this.domains = new Domains(sdkConfiguration);
        this.instanceSettings = new InstanceSettings(sdkConfiguration);
        this.webhooks = new Webhooks(sdkConfiguration);
        this.jwtTemplates = new JwtTemplates(sdkConfiguration);
        this.machines = new Machines(sdkConfiguration);
        this.organizations = new Organizations(sdkConfiguration);
        this.organizationMemberships = new OrganizationMemberships(sdkConfiguration);
        this.organizationDomains = new OrganizationDomains(sdkConfiguration);
        this.proxyChecks = new ProxyChecks(sdkConfiguration);
        this.redirectUrls = new RedirectUrls(sdkConfiguration);
        this.signInTokens = new SignInTokens(sdkConfiguration);
        this.signUps = new SignUps(sdkConfiguration);
        this.oauthApplications = new OauthApplications(sdkConfiguration);
        this.samlConnections = new SamlConnections(sdkConfiguration);
        this.testingTokens = new TestingTokens(sdkConfiguration);
        this.waitlistEntries = new WaitlistEntries(sdkConfiguration);
        this.commerce = new Commerce(sdkConfiguration);
        this.billing = new Billing(sdkConfiguration);
        this.m2m = new M2m(sdkConfiguration);
        this.oauthAccessTokens = new OauthAccessTokens(sdkConfiguration);
        SdkInitData data = sdkConfiguration.hooks().sdkInit(
                new SdkInitData(
                        sdkConfiguration.resolvedServerUrl(), 
                        sdkConfiguration.client()));
        sdkConfiguration.setServerUrl(data.baseUrl());
        sdkConfiguration.setClient(data.client());
    }
}
