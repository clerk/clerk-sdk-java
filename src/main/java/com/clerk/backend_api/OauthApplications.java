/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateOAuthApplicationRequestBody;
import com.clerk.backend_api.models.operations.CreateOAuthApplicationRequestBuilder;
import com.clerk.backend_api.models.operations.CreateOAuthApplicationResponse;
import com.clerk.backend_api.models.operations.DeleteOAuthApplicationRequest;
import com.clerk.backend_api.models.operations.DeleteOAuthApplicationRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteOAuthApplicationResponse;
import com.clerk.backend_api.models.operations.GetOAuthApplicationRequest;
import com.clerk.backend_api.models.operations.GetOAuthApplicationRequestBuilder;
import com.clerk.backend_api.models.operations.GetOAuthApplicationResponse;
import com.clerk.backend_api.models.operations.ListOAuthApplicationsRequest;
import com.clerk.backend_api.models.operations.ListOAuthApplicationsRequestBuilder;
import com.clerk.backend_api.models.operations.ListOAuthApplicationsResponse;
import com.clerk.backend_api.models.operations.RotateOAuthApplicationSecretRequest;
import com.clerk.backend_api.models.operations.RotateOAuthApplicationSecretRequestBuilder;
import com.clerk.backend_api.models.operations.RotateOAuthApplicationSecretResponse;
import com.clerk.backend_api.models.operations.UpdateOAuthApplicationRequest;
import com.clerk.backend_api.models.operations.UpdateOAuthApplicationRequestBody;
import com.clerk.backend_api.models.operations.UpdateOAuthApplicationRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateOAuthApplicationResponse;
import com.clerk.backend_api.operations.CreateOAuthApplicationOperation;
import com.clerk.backend_api.operations.DeleteOAuthApplicationOperation;
import com.clerk.backend_api.operations.GetOAuthApplicationOperation;
import com.clerk.backend_api.operations.ListOAuthApplicationsOperation;
import com.clerk.backend_api.operations.RotateOAuthApplicationSecretOperation;
import com.clerk.backend_api.operations.UpdateOAuthApplicationOperation;
import com.clerk.backend_api.utils.Options;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class OauthApplications {
    private final SDKConfiguration sdkConfiguration;

    OauthApplications(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Get a list of OAuth applications for an instance
     * 
     * <p>This request returns the list of OAuth applications for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The OAuth applications are ordered by descending creation date.
     * Most recent OAuth applications will be returned first.
     * 
     * @return The call builder
     */
    public ListOAuthApplicationsRequestBuilder list() {
        return new ListOAuthApplicationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a list of OAuth applications for an instance
     * 
     * <p>This request returns the list of OAuth applications for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The OAuth applications are ordered by descending creation date.
     * Most recent OAuth applications will be returned first.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOAuthApplicationsResponse listDirect() throws Exception {
        return list(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Get a list of OAuth applications for an instance
     * 
     * <p>This request returns the list of OAuth applications for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The OAuth applications are ordered by descending creation date.
     * Most recent OAuth applications will be returned first.
     * 
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOAuthApplicationsResponse list(
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<Options> options) throws Exception {
        ListOAuthApplicationsRequest request =
            ListOAuthApplicationsRequest
                .builder()
                .limit(limit)
                .offset(offset)
                .build();
        RequestOperation<ListOAuthApplicationsRequest, ListOAuthApplicationsResponse> operation
              = new ListOAuthApplicationsOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create an OAuth application
     * 
     * <p>Creates a new OAuth application with the given name and callback URL for an instance.
     * The callback URL must be a valid url.
     * All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...
     * 
     * @return The call builder
     */
    public CreateOAuthApplicationRequestBuilder create() {
        return new CreateOAuthApplicationRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an OAuth application
     * 
     * <p>Creates a new OAuth application with the given name and callback URL for an instance.
     * The callback URL must be a valid url.
     * All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOAuthApplicationResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create an OAuth application
     * 
     * <p>Creates a new OAuth application with the given name and callback URL for an instance.
     * The callback URL must be a valid url.
     * All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOAuthApplicationResponse create(
            Optional<? extends CreateOAuthApplicationRequestBody> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateOAuthApplicationRequestBody>, CreateOAuthApplicationResponse> operation
              = new CreateOAuthApplicationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve an OAuth application by ID
     * 
     * <p>Fetches the OAuth application whose ID matches the provided `id` in the path.
     * 
     * @return The call builder
     */
    public GetOAuthApplicationRequestBuilder get() {
        return new GetOAuthApplicationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an OAuth application by ID
     * 
     * <p>Fetches the OAuth application whose ID matches the provided `id` in the path.
     * 
     * @param oauthApplicationId The ID of the OAuth application
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOAuthApplicationResponse get(String oauthApplicationId) throws Exception {
        return get(oauthApplicationId, Optional.empty());
    }

    /**
     * Retrieve an OAuth application by ID
     * 
     * <p>Fetches the OAuth application whose ID matches the provided `id` in the path.
     * 
     * @param oauthApplicationId The ID of the OAuth application
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOAuthApplicationResponse get(
            String oauthApplicationId,
            Optional<Options> options) throws Exception {
        GetOAuthApplicationRequest request =
            GetOAuthApplicationRequest
                .builder()
                .oauthApplicationId(oauthApplicationId)
                .build();
        RequestOperation<GetOAuthApplicationRequest, GetOAuthApplicationResponse> operation
              = new GetOAuthApplicationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an OAuth application
     * 
     * <p>Updates an existing OAuth application
     * 
     * @return The call builder
     */
    public UpdateOAuthApplicationRequestBuilder update() {
        return new UpdateOAuthApplicationRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an OAuth application
     * 
     * <p>Updates an existing OAuth application
     * 
     * @param oauthApplicationId The ID of the OAuth application to update
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateOAuthApplicationResponse update(
            String oauthApplicationId,
            UpdateOAuthApplicationRequestBody requestBody) throws Exception {
        return update(oauthApplicationId, requestBody, Optional.empty());
    }

    /**
     * Update an OAuth application
     * 
     * <p>Updates an existing OAuth application
     * 
     * @param oauthApplicationId The ID of the OAuth application to update
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateOAuthApplicationResponse update(
            String oauthApplicationId,
            UpdateOAuthApplicationRequestBody requestBody,
            Optional<Options> options) throws Exception {
        UpdateOAuthApplicationRequest request =
            UpdateOAuthApplicationRequest
                .builder()
                .oauthApplicationId(oauthApplicationId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateOAuthApplicationRequest, UpdateOAuthApplicationResponse> operation
              = new UpdateOAuthApplicationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete an OAuth application
     * 
     * <p>Deletes the given OAuth application.
     * This is not reversible.
     * 
     * @return The call builder
     */
    public DeleteOAuthApplicationRequestBuilder delete() {
        return new DeleteOAuthApplicationRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete an OAuth application
     * 
     * <p>Deletes the given OAuth application.
     * This is not reversible.
     * 
     * @param oauthApplicationId The ID of the OAuth application to delete
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteOAuthApplicationResponse delete(String oauthApplicationId) throws Exception {
        return delete(oauthApplicationId, Optional.empty());
    }

    /**
     * Delete an OAuth application
     * 
     * <p>Deletes the given OAuth application.
     * This is not reversible.
     * 
     * @param oauthApplicationId The ID of the OAuth application to delete
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteOAuthApplicationResponse delete(
            String oauthApplicationId,
            Optional<Options> options) throws Exception {
        DeleteOAuthApplicationRequest request =
            DeleteOAuthApplicationRequest
                .builder()
                .oauthApplicationId(oauthApplicationId)
                .build();
        RequestOperation<DeleteOAuthApplicationRequest, DeleteOAuthApplicationResponse> operation
              = new DeleteOAuthApplicationOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Rotate the client secret of the given OAuth application
     * 
     * <p>Rotates the OAuth application's client secret.
     * When the client secret is rotated, make sure to update it in authorized OAuth clients.
     * 
     * @return The call builder
     */
    public RotateOAuthApplicationSecretRequestBuilder rotateSecret() {
        return new RotateOAuthApplicationSecretRequestBuilder(sdkConfiguration);
    }

    /**
     * Rotate the client secret of the given OAuth application
     * 
     * <p>Rotates the OAuth application's client secret.
     * When the client secret is rotated, make sure to update it in authorized OAuth clients.
     * 
     * @param oauthApplicationId The ID of the OAuth application for which to rotate the client secret
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RotateOAuthApplicationSecretResponse rotateSecret(String oauthApplicationId) throws Exception {
        return rotateSecret(oauthApplicationId, Optional.empty());
    }

    /**
     * Rotate the client secret of the given OAuth application
     * 
     * <p>Rotates the OAuth application's client secret.
     * When the client secret is rotated, make sure to update it in authorized OAuth clients.
     * 
     * @param oauthApplicationId The ID of the OAuth application for which to rotate the client secret
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RotateOAuthApplicationSecretResponse rotateSecret(
            String oauthApplicationId,
            Optional<Options> options) throws Exception {
        RotateOAuthApplicationSecretRequest request =
            RotateOAuthApplicationSecretRequest
                .builder()
                .oauthApplicationId(oauthApplicationId)
                .build();
        RequestOperation<RotateOAuthApplicationSecretRequest, RotateOAuthApplicationSecretResponse> operation
              = new RotateOAuthApplicationSecretOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
