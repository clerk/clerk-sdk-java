/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateOrganizationDomainRequest;
import com.clerk.backend_api.models.operations.CreateOrganizationDomainRequestBody;
import com.clerk.backend_api.models.operations.CreateOrganizationDomainRequestBuilder;
import com.clerk.backend_api.models.operations.CreateOrganizationDomainResponse;
import com.clerk.backend_api.models.operations.DeleteOrganizationDomainRequest;
import com.clerk.backend_api.models.operations.DeleteOrganizationDomainRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteOrganizationDomainResponse;
import com.clerk.backend_api.models.operations.ListOrganizationDomainsRequest;
import com.clerk.backend_api.models.operations.ListOrganizationDomainsRequestBuilder;
import com.clerk.backend_api.models.operations.ListOrganizationDomainsResponse;
import com.clerk.backend_api.models.operations.UpdateOrganizationDomainRequest;
import com.clerk.backend_api.models.operations.UpdateOrganizationDomainRequestBody;
import com.clerk.backend_api.models.operations.UpdateOrganizationDomainRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateOrganizationDomainResponse;
import com.clerk.backend_api.operations.CreateOrganizationDomainOperation;
import com.clerk.backend_api.operations.DeleteOrganizationDomainOperation;
import com.clerk.backend_api.operations.ListOrganizationDomainsOperation;
import com.clerk.backend_api.operations.UpdateOrganizationDomainOperation;
import com.clerk.backend_api.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class OrganizationDomains {
    private final SDKConfiguration sdkConfiguration;

    OrganizationDomains(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Create a new organization domain.
     * 
     * <p>Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.
     * 
     * @return The call builder
     */
    public CreateOrganizationDomainRequestBuilder create() {
        return new CreateOrganizationDomainRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new organization domain.
     * 
     * <p>Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.
     * 
     * @param organizationId The ID of the organization where the new domain will be created.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationDomainResponse create(
            String organizationId,
            CreateOrganizationDomainRequestBody requestBody) throws Exception {
        return create(organizationId, requestBody, Optional.empty());
    }

    /**
     * Create a new organization domain.
     * 
     * <p>Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.
     * 
     * @param organizationId The ID of the organization where the new domain will be created.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrganizationDomainResponse create(
            String organizationId,
            CreateOrganizationDomainRequestBody requestBody,
            Optional<Options> options) throws Exception {
        CreateOrganizationDomainRequest request =
            CreateOrganizationDomainRequest
                .builder()
                .organizationId(organizationId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateOrganizationDomainRequest, CreateOrganizationDomainResponse> operation
              = new CreateOrganizationDomainOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a list of all domains of an organization.
     * 
     * <p>Get a list of all domains of an organization.
     * 
     * @return The call builder
     */
    public ListOrganizationDomainsRequestBuilder list() {
        return new ListOrganizationDomainsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a list of all domains of an organization.
     * 
     * <p>Get a list of all domains of an organization.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrganizationDomainsResponse list(ListOrganizationDomainsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * Get a list of all domains of an organization.
     * 
     * <p>Get a list of all domains of an organization.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrganizationDomainsResponse list(
            ListOrganizationDomainsRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<ListOrganizationDomainsRequest, ListOrganizationDomainsResponse> operation
              = new ListOrganizationDomainsOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an organization domain.
     * 
     * <p>Updates the properties of an existing organization domain.
     * 
     * @return The call builder
     */
    public UpdateOrganizationDomainRequestBuilder update() {
        return new UpdateOrganizationDomainRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an organization domain.
     * 
     * <p>Updates the properties of an existing organization domain.
     * 
     * @param organizationId The ID of the organization the domain belongs to
     * @param domainId The ID of the domain
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateOrganizationDomainResponse update(
            String organizationId,
            String domainId,
            UpdateOrganizationDomainRequestBody requestBody) throws Exception {
        return update(organizationId, domainId, requestBody,
            Optional.empty());
    }

    /**
     * Update an organization domain.
     * 
     * <p>Updates the properties of an existing organization domain.
     * 
     * @param organizationId The ID of the organization the domain belongs to
     * @param domainId The ID of the domain
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateOrganizationDomainResponse update(
            String organizationId,
            String domainId,
            UpdateOrganizationDomainRequestBody requestBody,
            Optional<Options> options) throws Exception {
        UpdateOrganizationDomainRequest request =
            UpdateOrganizationDomainRequest
                .builder()
                .organizationId(organizationId)
                .domainId(domainId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateOrganizationDomainRequest, UpdateOrganizationDomainResponse> operation
              = new UpdateOrganizationDomainOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a domain from an organization.
     * 
     * <p>Removes the given domain from the organization.
     * 
     * @return The call builder
     */
    public DeleteOrganizationDomainRequestBuilder delete() {
        return new DeleteOrganizationDomainRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a domain from an organization.
     * 
     * <p>Removes the given domain from the organization.
     * 
     * @param organizationId The ID of the organization the domain belongs to
     * @param domainId The ID of the domain
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteOrganizationDomainResponse delete(
            String organizationId,
            String domainId) throws Exception {
        return delete(organizationId, domainId, Optional.empty());
    }

    /**
     * Remove a domain from an organization.
     * 
     * <p>Removes the given domain from the organization.
     * 
     * @param organizationId The ID of the organization the domain belongs to
     * @param domainId The ID of the domain
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteOrganizationDomainResponse delete(
            String organizationId,
            String domainId,
            Optional<Options> options) throws Exception {
        DeleteOrganizationDomainRequest request =
            DeleteOrganizationDomainRequest
                .builder()
                .organizationId(organizationId)
                .domainId(domainId)
                .build();
        RequestOperation<DeleteOrganizationDomainRequest, DeleteOrganizationDomainResponse> operation
              = new DeleteOrganizationDomainOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
