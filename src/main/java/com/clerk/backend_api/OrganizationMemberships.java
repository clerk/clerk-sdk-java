/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateOrganizationMembershipRequest;
import com.clerk.backend_api.models.operations.CreateOrganizationMembershipRequestBody;
import com.clerk.backend_api.models.operations.CreateOrganizationMembershipRequestBuilder;
import com.clerk.backend_api.models.operations.CreateOrganizationMembershipResponse;
import com.clerk.backend_api.models.operations.DeleteOrganizationMembershipRequest;
import com.clerk.backend_api.models.operations.DeleteOrganizationMembershipRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteOrganizationMembershipResponse;
import com.clerk.backend_api.models.operations.ListOrganizationMembershipsRequest;
import com.clerk.backend_api.models.operations.ListOrganizationMembershipsRequestBuilder;
import com.clerk.backend_api.models.operations.ListOrganizationMembershipsResponse;
import com.clerk.backend_api.models.operations.UpdateOrganizationMembershipMetadataRequest;
import com.clerk.backend_api.models.operations.UpdateOrganizationMembershipMetadataRequestBody;
import com.clerk.backend_api.models.operations.UpdateOrganizationMembershipMetadataRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateOrganizationMembershipMetadataResponse;
import com.clerk.backend_api.models.operations.UpdateOrganizationMembershipRequest;
import com.clerk.backend_api.models.operations.UpdateOrganizationMembershipRequestBody;
import com.clerk.backend_api.models.operations.UpdateOrganizationMembershipRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateOrganizationMembershipResponse;
import com.clerk.backend_api.operations.CreateOrganizationMembership;
import com.clerk.backend_api.operations.DeleteOrganizationMembership;
import com.clerk.backend_api.operations.ListOrganizationMemberships;
import com.clerk.backend_api.operations.UpdateOrganizationMembership;
import com.clerk.backend_api.operations.UpdateOrganizationMembershipMetadata;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import java.lang.String;
import java.util.Optional;


public class OrganizationMemberships {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    OrganizationMemberships(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a new organization membership
     * 
     * <p>Adds a user as a member to the given organization.
     * Only users in the same instance as the organization can be added as members.
     * 
     * <p>This organization will be the user's [active organization]
     * (https://clerk.com/docs/organizations/overview#active-organization)
     * the next time they create a session, presuming they don't explicitly set a
     * different organization as active before then.
     * 
     * @return The call builder
     */
    public CreateOrganizationMembershipRequestBuilder create() {
        return new CreateOrganizationMembershipRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new organization membership
     * 
     * <p>Adds a user as a member to the given organization.
     * Only users in the same instance as the organization can be added as members.
     * 
     * <p>This organization will be the user's [active organization]
     * (https://clerk.com/docs/organizations/overview#active-organization)
     * the next time they create a session, presuming they don't explicitly set a
     * different organization as active before then.
     * 
     * @param organizationId The ID of the organization where the new membership will be created
     * @param requestBody 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateOrganizationMembershipResponse create(String organizationId, CreateOrganizationMembershipRequestBody requestBody) {
        return create(organizationId, requestBody, Optional.empty());
    }

    /**
     * Create a new organization membership
     * 
     * <p>Adds a user as a member to the given organization.
     * Only users in the same instance as the organization can be added as members.
     * 
     * <p>This organization will be the user's [active organization]
     * (https://clerk.com/docs/organizations/overview#active-organization)
     * the next time they create a session, presuming they don't explicitly set a
     * different organization as active before then.
     * 
     * @param organizationId The ID of the organization where the new membership will be created
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateOrganizationMembershipResponse create(
            String organizationId, CreateOrganizationMembershipRequestBody requestBody,
            Optional<Options> options) {
        CreateOrganizationMembershipRequest request =
            CreateOrganizationMembershipRequest
                .builder()
                .organizationId(organizationId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateOrganizationMembershipRequest, CreateOrganizationMembershipResponse> operation
              = new CreateOrganizationMembership.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a list of all members of an organization
     * 
     * <p>Retrieves all user memberships for the given organization
     * 
     * @return The call builder
     */
    public ListOrganizationMembershipsRequestBuilder list() {
        return new ListOrganizationMembershipsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a list of all members of an organization
     * 
     * <p>Retrieves all user memberships for the given organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListOrganizationMembershipsResponse list(ListOrganizationMembershipsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * Get a list of all members of an organization
     * 
     * <p>Retrieves all user memberships for the given organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListOrganizationMembershipsResponse list(ListOrganizationMembershipsRequest request, Optional<Options> options) {
        RequestOperation<ListOrganizationMembershipsRequest, ListOrganizationMembershipsResponse> operation
              = new ListOrganizationMemberships.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an organization membership
     * 
     * <p>Updates the properties of an existing organization membership
     * 
     * @return The call builder
     */
    public UpdateOrganizationMembershipRequestBuilder update() {
        return new UpdateOrganizationMembershipRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an organization membership
     * 
     * <p>Updates the properties of an existing organization membership
     * 
     * @param organizationId The ID of the organization to which this membership belongs
     * @param userId The ID of the user to which this membership belongs
     * @param requestBody 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateOrganizationMembershipResponse update(
            String organizationId, String userId,
            UpdateOrganizationMembershipRequestBody requestBody) {
        return update(organizationId, userId, requestBody,
            Optional.empty());
    }

    /**
     * Update an organization membership
     * 
     * <p>Updates the properties of an existing organization membership
     * 
     * @param organizationId The ID of the organization to which this membership belongs
     * @param userId The ID of the user to which this membership belongs
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateOrganizationMembershipResponse update(
            String organizationId, String userId,
            UpdateOrganizationMembershipRequestBody requestBody, Optional<Options> options) {
        UpdateOrganizationMembershipRequest request =
            UpdateOrganizationMembershipRequest
                .builder()
                .organizationId(organizationId)
                .userId(userId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateOrganizationMembershipRequest, UpdateOrganizationMembershipResponse> operation
              = new UpdateOrganizationMembership.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a member from an organization
     * 
     * <p>Removes the given membership from the organization
     * 
     * @return The call builder
     */
    public DeleteOrganizationMembershipRequestBuilder delete() {
        return new DeleteOrganizationMembershipRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a member from an organization
     * 
     * <p>Removes the given membership from the organization
     * 
     * @param organizationId The ID of the organization to which this membership belongs
     * @param userId The ID of the user to which this membership belongs
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeleteOrganizationMembershipResponse delete(String organizationId, String userId) {
        return delete(organizationId, userId, Optional.empty());
    }

    /**
     * Remove a member from an organization
     * 
     * <p>Removes the given membership from the organization
     * 
     * @param organizationId The ID of the organization to which this membership belongs
     * @param userId The ID of the user to which this membership belongs
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeleteOrganizationMembershipResponse delete(
            String organizationId, String userId,
            Optional<Options> options) {
        DeleteOrganizationMembershipRequest request =
            DeleteOrganizationMembershipRequest
                .builder()
                .organizationId(organizationId)
                .userId(userId)
                .build();
        RequestOperation<DeleteOrganizationMembershipRequest, DeleteOrganizationMembershipResponse> operation
              = new DeleteOrganizationMembership.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Merge and update organization membership metadata
     * 
     * <p>Update an organization membership's metadata attributes by merging existing values with the provided
     * parameters.
     * Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be
     * merged as well.
     * You can remove metadata keys at any level by setting their value to `null`.
     * 
     * @return The call builder
     */
    public UpdateOrganizationMembershipMetadataRequestBuilder updateMetadata() {
        return new UpdateOrganizationMembershipMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Merge and update organization membership metadata
     * 
     * <p>Update an organization membership's metadata attributes by merging existing values with the provided
     * parameters.
     * Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be
     * merged as well.
     * You can remove metadata keys at any level by setting their value to `null`.
     * 
     * @param organizationId The ID of the organization to which this membership belongs
     * @param userId The ID of the user to which this membership belongs
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateOrganizationMembershipMetadataResponse updateMetadata(String organizationId, String userId) {
        return updateMetadata(organizationId, userId, Optional.empty(),
            Optional.empty());
    }

    /**
     * Merge and update organization membership metadata
     * 
     * <p>Update an organization membership's metadata attributes by merging existing values with the provided
     * parameters.
     * Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be
     * merged as well.
     * You can remove metadata keys at any level by setting their value to `null`.
     * 
     * @param organizationId The ID of the organization to which this membership belongs
     * @param userId The ID of the user to which this membership belongs
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateOrganizationMembershipMetadataResponse updateMetadata(
            String organizationId, String userId,
            Optional<? extends UpdateOrganizationMembershipMetadataRequestBody> requestBody, Optional<Options> options) {
        UpdateOrganizationMembershipMetadataRequest request =
            UpdateOrganizationMembershipMetadataRequest
                .builder()
                .organizationId(organizationId)
                .userId(userId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateOrganizationMembershipMetadataRequest, UpdateOrganizationMembershipMetadataResponse> operation
              = new UpdateOrganizationMembershipMetadata.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
