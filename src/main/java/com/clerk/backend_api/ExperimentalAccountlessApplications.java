/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestlessOperation;

import com.clerk.backend_api.models.operations.CompleteAccountlessApplicationRequestBuilder;
import com.clerk.backend_api.models.operations.CompleteAccountlessApplicationResponse;
import com.clerk.backend_api.models.operations.CreateAccountlessApplicationRequestBuilder;
import com.clerk.backend_api.models.operations.CreateAccountlessApplicationResponse;
import com.clerk.backend_api.operations.CompleteAccountlessApplication;
import com.clerk.backend_api.operations.CreateAccountlessApplication;
import com.clerk.backend_api.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class ExperimentalAccountlessApplications {
    private final SDKConfiguration sdkConfiguration;

    ExperimentalAccountlessApplications(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create an accountless application [EXPERIMENTAL]
     * 
     * <p>Creates a new accountless application. [EXPERIMENTAL]
     * 
     * @return The call builder
     */
    public CreateAccountlessApplicationRequestBuilder create() {
        return new CreateAccountlessApplicationRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an accountless application [EXPERIMENTAL]
     * 
     * <p>Creates a new accountless application. [EXPERIMENTAL]
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAccountlessApplicationResponse createDirect() throws Exception {
        return create(Optional.empty());
    }

    /**
     * Create an accountless application [EXPERIMENTAL]
     * 
     * <p>Creates a new accountless application. [EXPERIMENTAL]
     * 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAccountlessApplicationResponse create(Optional<Options> options) throws Exception {
        RequestlessOperation<CreateAccountlessApplicationResponse> operation
            = new CreateAccountlessApplication.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Complete an accountless application [EXPERIMENTAL]
     * 
     * <p>Completes an accountless application. [EXPERIMENTAL]
     * 
     * @return The call builder
     */
    public CompleteAccountlessApplicationRequestBuilder complete() {
        return new CompleteAccountlessApplicationRequestBuilder(sdkConfiguration);
    }

    /**
     * Complete an accountless application [EXPERIMENTAL]
     * 
     * <p>Completes an accountless application. [EXPERIMENTAL]
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CompleteAccountlessApplicationResponse completeDirect() throws Exception {
        return complete(Optional.empty());
    }

    /**
     * Complete an accountless application [EXPERIMENTAL]
     * 
     * <p>Completes an accountless application. [EXPERIMENTAL]
     * 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CompleteAccountlessApplicationResponse complete(Optional<Options> options) throws Exception {
        RequestlessOperation<CompleteAccountlessApplicationResponse> operation
            = new CompleteAccountlessApplication.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest());
    }

}
