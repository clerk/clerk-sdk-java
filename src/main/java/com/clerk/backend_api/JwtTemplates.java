/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateJWTTemplateRequestBody;
import com.clerk.backend_api.models.operations.CreateJWTTemplateRequestBuilder;
import com.clerk.backend_api.models.operations.CreateJWTTemplateResponse;
import com.clerk.backend_api.models.operations.DeleteJWTTemplateRequest;
import com.clerk.backend_api.models.operations.DeleteJWTTemplateRequestBuilder;
import com.clerk.backend_api.models.operations.DeleteJWTTemplateResponse;
import com.clerk.backend_api.models.operations.GetJWTTemplateRequest;
import com.clerk.backend_api.models.operations.GetJWTTemplateRequestBuilder;
import com.clerk.backend_api.models.operations.GetJWTTemplateResponse;
import com.clerk.backend_api.models.operations.ListJWTTemplatesRequest;
import com.clerk.backend_api.models.operations.ListJWTTemplatesRequestBuilder;
import com.clerk.backend_api.models.operations.ListJWTTemplatesResponse;
import com.clerk.backend_api.models.operations.UpdateJWTTemplateRequest;
import com.clerk.backend_api.models.operations.UpdateJWTTemplateRequestBody;
import com.clerk.backend_api.models.operations.UpdateJWTTemplateRequestBuilder;
import com.clerk.backend_api.models.operations.UpdateJWTTemplateResponse;
import com.clerk.backend_api.operations.CreateJWTTemplate;
import com.clerk.backend_api.operations.DeleteJWTTemplate;
import com.clerk.backend_api.operations.GetJWTTemplate;
import com.clerk.backend_api.operations.ListJWTTemplates;
import com.clerk.backend_api.operations.UpdateJWTTemplate;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;


public class JwtTemplates {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    JwtTemplates(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List all templates
     * 
     * @return The call builder
     */
    public ListJWTTemplatesRequestBuilder list() {
        return new ListJWTTemplatesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all templates
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListJWTTemplatesResponse listDirect() {
        return list(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * List all templates
     * 
     * @param paginated Whether to paginate the results.
     *         If true, the results will be paginated.
     *         If false, the results will not be paginated.
     * @param limit Applies a limit to the number of results returned.
     *         Can be used for paginating the results together with `offset`.
     * @param offset Skip the first `offset` results when paginating.
     *         Needs to be an integer greater or equal to zero.
     *         To be used in conjunction with `limit`.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListJWTTemplatesResponse list(
            Optional<Boolean> paginated, Optional<Long> limit,
            Optional<Long> offset, Optional<Options> options) {
        ListJWTTemplatesRequest request =
            ListJWTTemplatesRequest
                .builder()
                .paginated(paginated)
                .limit(limit)
                .offset(offset)
                .build();
        RequestOperation<ListJWTTemplatesRequest, ListJWTTemplatesResponse> operation
              = new ListJWTTemplates.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a JWT template
     * 
     * <p>Create a new JWT template
     * 
     * @return The call builder
     */
    public CreateJWTTemplateRequestBuilder create() {
        return new CreateJWTTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a JWT template
     * 
     * <p>Create a new JWT template
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateJWTTemplateResponse createDirect() {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create a JWT template
     * 
     * <p>Create a new JWT template
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateJWTTemplateResponse create(Optional<? extends CreateJWTTemplateRequestBody> request, Optional<Options> options) {
        RequestOperation<Optional<? extends CreateJWTTemplateRequestBody>, CreateJWTTemplateResponse> operation
              = new CreateJWTTemplate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a template
     * 
     * <p>Retrieve the details of a given JWT template
     * 
     * @return The call builder
     */
    public GetJWTTemplateRequestBuilder get() {
        return new GetJWTTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a template
     * 
     * <p>Retrieve the details of a given JWT template
     * 
     * @param templateId JWT Template ID
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetJWTTemplateResponse get(String templateId) {
        return get(templateId, Optional.empty());
    }

    /**
     * Retrieve a template
     * 
     * <p>Retrieve the details of a given JWT template
     * 
     * @param templateId JWT Template ID
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetJWTTemplateResponse get(String templateId, Optional<Options> options) {
        GetJWTTemplateRequest request =
            GetJWTTemplateRequest
                .builder()
                .templateId(templateId)
                .build();
        RequestOperation<GetJWTTemplateRequest, GetJWTTemplateResponse> operation
              = new GetJWTTemplate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a JWT template
     * 
     * <p>Updates an existing JWT template
     * 
     * @return The call builder
     */
    public UpdateJWTTemplateRequestBuilder update() {
        return new UpdateJWTTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a JWT template
     * 
     * <p>Updates an existing JWT template
     * 
     * @param templateId The ID of the JWT template to update
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateJWTTemplateResponse update(String templateId) {
        return update(templateId, Optional.empty(), Optional.empty());
    }

    /**
     * Update a JWT template
     * 
     * <p>Updates an existing JWT template
     * 
     * @param templateId The ID of the JWT template to update
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateJWTTemplateResponse update(
            String templateId, Optional<? extends UpdateJWTTemplateRequestBody> requestBody,
            Optional<Options> options) {
        UpdateJWTTemplateRequest request =
            UpdateJWTTemplateRequest
                .builder()
                .templateId(templateId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateJWTTemplateRequest, UpdateJWTTemplateResponse> operation
              = new UpdateJWTTemplate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a Template
     * 
     * @return The call builder
     */
    public DeleteJWTTemplateRequestBuilder delete() {
        return new DeleteJWTTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a Template
     * 
     * @param templateId JWT Template ID
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeleteJWTTemplateResponse delete(String templateId) {
        return delete(templateId, Optional.empty());
    }

    /**
     * Delete a Template
     * 
     * @param templateId JWT Template ID
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeleteJWTTemplateResponse delete(String templateId, Optional<Options> options) {
        DeleteJWTTemplateRequest request =
            DeleteJWTTemplateRequest
                .builder()
                .templateId(templateId)
                .build();
        RequestOperation<DeleteJWTTemplateRequest, DeleteJWTTemplateResponse> operation
              = new DeleteJWTTemplate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
