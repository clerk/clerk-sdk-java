/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateM2MTokenRequestBody;
import com.clerk.backend_api.models.operations.CreateM2MTokenRequestBuilder;
import com.clerk.backend_api.models.operations.CreateM2MTokenResponse;
import com.clerk.backend_api.models.operations.GetM2MTokensRequest;
import com.clerk.backend_api.models.operations.GetM2MTokensRequestBuilder;
import com.clerk.backend_api.models.operations.GetM2MTokensResponse;
import com.clerk.backend_api.models.operations.RevokeM2MTokenRequest;
import com.clerk.backend_api.models.operations.RevokeM2MTokenRequestBody;
import com.clerk.backend_api.models.operations.RevokeM2MTokenRequestBuilder;
import com.clerk.backend_api.models.operations.RevokeM2MTokenResponse;
import com.clerk.backend_api.models.operations.VerifyM2MTokenRequestBody;
import com.clerk.backend_api.models.operations.VerifyM2MTokenRequestBuilder;
import com.clerk.backend_api.models.operations.VerifyM2MTokenResponse;
import com.clerk.backend_api.operations.CreateM2MToken;
import com.clerk.backend_api.operations.GetM2MTokens;
import com.clerk.backend_api.operations.RevokeM2MToken;
import com.clerk.backend_api.operations.VerifyM2MToken;
import com.clerk.backend_api.utils.Headers;
import com.clerk.backend_api.utils.Options;
import java.lang.String;
import java.util.Optional;


public class M2m {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    M2m(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a M2M Token
     * 
     * <p>Creates a new M2M Token. Must be authenticated via a Machine Secret Key.
     * 
     * @return The call builder
     */
    public CreateM2MTokenRequestBuilder createToken() {
        return new CreateM2MTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a M2M Token
     * 
     * <p>Creates a new M2M Token. Must be authenticated via a Machine Secret Key.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateM2MTokenResponse createToken(CreateM2MTokenRequestBody request) {
        return createToken(request, Optional.empty());
    }

    /**
     * Create a M2M Token
     * 
     * <p>Creates a new M2M Token. Must be authenticated via a Machine Secret Key.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateM2MTokenResponse createToken(CreateM2MTokenRequestBody request, Optional<Options> options) {
        RequestOperation<CreateM2MTokenRequestBody, CreateM2MTokenResponse> operation
              = new CreateM2MToken.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get M2M Tokens
     * 
     * <p>Fetches M2M tokens for a specific machine.
     * 
     * <p>This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.
     * 
     * <p>- When fetching M2M tokens with a Machine Secret Key, only tokens associated with the authenticated
     * machine can be retrieved.
     * - When fetching M2M tokens with a Clerk Secret Key, tokens for any machine in the instance can be
     * retrieved.
     * 
     * @return The call builder
     */
    public GetM2MTokensRequestBuilder listTokens() {
        return new GetM2MTokensRequestBuilder(sdkConfiguration);
    }

    /**
     * Get M2M Tokens
     * 
     * <p>Fetches M2M tokens for a specific machine.
     * 
     * <p>This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.
     * 
     * <p>- When fetching M2M tokens with a Machine Secret Key, only tokens associated with the authenticated
     * machine can be retrieved.
     * - When fetching M2M tokens with a Clerk Secret Key, tokens for any machine in the instance can be
     * retrieved.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetM2MTokensResponse listTokens(GetM2MTokensRequest request) {
        return listTokens(request, Optional.empty());
    }

    /**
     * Get M2M Tokens
     * 
     * <p>Fetches M2M tokens for a specific machine.
     * 
     * <p>This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.
     * 
     * <p>- When fetching M2M tokens with a Machine Secret Key, only tokens associated with the authenticated
     * machine can be retrieved.
     * - When fetching M2M tokens with a Clerk Secret Key, tokens for any machine in the instance can be
     * retrieved.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetM2MTokensResponse listTokens(GetM2MTokensRequest request, Optional<Options> options) {
        RequestOperation<GetM2MTokensRequest, GetM2MTokensResponse> operation
              = new GetM2MTokens.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revoke a M2M Token
     * 
     * <p>Revokes a M2M Token.
     * 
     * <p>This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.
     * 
     * <p>- When revoking a M2M Token with a Machine Secret Key, the token must managed by the Machine
     * associated with the Machine Secret Key.
     * - When revoking a M2M Token with a Clerk Secret Key, any token on the Instance can be revoked.
     * 
     * @return The call builder
     */
    public RevokeM2MTokenRequestBuilder revokeToken() {
        return new RevokeM2MTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Revoke a M2M Token
     * 
     * <p>Revokes a M2M Token.
     * 
     * <p>This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.
     * 
     * <p>- When revoking a M2M Token with a Machine Secret Key, the token must managed by the Machine
     * associated with the Machine Secret Key.
     * - When revoking a M2M Token with a Clerk Secret Key, any token on the Instance can be revoked.
     * 
     * @param m2mTokenId 
     * @param requestBody 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RevokeM2MTokenResponse revokeToken(String m2mTokenId, RevokeM2MTokenRequestBody requestBody) {
        return revokeToken(m2mTokenId, requestBody, Optional.empty());
    }

    /**
     * Revoke a M2M Token
     * 
     * <p>Revokes a M2M Token.
     * 
     * <p>This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.
     * 
     * <p>- When revoking a M2M Token with a Machine Secret Key, the token must managed by the Machine
     * associated with the Machine Secret Key.
     * - When revoking a M2M Token with a Clerk Secret Key, any token on the Instance can be revoked.
     * 
     * @param m2mTokenId 
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RevokeM2MTokenResponse revokeToken(
            String m2mTokenId, RevokeM2MTokenRequestBody requestBody,
            Optional<Options> options) {
        RevokeM2MTokenRequest request =
            RevokeM2MTokenRequest
                .builder()
                .m2mTokenId(m2mTokenId)
                .requestBody(requestBody)
                .build();
        RequestOperation<RevokeM2MTokenRequest, RevokeM2MTokenResponse> operation
              = new RevokeM2MToken.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Verify a M2M Token
     * 
     * <p>Verifies a M2M Token.
     * 
     * <p>This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.
     * 
     * <p>- When verifying a M2M Token with a Machine Secret Key, the token must be granted access to the
     * Machine associated with the Machine Secret Key.
     * - When verifying a M2M Token with a Clerk Secret Key, any token on the Instance can be verified.
     * 
     * @return The call builder
     */
    public VerifyM2MTokenRequestBuilder verifyToken() {
        return new VerifyM2MTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Verify a M2M Token
     * 
     * <p>Verifies a M2M Token.
     * 
     * <p>This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.
     * 
     * <p>- When verifying a M2M Token with a Machine Secret Key, the token must be granted access to the
     * Machine associated with the Machine Secret Key.
     * - When verifying a M2M Token with a Clerk Secret Key, any token on the Instance can be verified.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public VerifyM2MTokenResponse verifyToken(VerifyM2MTokenRequestBody request) {
        return verifyToken(request, Optional.empty());
    }

    /**
     * Verify a M2M Token
     * 
     * <p>Verifies a M2M Token.
     * 
     * <p>This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.
     * 
     * <p>- When verifying a M2M Token with a Machine Secret Key, the token must be granted access to the
     * Machine associated with the Machine Secret Key.
     * - When verifying a M2M Token with a Clerk Secret Key, any token on the Instance can be verified.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public VerifyM2MTokenResponse verifyToken(VerifyM2MTokenRequestBody request, Optional<Options> options) {
        RequestOperation<VerifyM2MTokenRequestBody, VerifyM2MTokenResponse> operation
              = new VerifyM2MToken.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
