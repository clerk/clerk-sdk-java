/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import static com.clerk.backend_api.operations.Operations.RequestOperation;

import com.clerk.backend_api.models.operations.CreateBulkInvitationsRequestBuilder;
import com.clerk.backend_api.models.operations.CreateBulkInvitationsResponse;
import com.clerk.backend_api.models.operations.CreateInvitationRequestBody;
import com.clerk.backend_api.models.operations.CreateInvitationRequestBuilder;
import com.clerk.backend_api.models.operations.CreateInvitationResponse;
import com.clerk.backend_api.models.operations.ListInvitationsRequest;
import com.clerk.backend_api.models.operations.ListInvitationsRequestBuilder;
import com.clerk.backend_api.models.operations.ListInvitationsResponse;
import com.clerk.backend_api.models.operations.RequestBody;
import com.clerk.backend_api.models.operations.RevokeInvitationRequest;
import com.clerk.backend_api.models.operations.RevokeInvitationRequestBuilder;
import com.clerk.backend_api.models.operations.RevokeInvitationResponse;
import com.clerk.backend_api.operations.CreateBulkInvitations;
import com.clerk.backend_api.operations.CreateInvitation;
import com.clerk.backend_api.operations.ListInvitations;
import com.clerk.backend_api.operations.RevokeInvitation;
import com.clerk.backend_api.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Invitations {
    private final SDKConfiguration sdkConfiguration;

    Invitations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create an invitation
     * 
     * <p>Creates a new invitation for the given email address and sends the invitation email.
     * Keep in mind that you cannot create an invitation if there is already one for the given email address.
     * Also, trying to create an invitation for an email address that already exists in your application will result to an error.
     * 
     * @return The call builder
     */
    public CreateInvitationRequestBuilder create() {
        return new CreateInvitationRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an invitation
     * 
     * <p>Creates a new invitation for the given email address and sends the invitation email.
     * Keep in mind that you cannot create an invitation if there is already one for the given email address.
     * Also, trying to create an invitation for an email address that already exists in your application will result to an error.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateInvitationResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create an invitation
     * 
     * <p>Creates a new invitation for the given email address and sends the invitation email.
     * Keep in mind that you cannot create an invitation if there is already one for the given email address.
     * Also, trying to create an invitation for an email address that already exists in your application will result to an error.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateInvitationResponse create(Optional<? extends CreateInvitationRequestBody> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateInvitationRequestBody>, CreateInvitationResponse> operation
              = new CreateInvitation.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all invitations
     * 
     * <p>Returns all non-revoked invitations for your application, sorted by creation date
     * 
     * @return The call builder
     */
    public ListInvitationsRequestBuilder list() {
        return new ListInvitationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all invitations
     * 
     * <p>Returns all non-revoked invitations for your application, sorted by creation date
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListInvitationsResponse list(ListInvitationsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List all invitations
     * 
     * <p>Returns all non-revoked invitations for your application, sorted by creation date
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListInvitationsResponse list(ListInvitationsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListInvitationsRequest, ListInvitationsResponse> operation
              = new ListInvitations.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create multiple invitations
     * 
     * <p>Use this API operation to create multiple invitations for the provided email addresses. You can choose to send the
     * invitations as emails by setting the `notify` parameter to `true`. There cannot be an existing invitation for any
     * of the email addresses you provide unless you set `ignore_existing` to `true` for specific email addresses. Please
     * note that there must be no existing user for any of the email addresses you provide, and this rule cannot be bypassed.
     * 
     * @return The call builder
     */
    public CreateBulkInvitationsRequestBuilder bulkCreate() {
        return new CreateBulkInvitationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Create multiple invitations
     * 
     * <p>Use this API operation to create multiple invitations for the provided email addresses. You can choose to send the
     * invitations as emails by setting the `notify` parameter to `true`. There cannot be an existing invitation for any
     * of the email addresses you provide unless you set `ignore_existing` to `true` for specific email addresses. Please
     * note that there must be no existing user for any of the email addresses you provide, and this rule cannot be bypassed.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBulkInvitationsResponse bulkCreateDirect() throws Exception {
        return bulkCreate(Optional.empty(), Optional.empty());
    }

    /**
     * Create multiple invitations
     * 
     * <p>Use this API operation to create multiple invitations for the provided email addresses. You can choose to send the
     * invitations as emails by setting the `notify` parameter to `true`. There cannot be an existing invitation for any
     * of the email addresses you provide unless you set `ignore_existing` to `true` for specific email addresses. Please
     * note that there must be no existing user for any of the email addresses you provide, and this rule cannot be bypassed.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBulkInvitationsResponse bulkCreate(Optional<? extends List<RequestBody>> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends List<RequestBody>>, CreateBulkInvitationsResponse> operation
              = new CreateBulkInvitations.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revokes an invitation
     * 
     * <p>Revokes the given invitation.
     * Revoking an invitation will prevent the user from using the invitation link that was sent to them.
     * However, it doesn't prevent the user from signing up if they follow the sign up flow.
     * Only active (i.e. non-revoked) invitations can be revoked.
     * 
     * @return The call builder
     */
    public RevokeInvitationRequestBuilder revoke() {
        return new RevokeInvitationRequestBuilder(sdkConfiguration);
    }

    /**
     * Revokes an invitation
     * 
     * <p>Revokes the given invitation.
     * Revoking an invitation will prevent the user from using the invitation link that was sent to them.
     * However, it doesn't prevent the user from signing up if they follow the sign up flow.
     * Only active (i.e. non-revoked) invitations can be revoked.
     * 
     * @param invitationId The ID of the invitation to be revoked
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeInvitationResponse revoke(String invitationId) throws Exception {
        return revoke(invitationId, Optional.empty());
    }

    /**
     * Revokes an invitation
     * 
     * <p>Revokes the given invitation.
     * Revoking an invitation will prevent the user from using the invitation link that was sent to them.
     * However, it doesn't prevent the user from signing up if they follow the sign up flow.
     * Only active (i.e. non-revoked) invitations can be revoked.
     * 
     * @param invitationId The ID of the invitation to be revoked
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeInvitationResponse revoke(String invitationId, Optional<Options> options) throws Exception {
        RevokeInvitationRequest request =
            RevokeInvitationRequest
                .builder()
                .invitationId(invitationId)
                .build();
        RequestOperation<RevokeInvitationRequest, RevokeInvitationResponse> operation
              = new RevokeInvitation.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
