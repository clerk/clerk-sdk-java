/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.clerk.backend_api;

import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import java.util.concurrent.TimeUnit;

import com.clerk.backend_api.utils.BackoffStrategy;
import com.clerk.backend_api.utils.HTTPClient;
import com.clerk.backend_api.utils.RetryConfig;
import com.clerk.backend_api.utils.SpeakeasyHTTPClient;
import java.lang.IllegalStateException;
import java.lang.String;
import java.lang.System;
import java.util.Optional;
import java.util.function.Consumer;


/**
 * Spring Boot Auto Configuration for api SDK
 * This configuration class automatically configures the api SDK
 * when Spring Boot detects it on the classpath.
 */
@AutoConfiguration
@ConditionalOnClass(Clerk.class)
@EnableConfigurationProperties(BackendApiAutoConfigProperties.class)
public class BackendApiAutoConfig {

    /**
     * Constructor.
     */
    public BackendApiAutoConfig() {
    }

    /**
     * Creates a RetryConfig bean from properties if retry is enabled.
     * 
     * @param properties the configuration properties
     * @return A configured RetryConfig instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(prefix = "backendapi.retry-config", name = "strategy")
    public RetryConfig retryConfig(BackendApiAutoConfigProperties properties) {
        BackendApiAutoConfigProperties.RetryConfig retryProps = properties.getRetryConfig();
        
        if (RetryConfig.Strategy.BACKOFF.equals(retryProps.getStrategy())) {
            BackendApiAutoConfigProperties.RetryConfig.Backoff backoff = retryProps.getBackoff();
            return RetryConfig.builder()
                .backoff(
                    BackoffStrategy.builder()
                        .initialInterval(backoff.getInitialInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxInterval(backoff.getMaxInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxElapsedTime(backoff.getMaxElapsedTime().toMillis(), TimeUnit.MILLISECONDS)
                        .baseFactor(backoff.getBaseFactor())
                        .jitterFactor(backoff.getJitterFactor())
                        .retryConnectError(backoff.isRetryConnectError())
                        .retryReadTimeoutError(backoff.isRetryReadTimeoutError())
                        .build()
                )
                .build();
        }
        
        // Default retry config for other strategies
        return RetryConfig.builder().build();
    }

    /**
     * Creates a {@code Consumer<String>} bean for HTTP debug logging if none exists.
     * This logger is used by the SpeakeasyHTTPClient for debug output when debug logging is enabled.
     * By default, it logs to {@code System.out}, but can be customized by providing your own {@code Consumer<String>} bean.
     *
     * @return A {@code Consumer<String>} that logs messages to {@code System.out}
     */
    @Bean
    @ConditionalOnMissingBean
    public Consumer<String> httpLogger() {
        return System.out::println;
    }

    /**
     * Creates an HTTPClient bean if none exists.
     *
     * @param properties the configuration properties
     * @param httpLogger the logger for HTTP debug output
     * @return A configured HTTPClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HTTPClient httpClient(BackendApiAutoConfigProperties properties, Consumer<String> httpLogger) {
        BackendApiAutoConfigProperties.HttpClient httpClientProps = properties.getHttpClient();

        // Configure the static logger
        SpeakeasyHTTPClient.setLogger(httpLogger);

        if (httpClientProps != null) {
            // Configure debug logging
            SpeakeasyHTTPClient.setDebugLogging(httpClientProps.isEnableDebugLogging());

            // Configure redacted headers
            if (httpClientProps.getRedactedHeaders() != null && !httpClientProps.getRedactedHeaders().isEmpty()) {
                SpeakeasyHTTPClient.setRedactedHeaders(httpClientProps.getRedactedHeaders());
            }
        }

        return new SpeakeasyHTTPClient();
    }
    /**
     * Creates a SecuritySource bean if none exists and security properties are configured.
     *
     * @param properties the configuration properties
     * @return A configured SecuritySource instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnPropertyPrefix(prefix = "backendapi.security")
    public SecuritySource securitySource(BackendApiAutoConfigProperties properties) {BackendApiAutoConfigProperties.Security securityProps = properties.getSecurity();
        com.clerk.backend_api.models.components.Security.Builder securityBuilder = com.clerk.backend_api.models.components.Security.builder();
        boolean hasAnySecurityConfiguration = false;
        // Build bearerAuth security from direct properties (primitive value)
        if (securityProps.getBearerAuth() != null) {
            securityBuilder.bearerAuth(securityProps.getBearerAuth());
            hasAnySecurityConfiguration = true;
        }
        
        if (!hasAnySecurityConfiguration) {
            throw new IllegalStateException("Security configuration is present but no security options are configured. " +
                "Please configure at least one security option in your application properties.");
        }
        
        return SecuritySource.of(securityBuilder.build());
    }

    /**
     * Creates the SDKConfiguration bean as the single source of truth for all SDK configuration.
     *
     * @param properties the configuration properties
     * @param httpClient the HTTP client bean
     * @param hooks the hooks bean
     * @param securitySource the security source bean (optional)
     * @param retryConfig the retry config bean (optional)
     * @return A configured SDKConfiguration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDKConfiguration sdkConfiguration(
            BackendApiAutoConfigProperties properties,
            HTTPClient httpClient,
            com.clerk.backend_api.utils.Hooks hooks,
            SecuritySource securitySource,
            Optional<RetryConfig> retryConfig) {
        
        SDKConfiguration sdkConfiguration = new SDKConfiguration();
        
        sdkConfiguration.setClient(httpClient);
        
        sdkConfiguration.setHooks(hooks);
        sdkConfiguration.setSecuritySource(securitySource);
        
        if (properties.getServerUrl() != null) {
            sdkConfiguration.setServerUrl(properties.getServerUrl());
        }
        sdkConfiguration.setServerIdx(properties.getServerIdx());
        
        sdkConfiguration.setRetryConfig(retryConfig);
        
        return sdkConfiguration;
    }

    /**
     * Creates the main SDK bean using the configured SDKConfiguration.
     *
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured Clerk instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Clerk clerk(SDKConfiguration sdkConfiguration) {
        return new Clerk(sdkConfiguration);
    }

    /**
     * Creates a Hooks configuration bean if none exists.
     *
     * @return A configured Hooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.clerk.backend_api.utils.Hooks hooks() {
        return new com.clerk.backend_api.utils.Hooks();
    }
    /**
     * Creates a Miscellaneous sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Miscellaneous instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Miscellaneous miscellaneous(Clerk clerk) {
        return clerk.miscellaneous();
    }
    /**
     * Creates a Jwks sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Jwks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Jwks jwks(Clerk clerk) {
        return clerk.jwks();
    }
    /**
     * Creates a Clients sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Clients instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Clients clients(Clerk clerk) {
        return clerk.clients();
    }
    /**
     * Creates a EmailAddresses sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured EmailAddresses instance
     */
    @Bean
    @ConditionalOnMissingBean
    public EmailAddresses emailAddresses(Clerk clerk) {
        return clerk.emailAddresses();
    }
    /**
     * Creates a PhoneNumbers sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured PhoneNumbers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public PhoneNumbers phoneNumbers(Clerk clerk) {
        return clerk.phoneNumbers();
    }
    /**
     * Creates a Sessions sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Sessions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Sessions sessions(Clerk clerk) {
        return clerk.sessions();
    }
    /**
     * Creates a EmailSMSTemplates sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured EmailSMSTemplates instance
     */
    @Bean
    @ConditionalOnMissingBean
    public EmailSMSTemplates emailSMSTemplates(Clerk clerk) {
        return clerk.emailSMSTemplates();
    }
    /**
     * Creates a EmailAndSmsTemplates sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured EmailAndSmsTemplates instance
     */
    @Bean
    @ConditionalOnMissingBean
    public EmailAndSmsTemplates emailAndSmsTemplates(Clerk clerk) {
        return clerk.emailAndSmsTemplates();
    }
    /**
     * Creates a Templates sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Templates instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Templates templates(Clerk clerk) {
        return clerk.templates();
    }
    /**
     * Creates a Users sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Users instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Users users(Clerk clerk) {
        return clerk.users();
    }
    /**
     * Creates a Invitations sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Invitations instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Invitations invitations(Clerk clerk) {
        return clerk.invitations();
    }
    /**
     * Creates a OrganizationInvitations sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured OrganizationInvitations instance
     */
    @Bean
    @ConditionalOnMissingBean
    public OrganizationInvitations organizationInvitations(Clerk clerk) {
        return clerk.organizationInvitations();
    }
    /**
     * Creates a AllowlistIdentifiers sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured AllowlistIdentifiers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AllowlistIdentifiers allowlistIdentifiers(Clerk clerk) {
        return clerk.allowlistIdentifiers();
    }
    /**
     * Creates a BlocklistIdentifiers sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured BlocklistIdentifiers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public BlocklistIdentifiers blocklistIdentifiers(Clerk clerk) {
        return clerk.blocklistIdentifiers();
    }
    /**
     * Creates a BetaFeatures sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured BetaFeatures instance
     */
    @Bean
    @ConditionalOnMissingBean
    public BetaFeatures betaFeatures(Clerk clerk) {
        return clerk.betaFeatures();
    }
    /**
     * Creates a ActorTokens sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured ActorTokens instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ActorTokens actorTokens(Clerk clerk) {
        return clerk.actorTokens();
    }
    /**
     * Creates a Domains sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Domains instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Domains domains(Clerk clerk) {
        return clerk.domains();
    }
    /**
     * Creates a InstanceSettings sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured InstanceSettings instance
     */
    @Bean
    @ConditionalOnMissingBean
    public InstanceSettings instanceSettings(Clerk clerk) {
        return clerk.instanceSettings();
    }
    /**
     * Creates a Webhooks sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Webhooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Webhooks webhooks(Clerk clerk) {
        return clerk.webhooks();
    }
    /**
     * Creates a JwtTemplates sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured JwtTemplates instance
     */
    @Bean
    @ConditionalOnMissingBean
    public JwtTemplates jwtTemplates(Clerk clerk) {
        return clerk.jwtTemplates();
    }
    /**
     * Creates a Machines sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Machines instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Machines machines(Clerk clerk) {
        return clerk.machines();
    }
    /**
     * Creates a Organizations sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Organizations instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Organizations organizations(Clerk clerk) {
        return clerk.organizations();
    }
    /**
     * Creates a OrganizationMemberships sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured OrganizationMemberships instance
     */
    @Bean
    @ConditionalOnMissingBean
    public OrganizationMemberships organizationMemberships(Clerk clerk) {
        return clerk.organizationMemberships();
    }
    /**
     * Creates a OrganizationDomains sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured OrganizationDomains instance
     */
    @Bean
    @ConditionalOnMissingBean
    public OrganizationDomains organizationDomains(Clerk clerk) {
        return clerk.organizationDomains();
    }
    /**
     * Creates a ProxyChecks sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured ProxyChecks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ProxyChecks proxyChecks(Clerk clerk) {
        return clerk.proxyChecks();
    }
    /**
     * Creates a RedirectUrls sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured RedirectUrls instance
     */
    @Bean
    @ConditionalOnMissingBean
    public RedirectUrls redirectUrls(Clerk clerk) {
        return clerk.redirectUrls();
    }
    /**
     * Creates a SignInTokens sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured SignInTokens instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SignInTokens signInTokens(Clerk clerk) {
        return clerk.signInTokens();
    }
    /**
     * Creates a SignUps sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured SignUps instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SignUps signUps(Clerk clerk) {
        return clerk.signUps();
    }
    /**
     * Creates a OauthApplications sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured OauthApplications instance
     */
    @Bean
    @ConditionalOnMissingBean
    public OauthApplications oauthApplications(Clerk clerk) {
        return clerk.oauthApplications();
    }
    /**
     * Creates a SamlConnections sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured SamlConnections instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SamlConnections samlConnections(Clerk clerk) {
        return clerk.samlConnections();
    }
    /**
     * Creates a TestingTokens sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured TestingTokens instance
     */
    @Bean
    @ConditionalOnMissingBean
    public TestingTokens testingTokens(Clerk clerk) {
        return clerk.testingTokens();
    }
    /**
     * Creates a WaitlistEntries sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured WaitlistEntries instance
     */
    @Bean
    @ConditionalOnMissingBean
    public WaitlistEntries waitlistEntries(Clerk clerk) {
        return clerk.waitlistEntries();
    }
    /**
     * Creates a Commerce sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Commerce instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Commerce commerce(Clerk clerk) {
        return clerk.commerce();
    }
    /**
     * Creates a Billing sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured Billing instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Billing billing(Clerk clerk) {
        return clerk.billing();
    }
    /**
     * Creates a M2m sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured M2m instance
     */
    @Bean
    @ConditionalOnMissingBean
    public M2m m2m(Clerk clerk) {
        return clerk.m2m();
    }
    /**
     * Creates a OauthAccessTokens sub-SDK bean if none exists.
     *
     * @param clerk the main SDK instance
     * @return A configured OauthAccessTokens instance
     */
    @Bean
    @ConditionalOnMissingBean
    public OauthAccessTokens oauthAccessTokens(Clerk clerk) {
        return clerk.oauthAccessTokens();
    }
}